      PROGRAM    LWTRN7
C***********************************************************************
C     LOWTRAN7  (LAST REVISED FEB 1 1992)   REVISION 4.2
C
C               AUTHORS
C
C               F.X.KNEIZYS
C               E. P. SHETTLE
C               G.P. ANDERSON
C               L. W. ABREU
C               J. H. CHETWYND
C               J. E. A. SELBY    (GRUMMAN AEROSPACE)
C               S. A. CLOUGH      (AER INC)
C               W. O. GALLERY     (OPTIMETRICS)
C
C   PROGRAM LOWTRAN  CALCULATES THE TRANSMITTANCE AND/OR RADIANCE
C   OF THE ATMOSPHERE  FROM   0 CM-1 TO 50000 CM-1 (0.20 TO INFINITY
C   MICRONS) AT 20 CM-1 SPECTRAL RESOLUTION ON A LINEAR
C   WAVENUMBER SCALE WITH 5CM-1 SAMPLING
C
C   LOWTRAN 7 IS A LOW-RESOLUTION PROPAGATION MODEL FOR CALCULATING
C   ATMOSPHERIC TRANSMITTANCE AND BACKGROUND RADIANCE FROM 0 TO
C   50,000 CM-1 AT A RESOLUTION OF 20 CM-1 WITH A MINIMUM OF 5 CM-1
C   SAMPLING.  THE MODEL IS BASED ON THE LOWTRAN 6 (1983) MODEL.
C   THE PROGRAM CALCULATES SINGLE SCATTERED SOLAR (OR LUNAR)
C   RADIATION.  MULTIPLE SCATTERED RADIATION HAS BEEN ADDED TO THE
C   MODEL AS WELL AS NEW MOLECULAR BAND MODEL PARAMETERS AND NEW OR
C   UPDATED OZONE AND MOLECULAR OXYGEN ABSORPTION PARAMETERS FOR THE
C   UV.  OTHER MODIFICATIONS INCLUDE A WIND-DEPENDENT DESERT MODEL, NEW
C   CIRRUS CLOUD MODELS, AND NEW CLOUD AND RAIN MODELS.  THE MODEL ALSO
C   INCLUDES NEW REPRESENTATIVE (GEOGRAPHICAL AND SEASONAL) ATMOSPHERIC
C   MODELS AND UPDATED AEROSOL MODELS WITH OPTIONS TO REPLACE THEM WITH
C   USER-DERIVED VALUES.  SIX MODES OF PROGRAM EXECUTION ARE ALLOWED
C   WITH THE NEW MODEL AND COMPUTER CODE FOR A GIVEN SLANT PATH
C   UTILIZING SPHERICAL-REFRACTIVE GEOMETRY.  THE ARMY VERTICAL
C   STRUCTURE ALGORITHM HAS BEEN MODIFIED TO INCLUDE THE NEW PEDESTAL
C   MODEL BELOW THE CLOUD BASE.  A NEW OPTION HAS BEEN  ADDED TO
C   MODIFY THE AEROSOL PROFILE, IF THE GROUND IS NOT AT SEA LEVEL.
C
C***********************************************************************
C
C     THE FOLLOWING INFORMATION SHOULD BE PROVIDED BY THE USER
C     AND MAILED TO   L.W ABREU  ,AFGL/OPE,HANSCOM AFB,MASS 01731
C     THIS WILL BE USED TO UPDATE THE AFGL MAILING LIST
C     AND FOR NOTIFICATION TO THE USER OF ERRORS IN THE CODE
C
C
C           MY NAME IS
C           COMPANY
C           ADDRESS
C           MY COMPUTER IS
C
C
C***********************************************************************
C   THE USE OF THE WORD 'CARD' IS EQUIVALENT TO EDITING WITH 80 COLUMNS
C
C     PROGRAM ACTIVATED BY SUBMISSION OF A FIVE  (OR MORE)
C      CARD SEQUENCE AS FOLLOWS
C
C     CARD 1    MODEL,ITYPE,IEMSCT,IMULT,M1,M2,M3,
C               M4,M5,M6,MDEF,IM,NOPRT,TBOUND,SALB
C                          FORMAT(13I5,F8.3,F7.2)
C
C     CARD 2    IHAZE,ISEASN,IVULCN,ICSTL,ICLD,IVSA,VIS,WSS,WHH,RAINRT,
C               GNDALT
C                          FORMAT(6I5,5F10.3)
C
C               CARD 2A    CTHIK,CALT,CEXT,ISEED       (ICLD=18,19,20)
C                          FORMAT(3F10.3,I10)
C
C               CARD 2B    ZCVSA,ZTVSA,ZINVSA    (IVSA=1)
C                          FORMAT(3F10.3)
C
C               CARD 2C    ML,IRD1,IRD2,TITLE (MODEL=0 / 7,IM=1)
C                          FORMAT(3I5,18A4)
C
CC------------------------ BEGIN ML LOOP
CC-
CC-             CARD 2C1   ZMDL,P,T,WMOL(1),WMOL(2),WMOL(3),JCHAR
CC-                        FORMAT(F10.3,5E10.3,15A1)
CC-
CC-             CARD 2C2   (WMOL(J),J=4,11)
CC-                        FORMAT(8E10.3)
CC-
CC-             CARD 2C2   WMOL(12)
CC-                        FORMAT(8E10.3)
CC-
CC-             CARD 2C3   AHAZE,EQLWCZ,RRATZ,IHA1,ICLD1,
CC-                        IVUL1,ISEA1,ICHR
CC-                        FORMAT(10X,3F10.3,5I5)
CC-
CC------------------------ END ML LOOP
C
C               CARD 2D    IREG(1 TO 4) (IHAZE=7 OR ICLD = 11)
C                          FORMAT(4I5)
C
C               CARD 2D1   AWCCON,TITLE
C                          FORMAT(E10.3,18A4)
C
C               CARD 2D2   (VX(I),EXTC(N,I),ABSC(N,I),ASYM(N,I),I=1,47)
C                          (IHAZE=7 OR ICLD=11)
C                          FORMAT(3(F6.2,2F7.5,F6.4))
C
C     CARD 3    H1,H2,ANGLE,RANGE,BETA,RO,LEN
C                          FORMAT(6F10.3,I5)
C
C               ALTERNATE  CARD 3 (IEMSCT=3)
C                          H1,H2,ANGLE,IDAY,RO,ISOURC,ANGLEM
C                          FORMAT(3F10.3,I5,5X,F10.3,I5,F10.3)
C
C               CARD 3A1   IPARM,IPH,IDAY,ISOURC           (IEMSCT=2)
C                          FORMAT(4I5)
C
C               CARD 3A2    PARM1,PARM2,PARM3,PARM4,TIME,PSIPO,ANGLEM,G
C                           FORMAT(8F10.3)               (IEMSCT=2)
C
C               CARD 3B1    NANGLS       (IPH=1)
C                           FORMAT(I5)
C
C               CARD 3B2(1 TO NANGLS)    (IPH=1)
C                      (ANGF(I),F(1,I),F(2,I),F(3,I),F(4,I),I=1,NANGLS)
C                           FORMAT(5E10.3)
C
C     CARD 4    V1, V2, DV
C                           FORMAT(3F10.3)
C
C     CARD 5    IRPT
C                           FORMAT(I5)
C
C***********************************************************************
C   ** FOLLOWING IS A FULL DESCRIPTION OF EACH CARD
C
C     CARD 1    MODEL,ITYPE,IEMSCT,IMULT,M1,M2,M3,
C               M4,M5,M6,MDEF,IM,NOPRT,TBOUND,SALB
C                         FORMAT(13I5,F8.3,F7.2)
C
C             'MODEL' SELECTS ONE OF SIX GEOGRAPHICAL MODEL ATMOSPHERES
C              OR SPECIFIES THAT USER-DEFINED METEOROLOGICAL
C              DATA ARE TO BE USED.
C
C
C     MODEL=0 IF METEOROLOGICAL DATA ARE SPECIFIED(HORIZONTAL PATH ONLY)
C           1 TROPICAL ATMOSPHERE
C           2 MIDLATITUDE SUMMER
C           3 MIDLATITUDE WINTER
C           4 SUBARCTIC   SUMMER
C           5 SUBARCTIC   WINTER
C           6 1976 U.S. STANDARD ATMOSPHERE
C           7 IF A NEW MODEL ATMOSPHERE( OR RADIOSONDE DATA) IS TO BE
C             READ IN.
C
C     [NOTE: MODEL=0  USED FOR HORIZONTAL PATH ONLY]
C
C
C           'ITYPE' INDICATES THE TYPE OF ATMOSPHERIC PATH
C
C     ITYPE=1 FOR A HORIZONTAL (CONSTANT-PRESSURE) PATH
C           2 VERTICAL OR SLANT PATH BETWEEN TWO ALTITUDES
C           3 FOR A VERTICAL OR SLANT PATH TO SPACE
C
C
C           'IEMSCT' DETERMINES THE MODE OF EXECUTION OF THE PROGRAM
C
C     IEMSCT=0    PROGRAM EXECUTION IN TRANSMITTANCE MODE.
C            1    PROGRAM EXECUTION IN RADIANCE MODE.
C            2    PROGRAM EXECUTION IN RADIANCE MODE WITH SOLAR/LUNAR
C                  SCATTERED RADIANCE INCLUDED.
C            3    DIRECT SOLAR IRRADIANCE
C
C           'IMULT' DETERMINES EXECUTION WITH MULTIPLE SCATTERING
C
C     IMULT = 0 PROGRAM EXECUTED WITHOUT MULTIPLE SCATTERING
C             1 PROGRAM EXECUTED WITH MULTIPLE SCATTERING
C              [NOTE: IEMSCT MUST EQUAL 1 OR 2 FOR MULTIPLE SCATTERING]
C
C
C           'M1,M2,M3' ARE USED TO MODIFY OR SUPPLEMENT THE ALTITUDE
C            PROFILES OF TEMPERATURE AND PRESSURE,WATER VAPOR,AND OZONE
C
C           'M4,M5,M6'  SEASONAL DEPENDENCE CH4,N2O,CO
C           'MDEF'       USE DEFAULT FOR OTHER GASES
C
C     FOR NORMAL OPERATION OF PROGRAM   (MODEL 1 TO 6)
C     SET M1=M2=M3=0 , M4=M5=M6=MDEF = 0
C
C     THESE PARAMETERS ARE RESET TO DEFAULT VALUES BY MODEL
C     WHEN THEY ARE EQUAL TO ZERO
C
C      EXCEPT FOR MODEL 0 AND 7
C      WHEN M1 = 0 M1 RESET TO 'MODEL'
C      WHEN M2 = 0 M2 RESET TO 'MODEL'
C      WHEN M3 = 0 M3 RESET TO 'MODEL'
C      WHEN M4 = 0 M4 RESET TO 'MODEL'
C      WHEN M5 = 0 M5 RESET TO 'MODEL'
C      WHEN M6 = 0 M6 RESET TO 'MODEL'
C      WHEN MDEF=0 MDEF RESET TO 1  FOR ALL REMAINING
C
C     M1=1-6 DEFAULT TEMP. AND PRESSURE TO SPECIFIED MODEL ATM.
C
C     M2=1-6 DEFAULT H2O   TO SPECIFIED MODEL ATM.
C
C     M3=1-6 DEFAULT OZONE TO SPECIFIED MODEL ATM.
C
C     M4=1-6 DEFAULT CH4   TO SPECIFIED MODEL ATM.
C
C     M5=1-6 DEFAULT N2O   TO SPECIFIED MODEL ATM.
C
C     M6=1-6 DEFAULT CO    TO SPECIFIED MODEL ATM.
C
C     MDEF=1     USE DEFAULT   PROFILE  FOR CO2,O2,NO,SO2,NO2,NH3,HNO3
C                NOT NEEDED WITH MODEL 1 TO 6
C
C
C     IF 'MODEL' 0 OR 'MODEL' 7  THE PROGRAM EXPECTS TO READ
C     "USER SUPPLIED" ATMOSPHERIC PROFILES. SET:'IM' = 1 FOR
C      FIRST RUN. TO RERUN THE SAME "USER-ATMOSPHERE" FOR A SERIES
C      OF CASES SET:'IM' = 0 TO REUSE THE PREVIOUSLY READ DATA.
C
C     IM=0    FOR  NORMAL OPERATION OF PROGRAM OR WHEN SUBSEQUENT
C                  CALCULATIONS ARE TO BE RUN WITH MODEL =7
C        1    WHEN RADIOSONDE DATA ARE TO BE READ INITIALLY.
C
C     NOPRT=0 FOR NORMAL OPERATION OF PROGRAM.
C
C           1 TO MINIMIZE PRINTING OF TRANSMITTANCE /OR RADIANCE TABLE
C                   AND ATMOSPHERIC PROFILES
C
C
C     TBOUND =BOUNDARY TEMPERATURE ( K),USED IN THE RADIATION MODE
C             (IEMSCT = 1 OR 2) FOR SLANT PATHS THAT INTERSECT THE
C             EARTH OR TERMINATE AT A GREY BOUNDARY (FOR EXAMPLE
C             CLOUD,TARGET).  IF TBOUND IS LEFT BLANK AND THE PATH
C             INTERSECTS THE EARTH, THE PROGRAM WILL USE THE
C             TEMPERATURE OF THE FIRST ATMOSPHERIC LEVEL AS THE
C             BOUNDARY TEMPERATURE.
C
C      SALB = SURFACE ALBEDO OF THE EARTH AT THE LOCATION
C             AND AVERAGE FREQUENCY OF THE CALCULATION (0 TO 1.)
C             IF SALB IS LEFT BLANK THE PROGRAM ASSUMES
C             THE SURFACE IS A BLACKBODY.
C***********************************************************************
C
C     CARD 2   IHAZE,ISEASN,IVULCN,ICSTL,ICLD,IVSA,VIS,WSS,WHH,RAINRT,
C              GNDALT
C                          FORMAT(6I5,5F10.3)
C
C     'IHAZE' SELECTS THE TYPE OF EXTINCTION AND A DEFAULT
C     METEOROLOGICAL RANGE FOR THE BOUNDARY-LAYER AEROSOL MODEL
C     (0 TO 2KM ALTITUDE)
C     IF 'VIS' IS ALSO SPECIFIED ON CARD 2 IT WILL OVERRIDE THE
C     DEFAULT 'IHAZE' VALUE  FOR METEOROLOGICAL RANGE
C
C     IHAZE=0  NO AEROSOL ATTENUATION INCLUDED IN CALCULATION.
C          =1  RURAL EXTINCTION, 23-KM VIS.
C          =2  RURAL EXTINCTION, 5-KM VIS.
C          =3  NAVY MARITIME EXTINCTION,SETS OWN VIS.
C          =4  MARITIME EXTINCTION, 23-KM VIS.    (LOWTRAN 5 MODEL)
C          =5  URBAN EXTINCTION, 5-KM VIS.
C          =6  TROPOSPHERIC EXTINCTION, 50-KM VIS.
C          =7  USER DEFINED  AEROSOL EXTINCTION COEFFICIENTS
C              TRIGGERS READING IREG FOR UP TO 4 REGIONS OF
C              USER DEFINED EXTINCTION ABSORPTION AND ASYMMETRY
C          =8  FOG1 (ADVECTIVE FOG) EXTINCTION, 0.2-KM VIS.
C          =9  FOG2 (RADIATIVE FOG) EXTINCTION, 0.5-KM VIS.
C          =10 DESERT EXTINCTION  SETS OWN VISIBILITY FROM WIND SPEED
C
C     'ISEASN' SELECTS THE SEASONAL DEPENDENCE OF THE PROFILES
C     FOR BOTH THE TROPOSPHERIC (2 TO 10 KM) AND
C     STRATOSPHERIC(10 TO 30 KM) AEROSOLS.
C
C     ISEASN=0 DEFAULTS TO SEASON OF 'MODEL'
C              (MODEL 0,1,2,4,6,7) SUMMER
C              (MODEL 3,5)         WINTER
C           =1 SPRING-SUMMER
C           =2 FALL - WINTER
C
C     'IVULCN' SELECTS BOTH THE PROFILE AND EXTINCTION TYPE
C     FOR THE STRATOSPHERIC AEROSOLS AND DETERMINES TRANSITION
C     PROFILES ABOVE THE STRATOSPHERE TO 100 KM.
C
C     IVULCN=0 DEFAULT TO STRATOSPHERIC BACKGROUND
C           =1 STRATOSPHERIC BACKGROUND
C           =2 AGED VOLCANIC TYPE/MODERATE VOLCANIC PROFILE
C           =3 FRESH VOLCANIC TYPE/HIGH VOLCANIC PROFILE
C           =4 AGED VOLCANIC TYPE/HIGH VOLCANIC PROFILE
C           =5 FRESH VOLCANIC TYPE/MODERATE VOLCANIC PROFILE
C           =6 BACKGROUND STRATOSPHERIC TYPE/MODERATE VOLCANIC PROFILE
C           =7 BACKGROUND STRATOSPHERIC TYPE/HIGH VOLCANIC PROFILE
C           =8 FRESH VOLCANIC TYPE/EXTREME VOLCANIC PROFILE
C
C     'ICSTL' IS THE AIR MASS CHARACTER(1 TO 10) ONLY USED WITH
C     NAVY MARITIME MODEL(IHAZE=3)
C
C     ICSTL = 1 OPEN OCEAN
C            .
C            .
C            .
C           10 STRONG CONTINENTAL INFLUENCE
C
C
C     'ICLD' SPECIFIES WHICH OF THE CLOUD MODELS AND THE RAIN RATES
C     ARE USED
C
C     ICLD  FOR CLOUD AND OR RAIN
C     ICLD = 0   NO CLOUDS OR RAIN
C          = 1  CUMULUS CLOUD BASE .66KM TOP 2.7KM
C          = 2  ALTOSTRATUS CLOUD BASE 2.4KM TOP 3.0KM
C          = 3  STRATUS CLOUD BASE .33KM TOP 1.0KM
C          = 4  STRATUS/STRATO CU BASE .66KM TOP 2.0KM
C          = 5  NIMBOSTRATUS CLOUD BASE .16KM TOP .66KM
C          = 6  2.0MM/HR DRIZZLE (MODELED WITH CLOUD  3)
C               RAIN  2. MM HR AT 0KM TO .22 MM HR AT 1.5KM
C          = 7  5.0MM/HR LIGHT RAIN (MODELED WITH CLOUD  5)
C               RAIN  5. MM HR AT 0KM TO .2  MM HR AT 1.5KM
C          = 8  12.5MM/HR MODERATE RAIN (MODELED WITH CLOUD  5)
C               RAIN 12.5MM HR AT 0KM TO .2  MM HR AT 2.0KM
C          = 9  25.0MM/HR HEAVY RAIN (MODELED WITH CLOUD  1)
C               RAIN 25. MM HR AT 0KM TO .2  MM HR AT 3.0KM
C          =10  75.0MM/HR EXTREME RAIN (MODELED WITH CLOUD  1)
C               RAIN 75. MM HR AT 0KM TO .2  MM HR AT 3.5KM
C          =11  READ IN USER DEFINED CLOUD EXTINCTION AND ABSORPTION
C              USER DEFINED  AEROSOL EXTINCTION COEFFICIENTS
C              TRIGGERS READING IREG FOR UP TO 4 REGIONS OF
C              USER DEFINED EXTINCTION ABSORPTION AND ASYMMETRY
C          =18  STANDARD   CIRRUS MODEL
C          =19  SUB VISUAL CIRRUS MODEL
C          =20  NOAA       CIRRUS MODEL  (LOWTRAN 6 MODEL)
C
C
C     IVSA DETERMINES THE USE OF THE ARMY VERTICAL STRUCTURE
C     ALGORITHM FOR AEROSOLS IN THE BOUNDARY LAYER.
C
C     IVSA=0   NOT USED
C         =1   VERTICAL STRUCTURE ALGORITHM
C
C     'VIS'   SPECIFIES THE METEOROLIGICAL RANGE
C     VIS =    METEOROLOGICAL RANGE (KM) (WHEN SPECIFIED,SUPERSEDES
C              DEFAULT VALUE SET BY IHAZE)
C
C     'WSS'     SPECIFIES THE CURRENT WIND SPEED
C     WSS =    CURRENT WIND SPEED (M/S).    WITH (IHAZE=3/IHAZE=10)
C
C     'WHH'    SPECIFIES THE 24 HOUR AVERAGE WIND SPEED
C     WHH =    24 HOUR AVERAGE WIND SPEED (M/S).  ONLY WITH (IHAZE=3)
C
C     'RAINRT' SPECIFIES THE RAIN RATE
C     RAINRT = RAIN RATE (MM/HR).             DEFAULT VALUE IS ZERO.
C     USED  TO TOP OF CLOUD WHEN CLOUD IS PRESENT
C     WHEN NO CLOUDS RAIN RATE USED TO 6KM
C
C     'GNDALT' SPECIFIES THE ALTITUDE OF SURFACE RELATIVE TO SEA LEVEL
C     GNDALT = ALTITUDE OF SURFACE RELATIVE TO SEA LEVEL (KM)
C              USED TO MODIFY  AEROSOL PROFILES BELOW 6 KM ALTITUDE
C
C***********************************************************************
C
C     OPTIONAL INPUT CARDS AFTER CARD 2
C     SELECTED BY PARAMETERS ICLD,IVSA,MODEL,AND IHAZE ON CARDS 2
C
C
C     CARD 2A   CTHIK,CALT,CEXT,ISEED     (ICLD=18,19,20)
C                          FORMAT(3F10.3,I10)
C                   INPUT CARD FOR CIRRUS ALTITUDE PROFILE
C                   SUBROUTINE WHEN ICLD = 18,19,20
C
C     CHTIK    = CIRRUS THICKNESS (KM)
C                0  USE THICKNESS STATISTICS
C
C     CALT     = CIRRUS BASE ALTITUDE(KM)
C                0 USE DEFAULT DETERMINED BY 'MODEL'
C
C     CEXT     = EXTINCTION COEFFIENT(KM-1) AT 0.55
C                0 USE 0.14 * CTHIK
C
C     ISEED    = RANDOM NUMBER INITIALIZATION FLAG.
C                0 USE DEFAULT MEAN VALUES FOR CIRRUS
C                .NE. 0 INITIAL VALUE OF SEED FOR
C                RANDOM NUMBER GENERATOR FUNCTION
C                CHANGE SEED VALUE EACH RUN FOR DIFFERENT
C                RANDOM NUMBER SEQUENCES.  THIS PROVIDES FOR
C                STATISTICAL DETERMINATION OF CIRRUS BASE
C                ALTITUDE AND THICKNESS.
C
C   NOTE: RANDOM NUMBERS GENERATION IS SYSTEM DEPENDENT
C
C***********************************************************************
C
C     CARD 2B             ZCVSA,ZTVSA,ZINVSA     (IVSA=1)
C                          FORMAT(3F10.3)
C               INPUT CARD FOR ARMY VERTICAL STRUCTURE
C               ALGORITHM SUBROUTINE WHEN IVSA=1.
C
C     ZCVSA = CLOUD CEILING HEIGHT (KM)
C             LT 0 NO CLOUD CEILING
C             GT 0 KNOWN CLOUD CEILING
C                0 UNKNOWN CLOUD CEILING HEIGHT
C                  PROGRAM CALCULATES CLOUD HEIGHT
C
C     ZTVSA = THICKNESS OF CLOUD OR FOG (KM),
C               0 DEFAULTS TO 200 METERS
C
C     ZINVSA= HEIGHT OF THE INVERSION (KM)
C                 0 DEFAULTS TO 100 METERS
C             LT  0 NO INVERSION LAYER
C
C***********************************************************************
C
C     CARD 2C  ML,IRD1,IRD2,TITLE   (MODEL=0 / 7,IM=1)
C                          FORMAT(3I5,18A4)
C              ADDITIONAL ATMOSPHERIC MODEL       (MODEL=7)
C              NEW MODEL ATMOSPHERE CAN BE INSERTED PROVIDED THE
C              PARAMETERS 'MODEL' AND 'IM' ARE SET EQUAL TO 7 AND 1
C              RESPECTIVELY ON CARD 1.
C
C     ML=      NUMBER OF ATMOSPHERIC LEVELS TO BE INSERTED
C                   (MAXIMUM OF 34)
C
C     CARD 2C1 IS READ AUTOMATICALLY FOR MODEL 0 AND 7
C
C     IRD1 CONTROL READING WN2O,WCO ... AND WNH3,WHNO3      CARD
C
C     IRD1 = 0     NO READ  (MOLECULAR DENSITIES BY LAYER)
C     IRD1 = 1     READ
C
C     IRD2  CONTROL READING AHAZE,EQLWCZ,... CARD
C
C     IRD2 = 0     NO READ  (AEROSOL CONTROL BY LAYER)
C     IRD2 = 1     READ
C
C     JCHAR  ON CARD 2C1 IS USUALLY USED TO DEFINE MOLECULES 4 TO 12
C     IHAZE  ON CARD 2   IS USUALLY USED TO DEFINE AEROSOL PROFILES
C     IRD1 = 1 OR IRD2 = 1   SELDOM USED
C
C     TITLE=   IDENTIFICATION OF NEW MODEL ATMOSPHERE
C
C
C     THE FOLLOWING CARDS ARE READ IN SUBROUTINE AERNSM
C
CC------------------------ BEGIN ML LOOP
CC-
CC-   CARD 2C1 ZMDL,P,T,WMOL(1),WMOL(2),WMOL(3),JCHAR
CC-   LAYER VARIABLES        WH,   WCO2,     WO,JCHAR (1 TO 13)
CC-                        FORMAT(F10.3,5E10.3,15A1)
CC-
CC-   ZMDL     ALTITUDE OF LAYER (KM)
CC-   P        PRESSURE AT LAYER
CC-   T        TEMPERATURE
CC-   WMOL     READ, INTERPRETED AND MOVED INTO LAYER VARIABLES
CC-   WH =     WATER VAPOR
CC-   WCO2 =   CO2
CC-   WO =     OZONE
CC-
CC-   JCHAR    FLAGS TO SPECIFY UNITS OR DEFAULTS FOR
CC-   P,T,WH,WCO2,WO,WN2O,WCO,.. AND WNH3,WHNO3
CC-   JCHAR BLANK DEFAULT TO M1,M2,M3,M4,M5,M6,MDEF WHEN AMOUNT ZERO
CC-
CC-      PARAMETERS - JCHAR = INPUT KEY
CC-
CC-   **  ACCEPTS VARIABLE UNITS ON PRESS AND TEMP
CC-
CC-     JCHAR(1)
CC-
CC-    " ",A           PRESSURE IN (MB)    OR BLANK
CC-        B              "     "  (ATM)
CC-        C              "     "  (TORR)
CC-       1-6          DEFAULT TO SPECIFIED MODEL ATMOSPHERE
CC-
CC-     JCHAR(2)
CC-    " ",A           AMBIENT TEMPERATURE IN DEG(K)  OR BLANK
CC-        B              "         "       "  " (C)
CC-       1-6          DEFAULT TO SPECIFIED MODEL ATMOSPHERE
CC-
CC-   ****************************************************************
CC-   FOR MOLECULAR SPECIES ONLY
CC-
CC-     JCHAR             JCHAR(3-13)
CC-
CC-   " ",A            VOLUME MIXING RATIO (PPMV)
CC-       B            NUMBER DENSITY (CM-3)
CC-       C            MASS MIXING RATIO (GM(K)/KG(AIR))
CC-       D            MASS DENSITY (GM M-3)
CC-       E            PARTIAL PRESSURE (MB)
CC-       F            DEW POINT TEMP (TD IN T(K)) - H2O ONLY
CC-       G             "    "     "  (TD IN T(C)) - H2O ONLY
CC-       H            RELATIVE HUMIDITY (RH IN PERCENT) - H2O ONLY (3)
CC-       I            AVAILABLE FOR USER DEFINITION
CC-      1-6           DEFAULT TO SPECIFIED MODEL ATMOSPHERE
CC-
CC-   ****************************************************************
CC-
CC-   CARD 2C2   (WMOL(J),J=4,11)
CC-   VARIABLES  WN2O,WCO,WCH4,WO2,WNO,WSO2,WNO2,WNH3
CC-                        FORMAT(8E10.3)
CC-
CC-   CARD 2C2   WMOL(12)             (CONT)
CC-   VARIABLE   WHNO3
CC-                        FORMAT(8E10.3)
CC-
CC-
CC-   WMOL     READ, INTERPRETED AND MOVED INTO LAYER VARIABLES
CC-   WN2O =   N2O
CC-   WCO  =   CO
CC-   WCH4 =   CH4
CC-   WO2  =   O2
CC-   WNO  =   NO
CC-   WSO2 =   SO2
CC-   WNO2 =   NO2
CC-   WNH3 =   NH3
CC-   WHNO3 =  HNO3
CC-
CC-   ****************************************************************
CC-
CC- CARD 2C3     AHAZE,EQLWCZ,RRATZ,IHA1,ICLD1,IVUL1,ISEA1,ICHR
CC-                        FORMAT(10X,3F10.3,5I5)
CC-
CC-  'AHAZE' AEROSOL SCALING FACTOR (EQUAL TO THE VISIBLE [0.55UM]
CC-          EXTINCTION COEFFICIENT AT ALTZ)
CC-
CC-          [NOTE ** ONE OF AHAZE OR EQLWCZ IS ALLOWED ]
CC-
CC-  'EQLWCZ' EQUIVALENT LIQUID WATER CONTENT ( GM/M3) AT ALT Z
CC-           FOR THE AEROSOL, CLOUD OR FOG MODELS
CC-
CC-   RRATZ=RAIN RATE (MM/HR) AT ALT Z
CC-
CC-   'IHA1' AEROSOL EXTINCTION AND METEOROLOGICAL RANGE CONTROL FOR
CC-          THE ALTITUDE, Z
CC-
CC-   'ICLD1' CLOUD EXTINCTION CONTROL FOR THE ALTITUDE, Z
CC-
CC-   WHEN USING 'ICLD1' IT IS NECESSARY TO SET 'ICLD' (NON ZERO)
CC-
CC-   'IVUL1' STRATOSPHERIC AEROSOL PROFILE AND EXTINCTION CONTROL FOR
CC-   THE ALTITUDE Z
CC-
CC-   ONLY ONE OF 'IHA1','ICLD1' OR 'IVUL1' IS ALLOWED
CC-   IF 'IHA1' NE 0  THEN OTHERS IGNORED
CC-   IF 'IHA1' EQ 0 AND 'ICLD1' NE 0 THEN USE 'ICLD1'
CC-
CC-   IF 'AHAZE' AND 'EQLWCZ' ARE BOTH ZERO  DEFAULT PROFILE LOADED
CC-      FROM 'IHAZ1','ICLD1','IVUL1'
CC-
CC-   'ISEA1'  AEROSOL SEASON CONTROL FOR THE ALTITUDE,Z
CC-
CC-   'ICHR '  CHANGE PROFILE REGION  AT ALTITUDE Z
CC-            USED WHEN IHA1 IS 7 IN TWO ADJACENT ALTITUDE REGIMES
CC-
CC------------- END ML LOOP
C***********************************************************************
C
C   IHAZE = 7 OR ICLD = 11 INPUT
C
C   CARD 2D  (IREG(II),II=1,4)
C                        FORMAT(4I5)
C
C             'IREG' SPECIFIES WHICH OF THE FOUR AEROSOL REGIONS
C              A USER DEFINED AEROSOL MODEL IS USED (IHAZE=7/ICLD=11)
C
C             [NOTE   REGIONS DEFAULT TO
C             0-2 ,3-10,11-30,35-100 KM
C             AND CAN BE OVERRIDDEN WITH 'IHA1' SETTINGS IN MODEL 7]
C
C             IREG = 0  USE DEFAULT VALUES FOR THIS REGION
C
C             IREG = 1  READ EXTINCTION ABSORPTION ASYMMETRY
C             FOR A REGION
C
C   CARD 2D1 AWCCON,TITLE
C                        FORMAT(E10.3,18A4)
C
C            'AWWCON' EQUIVALENT LIQUID WATER CONTENT(GM/M3)
C             FOR A REGION
C
C             'TITLE' FOR A AEROSOL REGION
C
C    CARD 2D2 (VX(I),EXTC(N,I),ABSC(N,I),ASYM(N,I),I=1,47)
C                   FORMAT(4(F6.2,2F7.5,F6.4))
C
C             WHERE  N = IREG(II)   FOR UP TO 4 ALTITUDE REGIONS
C             USER DEFINED AEROSOL  OR CLOUD EXTINCTION AND ABSORPTION
C              COEFFICIENTS WHEN IHAZE = 7 OR ICLD = 11
C
C     VX(I)    = WAVELENGTH OF AEROSOL COEFFICIENT
C                   (NOT USED BY PROGRAM BUT CORRESPONDING TO
C                   WAVELENGTHS DEFINED IN ARRAY VX2
C                   IN SUBROUTINE EXTDTA)
C
C     EXTC(N,I) = AEROSOL EXTINCTION COEFFICIENT
C     ABSC(N,I) = AEROSOL ABSORPTION COEFFICIENT
C     ASYM(N,I) = AEROSOL ASYMMETRY PARAMETER
C     WHERE  N = IREG(II)   FOR UP TO 4 ALTITUDE REGIONS
C
C***********************************************************************
C
C     CARD 3    H1,H2,ANGLE,RANGE,BETA,RO,LEN    FORMAT(6F10.3,I5)
C            USED TO DEFINE THE GEOMETRICAL PATH PARAMETERS FOR A GIVEN
C            PROBLEM.
C
C     OR IF IEMSCT=3 ; CARD 3 H1,H2,ANGLE,IDAY,RO,ISOURC,ANGLEM
C
C     H1  =  INITIAL ALTITUDE(KM)
C     H2  =  FINAL ALTITUDE(KM)
C
C                   IN THE RADIANCE MODE OF THE PROGRAM EXECUTION
C            H1, THE INITIAL ALTITUDE,ALWAYS DEFINES THE POSITION OF
C            THE OBSERVER (OR SENSOR).
C
C     ANGLE =INITIAL ZENITH ANGLE (DEGREES) AS MEASURED FROM H1
C     [NOTE: ANGLE = 0 LOOKS STRAIGHT UP.
C            ANGLE IS DEFINED  FROM 0 TO 180 DEGREES ]
C
C     RANGE =PATH LENGTH (KM)
C     BETA  =EARTH CENTER ANGLE SUBTENDED BY H1 AND H2 (DEGREES)
C
C     RO =   RADIUS OF THE EARTH (KM) AT THE PARTICULAR GEOGRAPHICAL
C            LOCATION AT WHICH THE CALCULATION IS TO BE PERFORMED.
C              IF RO BLANK PROGRAM USES RADIUS FOR APPROPRIATE MODEL
C              ATMOSPHERE. (MODEL 0 OR 7 DEFAULT = 6371.23 KM)
C
C     LEN =0 FOR NORMAL OPERATION OF PROGRAM
C         =1 LONG PATH THROUGH THE TANGENT HEIGHT
C
C            IT IS NOT NECESSARY TO SPECIFY EVERY QUANTITY GIVEN ABOVE
C            ONLY THOSE THAT ADEQUATELY DESCRIBE THE PROBLEM ACCORDING
C            TO THE PARAMETER ITYPE
C
C            ITYPE=1 READ H1,RANGE
C                 =2 READ H1,H2,ANGLE   OR H1,H2,RANGE   OR H1,H2,BETA
C                    OR H1,ANGLE,RANGE
C                 =3 READ H1,ANGLE OR H1,H2
C                    [NOTE: H2 IS INTERPRETED AS HMIN FOR THIS CASE]
C
C--------------
C     CARD 3    OPTION  IEMSCT = 3
C    'IDAY'     DAY OF THE YEAR, I.E. FROM 1 TO 365  (IEMSCT = 3)
C
C     ISOURC=0  EXTRATERRESTRIAL SOURCE IS THE SUN
C           =1  EXTRATERRESTRIAL SOURCE IS THE MOON
C
C     ANGLEM=PHASE ANGLE OF THE MOON, I.E. THE ANGLE FORMED
C            BY THE SUN, MOON AND EARTH (REQUIRED IF ISOURC=1)
C
C***********************************************************************
C
C     CARD 3A1   IPARM,IPH,IDAY,ISOURC           (IEMSCT=2)
C                          FORMAT(4I5)
C              INPUT CARD FOR SOLAR/LUNAR SCATTERED RADIATION WHEN
C              IEMSCT = 2
C
C              IPARM =0,1,2 AND CONTROLS THE METHOD OF SPECIFYING THE
C              SOLAR/LUNAR GEOMETRY ON CARD 3A2.
C                     (SEE DEFINITION BELOW FOR CARD 3A2)
C
C              IPH DETERMINES THE TYPE OF PHASE FUNCTION USED IN THE
C               CALCULATION
C
C     IPH=0     HENYEY-GREENSTEIN AEROSOL PHASE FUNCTION
C        =1     USER SUPPLIED AEROSOL PHASE FUNCTION (SEE CARD 3B)
C        =2     MIE GENERATED DATA BASE OF AEROSOL PHASE FUNCTIONS FOR
C               THE LOWTRAN MODELS.
C
C     IDAY=     DAY OF THE YEAR, I.E. FROM 1 TO 365   (REQUIRED)
C
C     ISOURC=0  EXTRATERRESTRIAL SOURCE IS THE SUN
C           =1  EXTRATERRESTRIAL SOURCE IS THE MOON
C
C***********************************************************************
C
C     CARD 3A2  PARM1,PARM2,PARM3,PARM4,TIME,PSIPO,ANGLEM,G
C                          FORMAT(8F10.3)                (IEMSCT=2)
C              INPUT CARD FOR SOLAR/LUNAR SCATTERED RADIATION WHEN
C              IEMSCT = 2
C              DEFINITIONS OF PARM1,PARM2,PARM3,PARM4 DETERMINED BY
C              VALUE OF IPARM ON CARD 3A1.
C
C                       FOR IPARM=0
C
C     PARM1= OBSERVER LATITUDE (-90 TO +90)
C          NOTE- IF ABS(PARM1) IS GREATER THAN 89.5 THE OBSERVER IS
C          ASSUMED TO BE AT EITHER THE NORTH OR THE SOUTH POLE.  IN
C          THAT CASE THE PATH AZIMUTH IS UNDEFINED.  THE DIRECTION OF
C          LINE OF SIGHT MUST BE SPECIFIED AS THE LONGITUDE ALONG WHICH
C          THE PATH LIES. THIS QUANTITY RATHER THAN THE USUAL AZIMUTH
C          IS READ IN
C     PARM2= OBSERVER LONGITUDE (0 TO 360)
C     PARM3= SOURCE (SUN OR MOON) LATITUDE
C     PARM4= SOURCE (SUN OR MOON) LONGITUDE
C
C                       FOR IPARM=1
C        (IDAY AND TIME MUST BE SPECIFIED,CANNOT BE USED WITH ISOURC=1)
C
C
C     PARM1= OBSERVER LATITUDE (-90 TO +90)
C     PARM2= OBSERVER LONGITUDE (0 TO 360)
C             PARM3,PARM4 ARE NOT REQUIRED
C
C     [NOTE: THAT THE CALCULATED APPARENT SOLAR ZENITH
C            ANGLE IS THE ZENITH ANGLE AT H1 OF THE REFRACTED
C            PATH TO THE SUN AND IS LESS THAN THE ASTRONOMICAL
C            SOLAR ZENITH ANGLE.  THE DIFFERENCE BETWEEN THE
C            TWO ANGLES IS NEGLIGIBLE FOR ANGLES LESS THAN 80
C            DEGREES.]
C
C                        FOR IPARM=2
C
C     PARM1= AZIMUTHAL ANGLE BETWEEN THE OBSERVER'S LINE OF SIGHT
C            AND THE OBSERVER-TO-SUN PATH, MEASURED FROM THE LINE
C            OF SIGHT, POSITIVE EAST OF NORTH, BETWEEN -180 AND 180
C     PARM2= THE SUN'S ZENITH ANGLE
C
C              PARM3,PARM4 ARE NOT REQUIRED
C
C
C              REMAINING CONTROL PARAMETERS
C
C     TIME=  GREENWICH TIME IN DECIMAL HOURS, I.E. 8:45 AM IS 8.75,
C            5:20 PM IS 17.33 ETC. (USED WITH IPARM = 1)
C
C     PSIPO= PATH AZIMUTH (DEGREES EAST OF NORTH, I.E. DUE NORTH IS 0.0
C            DUE EAST IS 90.0 ETC.  (USED WITH IPARM = 0 OR 1)
C
C     ANGLEM=PHASE ANGLE OF THE MOON, I.E. THE ANGLE FORMED
C            BY THE SUN, MOON AND EARTH (REQUIRED IF ISOURC=1)
C
C     G=     ASYMMETRY FACTOR FOR USE WITH HENYEY-GREENSTEIN
C            PHASE FUNCTION (USED WITH IPH = 0)
C
C***********************************************************************
C     CARD 3B1 NANGLS          (IPH=1)
C                   FORMAT(I5)
C
C              INPUT CARD FOR USER DEFINED PHASE FUNCTIONS WHEN IPH=1.
C
C     NANGLS=  NUMBER OF ANGLES FOR THE USER DEFINED PHASE
C              FUNCTIONS(MAXIMUM OF 50)
C
C***********************************************************************
C
C     CARD 3B2(1 TO NANGLS)    (IPH=1)
C             (ANGF(I),F(1,I),F(2,I),F(3,I),F(4,I),I=1,NANGLS)
C                   FORMAT(5E10.3)
C              INPUT CARD FOR USER DEFINED PHASE FUNCTION WHEN IPH=1.
C              FOR AVERAGE FREQUENCY OF CALCULATION
C
C     ANGF(I)= PHASE ANGLE IN DECIMAL DEGREES
C                   (0.0 TO 180.0)
C
C     F(1,I)=  USER DEFINED PHASE FUNCTION AT ANGF(I)
C              BOUNDARY LAYER DEFAULTS TO (0 TO 2KM))
C
C     F(2,I)=  USER DEFINED PHASE FUNCTION AT ANGF(I)
C              TROPOSPHERE DEFAULTS TO (2 TO 10 KM)
C
C     F(3,I)=  USER DEFINED PHASE FUNCTION AT ANGF(I)
C              STRATOSPHERE DEFAULTS TO (10 TO 30 KM)
C
C     F(4,I)=  USER DEFINED PHASE FUNCTION AT ANGF(I)
C              MESOSPHERE DEFAULTS TO (30 TO 100 KM)
C
C***********************************************************************
C
C     CARD 4    V1, V2, DV                       FORMAT(3F10.3)
C
C              THE SPECTRAL RANGE OVER WHICH DATA ARE REQUIRED AND
C              THE SPECTRAL INCREMENTS AT WHICH THE DATA ARE TO BE
C              CALCULATED  IS DETERMINED BY CARD 4.
C
C     V1 =     INITIAL FREQUENCY (WAVENUMBER CM-1 )
C     V2 =     FINAL FREQUENCY(WAVENUMBER CM-1 )
C     DV =     FREQUENCY INCREMENT (OR STEP SIZE) (CM-1)
C              NOTE: DV MUST BE A MULTIPLE OF 5 CM-1
C              ANY STEP SIZE .GT. 5 CM-1 WILL UNDERSAMPLE THE RESULTS
C
C              SCANNING FUNCTION IS AVAILABLE TO PROPERLY HANDLE DATA
C              WITH LOWER RESOLUTION THAN 20CM-1 LOWTRAN 7
C
C***********************************************************************
C
C     CARD 5    IRPT                             FORMAT(I5)
C     IRPT=0  TO END PROGRAM
C         =1  READ ALL DATA CARDS (1,2,3,4,5)
C         =2  NOT USED  (WILL STOP PROGRAM)
C         =3  READ CARD 3   THE GEOMETRY CARD AND CARD 5
C         =4  READ CARD 4 TO CHANGE FREQUENCY AND CARD 5
C     GT 4 OR IRPT=2 WILL CAUSE PROGRAM TO STOP
C
C     IRPT GE 1 USED FOR MULTIPLE RUNS OF LOWTRAN
C     WARNING IRPT 3 CANNOT BE USED WHEN RUNNING MULTIPLE SCATTERING
C     CASES WITH SOLAR SCATTERING
C
C     REFERENCES
C
C       (1980) ATMOSPHERIC TRANSMITTANCE/RADIANCE- COMPUTER CODE
C       LOWTRAN 5 AFGL-TR-80-0067
C       KNEIZYS, F. X.,SHETTLE, E. P. ,GALLERY, W. O.,CHETWYND, J. H.,
C       ABREU, L. W., SELBY, J. E. A., FENN, R. W. ,MCCLATCHEY R. A.
C
C       (1983) ATMOSPHERIC TRANSMITTANCE/RADIANCE- COMPUTER CODE
C       LOWTRAN 6  AFGL TR 83 0187
C       KNEIZYS, F. X.,SHETTLE, E. P. ,GALLERY, W. O.,CHETWYND, J. H.,
C       ABREU, L. W., SELBY, J. E. A., CLOUGH, S. A., FENN, R. W.
C
C       (1988) ATMOSPHERIC TRANSMITTANCE/RADIANCE- COMPUTER CODE
C       LOWTRAN 7 AFGL-TR-88-XXXX
C       KNEIZYS, F. X.,SHETTLE, E. P. ,ANDERSON G. P.,ABREU ,L. W.
C       CHETWYND, J H,SELBY, J. E. A. ,CLOUGH, S. A.,GALLERY, W. O
C
C       (1988) LOWTRAN 7 COMPUTER CODE : USER'S MANUAL AFGL-TR-88-XXXX
C       KNEIZYS, F. X.,SHETTLE, E. P. ,ANDERSON G. P.,ABREU ,L. W.
C       CHETWYND, J H,SELBY, J. E. A. ,CLOUGH, S. A.,GALLERY, W. O
C
C       MOLECULAR TRANSMISSION BAND MODELS FOR LOWTRAN AFGL-TR-86-0272
C       PIERLUISSI, J. H., MARAGOUDAKIS, C. E.
C
C       MULTIPLE SCATTERING TREATMENT FOR USE IN
C       THE LOWTRAN AND FASCODE MODELS  AFGL-TR-86-0073
C       ISAACS, R. G., WANG, W. C., WORSHAM, R. D.,GOLDENBERG S.
C
C       AFGL ATMOSPHERIC CONSTITUENT PROFILES (0 TO 120KM)
C                                              AFGL-TR-86-0110
C       ANDERSON, G. P., CLOUGH, S. A., KNEIZYS, F. X.,
C       CHETWYND, J. H., SHETTLE, E. P.
C
C       PROGRAM FOR ATMOSPHERIC TRANSMITTANCE RADIANCE/CALCULATIONS
C       FSCATM                                  AFGL-TR-83-0065
C       GALLERY, W. O., KNEIZYS, F. X., AND CLOUGH, S. A.
C
C       AFGL HANDBOOK OF GEOPHYSICS AND THE SPACE ENVIRONMENT
C       EDITOR, A. S. JURSA  CHAPTER 18 1985
C
C       MODELS OF THE AEROSOLS OF THE LOWER ATMOSPHERE AND THE EFFECTS
C       OF HUMIDITY VARIATIONS ON THEIR OPTICAL PROPERTIES
C       SHETTLE, E.P. AND FENN, R. W.            AFGL-TR-79-0214
C
C       OPTICAL PROPAGATION IN THE ATMOSPHERE    AGARD-CP-183  1975
C       SHETTLE, E. P., AND FENN, R. W.          NTIS (NO AD-A028-615)
C
C
C       ATMOSPHERIC ATTENUATION OF MILLIMETER AND SUBMILLIMETER
C       WAVES:  MODEL AND COMPUTER CODE          AFGL-TR-79-0253
C       FALCONE,V. J. JR.,ABREU,L. W. AND SHETTLE, E. P.
C
C       LOWTRAN  PLUS ULTRAVIOLET O2 ABSORPTION
C
C       REFERENCES- JOHNSTON, ET AL, J GEOPHYS RES, 89,11661-11665,1984.
C
C       FREQUENCY RANGE: 50000-36000CM-1 FOR HERZBERG CALCULATION
C
C       THE SCHUMANN-RUNGE BANDS (PARTICULARLY THE 1,0 AND 0,0) ARE NOT
C       INCLUDED IN THE CALCULATIONS (50000 AND 49400 CM-1).
C       THE HERZBERG BANDS ARE APPROXIMATED BY AN EXTRAPOLATION OF THE
C       HERZBERG CONTINUUM (41322-36000 CM-1).
C
C***********************************************************************
      COMMON RELHUM(34),HSTOR(34),ICH(4),VH(17),TX(63),W(63)
      COMMON             WPATH(68, 63),TBBY(68)
      COMMON ABSC(5,47),EXTC(5,47),ASYM(5,47),VX2(47),AWCCON(5)
      COMMON /IFIL/ IRD,IPR,IPU,NPR,IPR1
      COMMON /CARD1/ MODEL,ITYPE,IEMSCT,M1,M2,M3,IM,NOPRT,TBOUND,SALB
      COMMON /CARD1A/ M4,M5,M6,MDEF,IRD1,IRD2
      COMMON /CARD2/ IHAZE,ISEASN,IVULCN,ICSTL,ICLD,IVSA,VIS,WSS,WHH,
     1    RAINRT
      COMMON /CARD2A/ CTHIK,CALT,CEXT
      COMMON /CARD2D/ IREG(4),ALTB(4),IREGC(4)
      COMMON /CARD3/ H1,H2,ANGLE,RANGE,BETA,RE,LEN
      COMMON /CARD4/ V1,V2,DV
      COMMON /CNSTNS/ PI,CA,DEG,GCAIR,BIGNUM,BIGEXP
      COMMON /CNTRL/ KMAX,M,IKMAX,NL,ML,IKLO,ISSGEO,IMULT
      COMMON /MODEL/ ZM(34),PM(34),TM(34),RFNDX(34),DENSTY(63,34),
     1 CLDAMT(34),RRAMT(34),EQLWC(34),HAZEC(34)
      COMMON /SOLS/ AH1(68),ARH(68),
     X   WPATHS(68,63),PA(68),PR(68),ATHETA(35),ADBETA(35),LJ(69),JTURN,
     X ANGSUN,CSZEN(68)
      COMMON /MART/ RHH
      COMMON /USRDTA/ NANGLS,ANGF(50),F(4,50)
      COMMON /MDLZ/ HMDLZ(8)
      COMMON /ZVSALY/ ZVSA(10),RHVSA(10),AHVSA(10),IHVSA(10)
      CHARACTER*4  HHAZE      ,HSEASN     ,HVULCN     ,BLANK,
     X            HMET        ,HMODEL     ,HTRRAD
      COMMON /TITL/ HHAZE(5,16),HSEASN(5,2),HVULCN(5,8),BLANK,
     X HMET(5,2),HMODEL(5,8),HTRRAD(6,4)
      COMMON /VSBD/ VSB(10)
      COMMON /MNLT/TBBSS(68),TBBMS(34),WPMS(34,63),IMSMX,WPMSS(34,63)
      COMMON /PATH/ PL(68),QTHETA(68),ITEST,HI,HF,AHT(68)
      COMMON /AERTM/TAE7,TAE12,TAE13,TAE14,TAE16
C*****HDATE AND HTIME CARRY THE DATA AND TIME AND MUST BE DOUBLE
C*****PRECISION ON A 32 BIT WORD COMPUTER
C@    DOUBLE PRECISION HDATE,HTIME
      DIMENSION PLST(68),CSENSV(68),QTHETS(68)
      DATA IRPT / 0 /
C*****IRD, IPR, AND IPU ARE UNIT NUMBERS FOR INPUT, OUTPUT, AND
C*****  IPR1 = OUTPUT OF MOLECULAR TRANSMITTANCE
      DATA        MAXGEO   /    68/
      IRD = 5
      IPR = 6
      IPU = 7
      IPR1= 8
      OPEN (IRD,FILE='lowtran7.5',STATUS='OLD')
      OPEN (IPR,FILE='TAPE6',STATUS='UNKNOWN')
      OPEN (IPU,FILE='TAPE7',STATUS='UNKNOWN')
      OPEN (IPR1,FILE='TAPE8',STATUS='UNKNOWN')
C
C     ALTITUDE PARAMETERS
C
C     ZMDL  COMMON/MODEL/  THE ALTITUDES USED IN LOWTRAN
C     ZCVSA,ZTVSA,ZIVSA  CARD 3.3 LOWTRAN FOR VSA INPUT
C     ZVSA  NINE ALTITUDES GEN BY VSA ROUTINE
C
      PI=2.0*ASIN(1.0)
      CA=PI/180.
      DEG= 1.0/CA
      RANGE=0.0
C*****GCAIR IS THE GAS CONSTANT FOR AIR IN UNITS OF MB/(GM CM-3 K)
      GCAIR = 2.87053E+3
C*****BIGNUM AND BIGEXP ARE THE LARGEST NUMBER AND THE LARGEST ARGUMENT
C*****EXP ALLOWED AND ARE MACHINE DEPENDENT. THE NUMBERS USED HERE ARE F
C*****A TYPICAL 32 BIT-WORD COMPUTER.
      BIGNUM = 1.0E38
      BIGEXP = 87.0
C     THE VALUES FOR BIGNUM AND BIGEXP FOLLOW THE
C     DESCRIPTION UNDER EXP FUNCTION IN "IBM SYSTEM 360/
C     AND SYSTEM 370 FORTRAN IV LANGUAGE"
C     BIGNUM = 4.3E68
C     BIGEXP = 174.6
      KMAX=63
C*****NL IS THE NUMBER OF BOUNDARIES IN THE STANDARD MODELS 1 TO 6
C*****BOUNDARY 34 (AT 99999 KM) IS NO LONGER USED
      NL = 33
C*****CALL TIME AND DATE:
C*****THE USER MAY WISH TO INCLUDE SUBROUTINES FDATE AND FCLOCK WHICH
C*****RETURN THE DATE AND TIME IN MM/DD/YY AND HH.MM.SS FORMATS
C*****RESPECTIVELY. THE REQUIRED ROUTINES FOR A CDC 6600 ARE INCLUDED AT
C*****THE MAIN PROGRAM IN COMMENT CARDS.
C@    CALL FDATE(HDATE)
C@    CALL FCLOCK(HTIME)
C
C*****START CALCULATION
C
C
100   DO 10 II = 1,4
10    IREG(II) = 0
      WRITE(IPR,1000)
1000  FORMAT('1',20X,'***** LOWTRAN 7 *****')
C@    WRITE(IPR,1010) HDATE,HTIME
1010  FORMAT('1',20X,'***** LOWTRAN 7 *****',10X,2(1X,A8,1X))
      DO 80 I=1,4
      DO 80 J=1,40
      ABSC(I,J)=0.
      EXTC(I,J)=0.
 80   ASYM(I,J)=0.
      JPRT = 0
      IKLO=1
C
C*****CARD 1
C
      READ(IRD,1110)MODEL,ITYPE,IEMSCT,IMULT,M1,M2,M3,
     1 M4,M5,M6,MDEF,IM,NOPRT,TBOUND,SALB
1110  FORMAT(13I5,F8.3,F7.2)
      WRITE(IPR,1111)MODEL,ITYPE,IEMSCT,IMULT,M1,M2,M3,
     1 M4,M5,M6,MDEF,IM,NOPRT,TBOUND,SALB
1111  FORMAT('0 CARD 1  *****',13I5,F8.3,F7.2)
      IF(IMULT .EQ. 1 .AND. NOPRT.EQ. 1) NOPRT = 0
C
      IRD1 = 0
      IRD2 = 0
      IF (MODEL.EQ.0) LEN = 0
      IF((MODEL.EQ.0) .OR. (MODEL.EQ.7)) GO TO 110
      IF(M1.EQ.0) M1=MODEL
      IF(M2.EQ.0) M2=MODEL
      IF(M3.EQ.0) M3=MODEL
      IF(M4.EQ.0) M4=MODEL
      IF(M5.EQ.0) M5=MODEL
      IF(M6.EQ.0) M6=MODEL
      IF(MDEF.EQ.0) MDEF=1
110   CONTINUE
      M=MODEL
      NPR = NOPRT
C*****CARD 2 AEROSOL MODEL
      READ(IRD,1200)IHAZE,ISEASN,IVULCN,ICSTL,ICLD,IVSA,VIS,WSS,WHH,
     X RAINRT,GNDALT
1200  FORMAT(6I5,5F10.3)
      WRITE(IPR,1201)IHAZE,ISEASN,IVULCN,ICSTL,ICLD,IVSA,VIS,WSS,WHH,
     X RAINRT,GNDALT
      IF(GNDALT.GT.0.) WRITE(IPR,1199)GNDALT
1199  FORMAT(1H0,'  GNDALT =',F10.2)
      IF(GNDALT.GE.6.0) THEN
            WRITE(IPR,1202)GNDALT
            GNDALT=0.
      ENDIF
1201  FORMAT('0 CARD 2  *****',6I5,5F10.3)
1202  FORMAT('0 GNDALT GT 6.0 RESET TO ZERO, GNDALT WAS',F10.3)
C
      IF(VIS.LE.0.0.AND.IHAZE.GT.0) VIS=VSB(IHAZE)
      RHH= 0.
      IF(MODEL.EQ.0.OR.MODEL.EQ.7) GO TO 205
      IF((MODEL.EQ.3.OR.MODEL.EQ.5).AND.ISEASN.EQ.0) ISEASN=2
C
      IF(IVSA.EQ.1)  THEN
        IF(IHAZE.EQ.3)CALL MARINE(VIS,MODEL,WSS,WHH,ICSTL,EXTC,ABSC,1)
      ENDIF
      ICH(1)=IHAZE
      ICH(2)=6
      ICH(3)=9+IVULCN
205   IF(RAINRT.EQ.0) GO TO 210
      WRITE(IPR,1205) RAINRT
1205  FORMAT('0 RAIN MODEL CALLED, RAIN RATE = ',F9.2,' MM/HR')
 210  ICH(4)=18
      IF(ICH(1).LE.0)ICH(1)=1
      IF(ICH(3).LE.9)ICH(3)=10
      IF(ICLD.GE.1 .AND. ICLD.LE.11) THEN
            ICH(4)=ICH(3)
            ICH(3)=ICH(2)
            ICH(2)=ICLD
      END IF
      IFLGA=0
      IFLGT=0
      CTHIK=-99.
      CALT=-99.
      CEXT=-99.
      ISEED=-99
      IF(ICLD .LT. 18) GO TO 230
C*****CARD 2A CIRRUS CLOUDS
      READ(IRD,1210)CTHIK,CALT,CEXT,ISEED
1210  FORMAT(3F10.3,I10)
      WRITE(IPR,1211)CTHIK,CALT,CEXT,ISEED
1211  FORMAT('0 CARD 2A *****',3F10.3,I10)
230   CONTINUE
C*****CARD 2B VERTICAL STRUCTURE ALGORITHM
      ZCVSA=-99.
      ZTVSA=-99.
      ZINVSA=-99.
C
      IF( IVSA. EQ. 0 ) GO TO 240
      READ (IRD,1230) ZCVSA,ZTVSA,ZINVSA
1230  FORMAT(3F10.3)
      WRITE(IPR,1231)ZCVSA,ZTVSA,ZINVSA
1231  FORMAT('0 CARD 2B *****',3F10.3)
C
      CALL VSA(IHAZE,VIS,ZCVSA,ZTVSA,ZINVSA,ZVSA,RHVSA,AHVSA,IHVSA)
C
C     END OF VSA MODEL SET-UP
C
240   IF (MODEL.NE.0 .AND. MODEL.NE.7 ) ML=NL
      MDELS=MODEL
      DO I=1,5
        IF(MDELS.NE.0)HMODEL(I,7)=HMODEL(I,MDELS)
        IF(MDELS.EQ.0)HMODEL(I,7)=HMODEL(I,8)
      End Do
C
C
      IF(IM .EQ. 1) THEN
           IF((MODEL.EQ.7.AND.IM.EQ.1) .OR.(MODEL.EQ.0)) THEN
C
C*****CARD 2C  USER SUPPLIED ATMOSPHERIC PROFILE
C
              READ (IRD,1250) ML,IRD1,IRD2,(HMODEL(I,7),I=1,5)
1250          FORMAT(3I5,18A4)
              WRITE(IPR,1251)ML,IRD1,IRD2,(HMODEL(I,7),I=1,5)
              IF(IVSA.EQ.1)CALL RDNSM
1251          FORMAT('0 CARD 2C *****',3I5,18A4)
           ENDIF
      ENDIF
      M=7
      CALL AERNSM(JPRT,  GNDALT)
      IF(ICLD .LT. 20) GO TO 260
C
C     SET UP CIRRUS MODEL
C
      IF(CTHIK.NE.0) IFLGT=1
      IF(CALT.NE.0)  IFLGA=1
      IF(ISEED.EQ.0) IFLGT=2
      IF(ISEED.EQ.0) IFLGA=2
      CALL CIRRUS(CTHIK,CALT,ISEED,CPROB,CEXT)
      WRITE(IPR,1220)
1220  FORMAT(15X,'CIRRUS ATTENUATION INCLUDED (N O A A CIRRUS) ')
      IF(IFLGT.EQ.0) WRITE(IPR,1221) CTHIK
1221  FORMAT(15X,'CIRRUS ATTENUTION STATISTICALLY DETERMENED TO BE',
     X F10.3,'KM')
      IF(IFLGT.EQ.1) WRITE(IPR,1222) CTHIK
1222  FORMAT(15X,'CIRRUS THICKNESS USER DETERMINED TO BE',F10.3,'KM')
      IF(IFLGT.EQ.2) WRITE(IPR,1223) CTHIK
1223  FORMAT(15X,'CIRRUS THICKNESS DEFAULTED TO MEAN VALUE OF    ',
     X F10.3,'KM')
      IF(IFLGA.EQ.0) WRITE(IPR,1224)CALT
1224  FORMAT(15X,'CIRRUS BASE ALTITUDE STATISCALLY DETERMINED TO BE',
     X F10.3,' KM')
      IF(IFLGA.EQ.1) WRITE(IPR,1225) CALT
1225  FORMAT(15X,'CIRRUS BASE ALTITUDE USER DETERMINED TO BE',
     X F10.3,' KM')
      IF(IFLGA.EQ.2) WRITE(IPR,1226) CALT
1226  FORMAT(15X,'CIRRUS BASE ALTITUDE DEFAULTED TO MEAN VALUE OF',
     X F10.3,'KM')
      WRITE(IPR,1227)CPROB
1227  FORMAT(15X,'PROBABILTY OF CLOUD OCCURRING IS',F7.1,
     X ' PERCENT')
C
C       END OF CIRRUS MODEL SET UP
C
C
260   CONTINUE
C
C
C*****CARD 2E
C
      IF((IHAZE.EQ.7).OR.(ICLD.EQ.11)) THEN
C
C*****CARD 2E USER SUPPLIED AEROSOL EXTINCTION,ABSORPTION,AND ASYMMETRY
           CALL RDEXA
C
      ENDIF
300   CONTINUE
C
C
      IPARM =-99
      IPH   =-99
      IDAY  =-99
      ISOURC=-99
C
      PARM1 =-99.
      PARM2 =-99.
      PARM3 =-99.
      PARM4 =-99.
      TIME  =-99.
      PSIPO =-99.
      ANGLEM=-99.
      G     =-99.
C
C*****CARD 3 GEOMETERY PARAMETERS
C
      IF(IEMSCT.EQ.3) GO TO 315
      READ(IRD,1312)H1,H2,ANGLE,RANGE,BETA,RO,LEN
1312  FORMAT(6F10.3,I5)
      WRITE(IPR,1313)H1,H2,ANGLE,RANGE,BETA,RO,LEN
1313  FORMAT('0 CARD 3  *****',6F10.3,I5)
      GO TO 320
C*****CARD 3 FOR DIRECTLY TRANSMITTED SOLAR RADIANCE (IEMSCT = 3)
  315 CONTINUE
      READ(IRD,1316) H1,H2,ANGLE,IDAY,RO,ISOURC,ANGLEM
 1316 FORMAT(3F10.3,I5,5X,F10.3,I5,F10.3)
      WRITE(IPR,1317) H1,H2,ANGLE,IDAY,RO,ISOURC,ANGLEM
 1317 FORMAT('0 CARD 3   *****',3F10.3,I5,5X,F10.3,I5,F10.3)
      ITYPE = 3
      RANGE = 0.0
      BETA = 0.0
      LEN = 0
C*****RO IS THE RADIUS OF THE EARTH
320   RE=6371.23
      IF(H1. LT. ZM(1) )THEN
         WRITE (IPR,905) H1,ZM(1)
905      FORMAT('  H1 LESS THAN FIRST ALT RESET ',/
     A    ' H1 WAS ',F10.2,' 1ST ALT = ',F10.2)
         H1 = ZM(1)
      ENDIF
      H1S    = H1
      H2S    = H2
      ANGLES = ANGLE
      RANGS  = RANGE
      BETAS  = BETA
      ITYPES =ITYPE
      LENS   = LEN
      IF (MODEL.EQ.0) RO = RE
      IF (MODEL.EQ.1) RE=6378.39
      IF (MODEL.EQ.4) RE=6356.91
      IF (MODEL.EQ.5) RE=6356.91
      IF (RO.GT.0.0) RE=RO
C
      IF (IEMSCT.NE.2) GO TO 330
C
C*****CARD 3A1
C
      READ(IRD,1320) IPARM,IPH,IDAY,ISOURC
1320  FORMAT(4I5)
      WRITE(IPR,1321) IPARM,IPH,IDAY,ISOURC
1321  FORMAT('0 CARD 3A1*****',4I5)
C
C*****CARD 3A2
C
      READ(IRD,1322)PARM1,PARM2,PARM3,PARM4,TIME,PSIPO,ANGLEM,G
1322  FORMAT(8F10.3)
      WRITE(IPR,1323)PARM1,PARM2,PARM3,PARM4,TIME,PSIPO,ANGLEM,G
1323  FORMAT('0 CARD 3A2*****',8F10.3)
C
      IF(IPH. EQ . 0) THEN
            IF(G. GE.  1.0) G =  .9999
            IF(G. LE. -1.0) G = -.9999                                  L
      ENDIF                                                             L
      IF (IPH.NE.1) GO TO 330
C
C*****CARD 3B1 USER DEFINED PHASE FUNCTION
C
C*****READ USER DEFINED PHASE FUNCTION
C
      READ(IRD,1326)NANGLS
1326  FORMAT(I5)
      WRITE(IPR,1327)NANGLS
1327  FORMAT(' CARD 3B1*****',I5)
C
C*****CARD 3B2
C
      READ(IRD,1328)(ANGF(I),F(1,I),F(2,I),F(3,I),F(4,I),I=1,NANGLS)
1328  FORMAT(5E10.3)
      WRITE(IPR,1329)(ANGF(I),F(1,I),F(2,I),F(3,I),F(4,I),I=1,NANGLS)
1329  FORMAT('0 CARD 3B2*****',5E10.3)
C
  330 CONTINUE
C
      IF (IRPT.EQ.3) GO TO 500
C
C*****CARD 4 WAVENUMBER
C
 400  CONTINUE
      READ(IRD,1400)V1,V2,DV
1400  FORMAT(3F10.3)
      WRITE (IPR,1401) V1,V2,DV
1401  FORMAT('0 CARD 4  *****',3F10.3)
      IF(IHAZE.EQ.3) THEN
          IF(V1.LT.250.0 .OR. V2.LT.250.0) THEN
               IHAZE=4
               WRITE (IPR,1203)
            ENDIF
1203     FORMAT('0**WARNING** NAVY MODEL IS NOT USEABLE BELOW 250CM-1'/
     1   10X,' PROGRAM WILL SWITCH TO IHAZE=4 LOWTRAN 5 MARITIME'//)
      END IF
      IF (IRPT.EQ.4) GO TO 560
500   CONTINUE
      IF (IRPT.EQ.3) GO TO 555
      WRITE(IPR,1410) (HTRRAD(I1,IEMSCT+1),I1=1,6)
1410  FORMAT('0 PROGRAM WILL COMPUTE ',6A4)
      IF(ISOURC .EQ. 1) WRITE(IPR,1204)
1204  FORMAT('   LUNAR SOURCE ONLY  ')
      IF (IMULT .EQ. 1) THEN
           IF(IEMSCT.EQ.0 .OR. IEMSCT.EQ.3 ) THEN
                WRITE(IPR,1411)
1411            FORMAT('0 MULTIPLE SCATTERING HAS BEEN TURNED OFF ')
                IMULT=0
           ELSE
                WRITE(IPR,1412)
1412  FORMAT('0 CALCULATIONS WILL BE DONE USING MULTIPLE SCATTERING ')
           END IF
      END IF
      MDEL=MODEL
      IF(MDEL.EQ.0)MDEL=8
      MM1=MDEL
      MM2=MDEL
      MM3=MDEL
      IF(M1.NE.0)MM1=M1
      IF(M2.NE.0)MM2=M2
      IF(M3.NE.0)MM3=M3
      IF(MODEL.EQ.0) GO TO 510
      WRITE(IPR,1500) MM1,(HMODEL(I1,MM1),I1=1,5),MM2,(HMODEL(I2,MM2),
     X I2=1,5),MM3,(HMODEL(I3,MM3),I3=1,5)
1500  FORMAT('0 ATMOSPHERIC MODEL',/,
     X 10X,'TEMPERATURE = ',I4,5X,5A4,/,
     X 10X,'WATER VAPOR = ',I4,5X,5A4,/,
     X 10X,'OZONE       = ',I4,5X,5A4)
       WRITE(IPR,1501) M4,M5,M6,MDEF
1501   FORMAT(20X,'  M4 = ',I5,' M5 = ',I5,' M6 = ',I5,' MDEF = ' ,I5)
C
510   IF(JPRT.EQ.0) GO TO 520
      IF(ISEASN.EQ.0)ISEASN=1
      IF(IVULCN.LE.0) IVULCN=1
      IHVUL=IVULCN+10
      IF( IVULCN .EQ. 6) IHVUL = 11
      IF( IVULCN .EQ. 7) IHVUL = 11
      IF( IVULCN .EQ. 8) IHVUL = 13
      IHMET=1
      IF(IVULCN.GT.1)IHMET=2
      IF(IHAZE.EQ.0) GO TO 520
      WRITE(IPR,1510)(HHAZE(I,IHAZE),I=1,5),VIS,(HHAZE(I2,6),I2=1,5),
     X (HHAZE(II,6),II=1,5),(HSEASN(IA,ISEASN),IA=1,5),
     X (HHAZE(I3,IHVUL),I3=1,5),
     X (HVULCN(IB,IVULCN),IB=1,5),(HSEASN(IC,ISEASN),IC=1,5),
     X (HHAZE(I4,16),I4=1,5),(HMET(I5,IHMET),I5=1,5)
1510  FORMAT('0 AEROSOL MODEL',/,10X,'REGIME',
     A T35,'AEROSOL TYPE',T60,'PROFILE',T85,'SEASON',/,/,
     B 10X,'BOUNDARY LAYER (0-2 KM)',T35,5A4,T60,F5.1,
     C ' KM VIS AT SEA LEVEL',/,10X,'TROPOSPHERE  (2-10KM)',T35,
     D 5A4,T60,5A4,T85,5A4,/,10X,'STRATOSPHERE (10-30KM)',
     E T35,5A4,T60,5A4,T85,5A4,/,10X,'UPPER ATMOS (30-100KM)',
     F T35,5A4,T60,5A4)
520   CONTINUE
      IF(ITYPE.EQ.1) WRITE(IPR,1515) H1,RANGE
1515  FORMAT('0 HORIZONTAL PATH',/,10X,'ALTITUDE = ',F10.3,' KM',/,
     1    10X,'RANGE    = ',F10.3,' KM')
      IF(ITYPE.EQ.2) WRITE(IPR,1516) H1,H2,ANGLE,RANGE,BETA,LEN
1516  FORMAT('0 SLANT PATH, H1 TO H2',/,
     1    10X,'H1    = ',F10.3,' KM',/,10X,'H2    = ',F10.3,' KM',/,
     2    10X,'ANGLE = ',F10.3,' DEG',/,10X,'RANGE = ',F10.3,' KM',/,
     3    10X,'BETA  = ',F10.3,' DEG',/,10X,'LEN   = ',I6)
      IF(ITYPE.EQ.3) WRITE(IPR,1517) H1,H2,ANGLE
1517  FORMAT('0 SLANT PATH TO SPACE',/,
     1    10X, 'H1    = ',F10.3,' KM',/,10X,'HMIN  = ',F10.3,' KM',/,
     2    10X,'ANGLE = ',F10.3,' DEG')
      IF (IEMSCT.NE.2) GO TO 550
C
C*****INTREPRET SOLAR SCATTERING PARAMETERS
C
C
      IF (IPARM.EQ.1) CALL SUBSOL (PARM3,PARM4,TIME,IDAY)
C
      WRITE (IPR,1530)
1530  FORMAT('0 SINGLE SCATTERING CONTROL PARAMETERS SUMMARY '/)
      IF(IPARM.NE.2) WRITE (IPR,1532) PARM1,PARM2,PARM3,PARM4,TIME,PSIPO
     1,IDAY
1532  FORMAT(10X,'OBSERVER LATITUDE =',T35,F10.2,' DEG NORTH OF EQUATOR'
     X,/,10X,'OBSERVER LONGITUDE=',T35,F10.2,' DEG WEST OF GREENWICH',/,
     X 10X,'SUBSOLAR LATITUDE =',T35,F10.2,' NORTH OF EQUATOR',/,
     X 10X,'SUBSOLAR LONGITUDE =',T35,F10.2,' WEST OF GREENWICH',/,
     X 10X,'TIME (<0 IS UNDEF)=',T35,F10.3,' GREENWICH TIME',/,
     X 10X,'PATH AZIMUTH =',T35,F10.3,' DEG EAST OF NORTH',/,
     X 10X,'DAY OF YEAR =',T35,I10)
      IF (IPARM.EQ.2) WRITE (IPR,1534)PARM1,PARM2,TIME,PSIPO,IDAY
1534  FORMAT(10X,'RELATIVE AZIMUTH =',T35,F10.3,' DEG EAST OF NORTH',/,
     X 10X,'SOLAR ZENITH =',T35,F10.3,' DEG ',/,
     X 10X,'TIME (<0 UNDEF) =',T35,F10.3,' GREENWICH TIME',/,
     X 10X,'PATH AZIMUTH =',T35,F10.3,' DEG EAST OF NORTH',/,
     X 10X,'DAY OF THE YEAR =',T35,I6)
      IF (ISOURC.EQ.0) WRITE (IPR,1535)
1535  FORMAT('0 EXTRATERRESTIAL SOURCE IS THE SUN')
      IF (ISOURC.EQ.1) WRITE (IPR,1536) ANGLEM
1536  FORMAT('0 EXTRATERRESTIAL SOURCE IS THE MOON, MOON PHASE ANGLE =',
     X F10.2,' DEG')
      IF (IPH.EQ.0) WRITE (IPR,1538) G
1538  FORMAT('O H-G PHASE FUNCTION ,G=',F10.3)
      IF (IPH.EQ.1) WRITE (IPR,1540)
1540  FORMAT('0 USER SUPPLIED PHASE FUNCTION')
      IF (IPH.EQ.2) WRITE (IPR,1542)
1542  FORMAT('0 PHASE FUNCTION FROM MIE DATA BASE')
550   CONTINUE
      V1 =FLOAT(INT(V1/5.0+0.1))*5.0
      V2 =FLOAT(INT(V2/5.0+0.1))*5.0
C     TO AVOID THE DIFFICULTY FOR V1=0
      ALAM1= 99999.98
      IF(V1.GT.0.)ALAM1=10000./V1
      ALAM2=10000./V2
      IF(DV.LT.5.)DV=5.
      DV=FLOAT(INT(DV/5+0.1))*5.0
      WRITE (IPR,1555) V1,ALAM1,V2,ALAM2,DV
1555  FORMAT('0 FREQUENCY RANGE '/,10X,' V1 = ',F12.1,' CM-1  (',
     X F10.2,' MICROMETERS)',/,10X,' V2 = ',F12.1,' CM-1  (',F10.2,
     X ' MICROMETERS)',/10X,' DV = ',F12.1,' CM-1')
C
C
C*****LOAD ATMOSPHERIC PROFILE INTO /MODEL/
C
      CALL STDMDL
C
C    DEFINE COUNTER ITEST TO PREVENT ZENITH ANGLE QTHETA AND LAYER
C    PATH LENGTH PL FROM BEING CHANGED DURING SOLAR CALCULATIONS
555   DO 15 I=1,68
      DO 14 J=1,KMAX
      WPATH(I,J)=0.0
      WPATHS(I,J)=0.0
 14   CONTINUE
 15   CONTINUE
C
      ITEST=0
C
      IF (IMULT .EQ. 1) THEN
           H1=ZM(1)
           H2=ZM(ML)
           ITYPE = 2
           ANGLE = 0.
           BETA = 0.
           RANGE =0.
           ISSGS = ISSGEO
           ISSGEO = 0
           CALL GEO (IERROR,BENDNG,MAXGEO)
           W15SV = W(15)
C
C      W15SV  IS THE REL HUM FROM 0 TO SPACE
C      THIS REL HUM MAY BE DIFFERENT THAN THE PATH  REL HUM
C      WHEN REL HUM ARE DIFFERENT THE ANSWER CAN CHANGE
C
           ISSGEO = ISSGS
           IMSMX=IKMAX
           DO 35 N=1,IMSMX
           TBBMS(N)=TBBY(N)
           PLST(N)=PL   (N)
           DO 35 K=1,KMAX
 35        WPMS(N,K)=WPATH(N,K)
C
           IF(IEMSCT.EQ.2)  THEN
                 CALL SSGEO(IERROR,IPH,IPARM,PARM1,PARM2,
     X           PARM3,PARM4,PSIPO,G,MAXGEO)
                DO 30 N=1,IKMAX
                CSENSV(N) = ABS(CSZEN(N))
                IF(CSENSV(N) .LT. 0.0174) CSENSV(N) = 0.0174
30              CONTINUE
                DO 45 N=1,ML
                DO 45 K=1,KMAX
                WPMSS(N,K)=WPATHS(N,K)
45              CONTINUE
          ENDIF
      ENDIF
      H1     = H1S
      H2     = H2S
      ANGLE  = ANGLES
      RANGE  = RANGS
      BETA   = BETAS
      ITYPE  = ITYPES
      LEN    = LENS
C*****TRACE PATH THROUGH THE ATMOSPHERE AND CALCULATE ABSORBER AMOUNTS
C
      ISSGEO=0
C     RANGE=RN0
      CALL GEO (IERROR,BENDNG,MAXGEO)
      CALL AERTMP
      IF(IMULT. NE. 1) W15SV = W(15)
C
C   SAVE TEMPERATURE AND PATH INFO FOR LATER USE
C
      IF(IMULT .EQ. 1)  THEN
1900       FORMAT(//,'    HIGHT  ANGLE ')
           DO 25 N=1    ,IKMAX
           TBBSS(N)=TBBY(N)
           QTHETS(N) = QTHETA(N)
1910       FORMAT(F10.3,F12.3)
25         CONTINUE
      ENDIF
C
      IF(IERROR.GT.0) GO TO 630
      IF(IEMSCT.EQ.3 .AND. IERROR.EQ. -5) GO TO 557
      GO TO 558
  557 CONTINUE
      WRITE(IPR,1557)
 1557 FORMAT('0 DIRECT PATH TO SUN INTERSECTS THE EARTH: SKIP TO ',
     1    'NEXT CASE')
      GO TO 630
  558 CONTINUE
C
      IF(IEMSCT.EQ.2)
     X CALL SSGEO(IERROR,IPH,IPARM,PARM1,PARM2,PARM3,PARM4,PSIPO,G,
     X MAXGEO)
      W(15) = W15SV
C
C     W15SV IS THE REL HUM  (FOR MULT SCAT THIS MAY BE DIFFERENT
C     FROM PATH REL HUM)
C
C
C      THE SECOND CALL TO SSGEO IS TO GET THE CORRECT ANGLES FOR
C      PHASE FUNCTIONS
C
C
C    SAVE SOLAR PATH INFORMATION
C
      IF(IERROR.GT.0) GO TO 630
C
      IF(IMULT.EQ.1) THEN
           DO 60 IK = 1,IMSMX
           QTHETA(IK) = QTHETS(IK)
           PL(IK)=PLST(IK)
           IF(IEMSCT.EQ.2) CSZEN(IK)=CSENSV(IK)
60         CONTINUE
      ENDIF
C
C
C*****LOAD AEROSOL EXTINCTION, ABSORPTION, AND ASYMMETRY COEFFICIENTS
C
      CALL EXABIN
C
C*****WRITE HEADER DATA TO TAPE 7
C
560   WRITE(IPU,1110)MODEL,ITYPE,IEMSCT,IMULT,M1,M2,M3,
     1 M4,M5,M6,MDEF,IM,NOPRT,TBOUND,SALB
      WRITE(IPR1,1110)MODEL,ITYPE,IEMSCT,IMULT,M1,M2,M3,
     1 M4,M5,M6,MDEF,IM,NOPRT,TBOUND,SALB
      WRITE(IPU,1200)IHAZE,ISEASN,IVULCN,ICSTL,ICLD,IVSA,VIS,WSS,WHH,
     X RAINRT,GNDALT
      WRITE(IPR1,1200)IHAZE,ISEASN,IVULCN,ICSTL,ICLD,IVSA,VIS,WSS,WHH,
     X RAINRT,GNDALT
      WRITE(IPU,1210) CTHIK,CALT,CEXT,ISEED
      WRITE(IPR1,1210) CTHIK,CALT,CEXT,ISEED
      WRITE(IPU,1230)ZCVSA,ZTVSA,ZINVSA
      WRITE(IPR1,1230)ZCVSA,ZTVSA,ZINVSA
      WRITE(IPU,1255) ML,(HMODEL(I,7),I=1,5)
      WRITE(IPR1,1255) ML,(HMODEL(I,7),I=1,5)
1255  FORMAT( I5,18A4)
      IF(MODEL.NE.0)WRITE (IPU,1312) H1,H2,ANGLE,RANGE,BETA,RO,LEN
      IF(MODEL.NE.0)WRITE (IPR1,1312) H1,H2,ANGLE,RANGE,BETA,RO,LEN
      HMDLZ(8) = RANGE
      IF(MODEL.EQ.0) WRITE(IPU,1560)(HMDLZ(K),K=1,8)
      IF(MODEL.EQ.0) WRITE(IPR1,1560)(HMDLZ(K),K=1,8)
1560  FORMAT(3F10.3,5E10.3)
      WRITE(IPU,1320)  IPARM,IPH,IDAY,ISOURC
      WRITE(IPR1,1320) IPARM,IPH,IDAY,ISOURC
      WRITE(IPU,1322) PARM1,PARM2,PARM3,PARM4,TIME,PSIPO,ANGLEM,G
      WRITE(IPR1,1322)PARM1,PARM2,PARM3,PARM4,TIME,PSIPO,ANGLEM,G
      WRITE(IPU,1400) V1,V2,DV
      WRITE(IPR1,1400)V1,V2,DV
      READ(IRD,1600) IRPT
1600  FORMAT(I5)
      WRITE(IPU,1600) IRPT
      WRITE(IPR1,1600)IRPT
C
      IRAIN=0
      IF(RAINRT.GT.0) IRAIN=1
C
CCC
CCC    CALCULATE EQUIVALENT LIQUID WATER CONSTANTS
CCC
      CALL EQULWC
C
      CALL TRANS (IPH,ISOURC,IDAY,ANGLEM)
C
C*****WRITE END OF FILE ON TAPE 7
630   IF(IERROR .GT. 0) THEN
           READ(IRD,1600) IRPT
           WRITE(IPU,1600) IRPT
           WRITE(IPR1,1600)IRPT
      ENDIF
      WRITE(IPU,1620)
      WRITE(IPR1,1620)
1620  FORMAT(' -9999.')
C
      WRITE(IPR,1630)IRPT
1630  FORMAT('0 CARD 5 *****',I5)
      IF (IRPT.EQ.0) GO TO 900
      IF (IRPT.EQ.4) GO TO 400
      IF (IRPT.GT.1 .AND. IEMSCT.GE.2) THEN
          PRINT*,'/!! ERROR IN INPUT IEMSCT GE 2 IRPT GT 1!'
          STOP
      ENDIF
      IF (IRPT.GT.4) GO TO 900
      GO TO (100,900,300,400), IRPT
  900 STOP
C@    END
C@    THE FOLLOWING TIME AND DATE SUBROUTINES APPLY TO A CDC 6600
C@    SUBROUTINE FDATE(HDATE)
C@    CALL DATE(GDATE)
C@    HDATE=SHIFT(GDATE,6)
C@    RETURN
C@    END
C@    SUBROUTINE FCLOCK(HTIME)
C@    CALL CLOCK(GTIME)
C@    HTIME=SHIFT(GTIME,6)
C@    RETURN
      END Program LWTRN7

      SUBROUTINE AERNSM(JPRT,  GNDALT)
C**********************************************************************
C     DEFINES ALTITUDE DEPENDENT VARIABLES Z,P,T,WH,WO AND HAZE
C     CLD RAIN  CLDTYPE
C     IT ALSO DEFINES ALTITUDE DEPENDENT VARIABLES WAIR,WCO2,WCO,
C     WCH4,WN2O,WO2,WNH3,WNO,WNO2, AND WSO2
C     LOADS HAZE INTO APPROPRATE LOCATION
C**********************************************************************
      COMMON RELHUM(34),WHNO3(34),ICH(4),VH(17),TX(63),W(63)
      COMMON             WPATH(68, 63),TBBY(68)
      COMMON ABSC(5,47),EXTC(5,47),ASYM(5,47),VX2(47),AWCCON(5)
      COMMON /IFIL/IRD,IPR,IPU,NPR,IPR1
      COMMON /CARD1/ MODEL,ITYPE,IEMSCT,M1,M2,M3,IM,NOPRNT,TBOUND,SALB
      COMMON /CARD1A/ M4,M5,M6,MDEF,IRD1,IRD2
      COMMON /CARD1B/ JUNIT(15),WMOL(12),WAIR1,JLOW
      COMMON /CARD2/ IHAZE,ISEASN,IVULCN,ICSTL,ICLD,IVSA,VIS,WSS,WHH,
     1    RAINRT
      COMMON /CARD2A/ CTHIK,CALT,CEXT
      COMMON /CARD2D/ IREG(4),ALTB(4),IREGC(4)
      COMMON /CARD3/ H1,H2,ANGLE,RANGE,BETA,RE,LEN
      COMMON /CARD4/ V1,V2,DV
      COMMON /CNTRL/ KMAX,M,IKMAX,NL,ML,IKLO,ISSGEO,IMULT
      COMMON /MART/ RHH
      COMMON /MDATA/  Z(50),P(50),T(50),WH(50),WCO2(50),WO(50),
     X WN2O(50),WCO(50),WCH4(50),WO2(50),
     X CLD(50,7),RR(50,7)
      COMMON /MDATA1/ WNO(50),WSO2(50),WNO2(50),WNH3(50),WAIR(50)
      COMMON /TRAC/ ANO(50),ASO2(50),ANO2(50),ANH3(50),ANO3(50),OH(50),
     X HF(50),HCL(50),HBR(50),HI(50),CLO(50),OCS(50),H2CO(50),
     X HOCL(50),AN2(50),HCN(50),CH3CL(50),H2O2(50),C2H2(50),
     X C2H6(50),PH3(50)
      COMMON/MODEL/ ZMDL(34),PM(34),TM(34),RFNDX(34),DENSTY(63,34),
     1 CLDAMT(34),RRAMT(34),EQLWC(34),HAZEC(34)
      COMMON /ZVSALY/ ZVSA(10),RHVSA(10),AHVSA(10),IHVSA(10)
      COMMON /MDLZ/HMDLZ(8)
      CHARACTER*4  HZ         ,SEASN     ,VULCN     ,BLANK,
     X            HMET        ,HMODEL     ,HTRRAD
      COMMON /TITL/ HZ(5,16),SEASN(5,2),VULCN(5,8),BLANK,
     X HMET(5,2),HMODEL(5,8),HTRRAD(6,4)
      COMMON /VSBD/ VSB(10)
      CHARACTER*4  AHOL1,AHOL2   ,AHOL3   ,          AHLVSA   ,AHUS
      DIMENSION AHOL1(5),AHOL2(5),AHOL3(5),          AHLVSA(5),AHUS(5)
      DIMENSION  ITY1(34),IH1(34),IS1(34),IVL1(34),ZGN(34)
      CHARACTER*4  AHAHOL   ,HHOL
      DIMENSION AHAHOL(5,13),HHOL(5)
      DIMENSION AMWT(35),CLDTOP(10),AHAST(34)
      CHARACTER*1 JCHAR,BL
      DIMENSION  JCHAR(15)
      DATA AHLVSA/'VSA ','DEFI','NED ','    ','    '/
      DATA  AHUS /'USER',' DEF','INED','    ','    '/
      DATA AHAHOL/
     1 'CUMU','LUS ','    ','    ','    ',
     2 'ALTO','STRA','TUS ','    ','    ',
     3 'STRA','TUS ','    ','    ','    ',
     4 'STRA','TUS ','STRA','TO C','UM  ',
     5 'NIMB','OSTR','ATUS','    ','    ',
     6 'DRIZ','ZLE ','2.0 ','MM/H','R   ',
     7 'LT R','AIN ','5.0 ','MM/H','R   ',
     8 'MOD ','RAIN',' 12.','5 MM','/HR ',
     9 'HEAV','Y RA','IN 2','5 MM','/HR ',
     A 'EXTR','EME ','RAIN',' 75M','M/HR',
     B 'USER',' ATM','OSPH','ERE ','    ',
     C 'USER',' RAI','N NO',' CLO','UD  ',
     D 'CIRR','US C','LOUD','    ','    ' /
      DATA AVOGAD/6.022045E+23/,ALOSMT/2.68675E+19/,
     1    GASCON/8.31441E+7/,PLANK/6.626176E-27/,BOLTZ/1.380662E-16/,
     2    CLIGHT/2.99792458E10/
      DATA AIRMWT/28.964/,AMWT/18.015,44.010,47.998,44.01,28.011,
     1    16.043,31.999,30.01,64.06,46.01,17.03,63.01,17.00,20.01,
     2    36.46,80.92,127.91,51.45,60.08,30.03,52.46,28.014,
     3    27.03, 50.49, 34.01, 26.03, 30.07, 34.00, 7*0./
      DATA CLDTOP / 3.,3.,1.,2.,.66,1.,.66,.66,3.,3./
C
C     F(A) IS SATURATED WATER WAPOR DENSITY AT TEMP T,A=TZERO/T
C
      F(A)=EXP(18.9766-14.9595*A-2.43882*A*A)*A
C
C
C     ZMDL COMMON /MODEL/ FINAL ALTITUDE FOR LOWTRAN
C     Z   COMMON  /MDATA/ ALTITUDE OF THE PRESSURES,TEMP IN MDATA
C     ZK  ALTITUDE FOR CLOUD
C     ZSC ALTITUDE FOR AEROSOLS  GNDALT
C
C
      IREGC(1) = 0
      IREGC(2) = 0
      IREGC(3) = 0
      IREGC(4) = 0
      ICONV =1
      IRD0 = 1
      ICLDL = ICLD
      IF((MODEL .EQ. 0.) . OR. (MODEL .EQ. 7)) THEN
            IF(IM. NE. 1) RETURN
      ENDIF
      IF((MODEL .GT. 0.) .AND. (MODEL .LT. 7)) IRD0 = 0
      IF((IRD0  .EQ. 1)  .AND. (IVSA.EQ.1)   ) THEN
           IRD0 = 0
           IRD1 = 0
           IRD2 = 0
           ICONV =0
           ML = ML + 10 - JLOW
           IF(ML.GT.34)WRITE(IPR,910)
           IF(ML.GT.34)ML=34
           ZVSA(10)=ZVSA(9)+0.01
           RHVSA(10)=0.
           AHVSA(10)=0.
           IHVSA(10)=0
           IF(MODEL.EQ.0)WRITE (IPR,900)
900   FORMAT('   ERROR MODEL EQ 0 AND ARMY MODEL CANNOT MIX')
           IF(MODEL.EQ.0)STOP
910   FORMAT('  ERROR ML GT 24 AND ARMY MODEL TOP LAYER TRUNCATED')
      ENDIF
      ICL=0
      IDSR=0
      IF(ICLD .EQ. 18 .OR. ICLD. EQ. 19)  THEN
           CALL CIRR18
           CLDD =  0.1 * CTHIK
           CLD0 = CALT - 0.5*CLDD
           IF(CLD0 .LE. 0.) CLD0 = 0.
           CLD1 = CLD0 + CLDD
           CLD2 = CLD1 + CTHIK - CLDD
C          CLD3 = CLD2 + CLDD
C
C          CLD1 1ST Z OF CIRRUS
C          CLD2 LST Z OF CIRRUS
C
      ENDIF
      CALL FLAYZ(ML,MODEL,ICLD,ZMDL,GNDALT,IVSA)
      JPRT=1
      IF(MODEL.EQ.0  .OR. MODEL.EQ.7) JPRT=0
      IF(IVSA.EQ.1) JPRT=0
      IF(ICLD.GE.1 .AND.ICLD.LT.20) JPRT=0
      IF(RAINRT.GT.0.) JPRT=0
      IF(GNDALT.GT.0.) JPRT=0
C
      DO 5 I=1,ML
      HAZEC(I)=0.0
5     CONTINUE
      DO 6 II = 1,4
6     ALTB(II) = 0.
      T0=273.15
      IC1=1
      N=7
      IF(IVULCN.LE.0) IVULCN=1
      IF(ISEASN.LE.0) ISEASN=1
      IF(JPRT.EQ.0) THEN
                  WRITE(IPR,925) MODEL,ICLD
      IF(MODEL .EQ.7)WRITE(IPR,94)
94    FORMAT(/,10X,' MODEL 0 / 7 USER INPUT DATA ',//)
C
      ENDIF
C
C
      DO 100 K=1,ML
C
C    LOOP OVER LAYERS
C
      RH = 0.
      WH(K)  =0.
      WO(K)  =0.
C
      IHA1=0
      ICLD1=0
      ISEA1=0
      IVUL1=0
      VIS1=0.
      AHAZE=0.
      EQLWCZ=0.
      RRATZ=0.
      ICHR = 0
C     NEW
C
      WAIR(K) = 0
      WCO2(K) = 0
      WCO(K)  = 0
      WCH4(K) = 0
      WN2O(K) = 0
      WO2(K)  = 0
      WNH3(K) = 0
      WNO (K) = 0
      WNO2(K) = 0
      WSO2(K) = 0
      WHNO3(K)= 0
      DO 10 KM = 1,15
      JCHAR(KM) = ' '
      IF(KM. GT. 12) GO TO 10
      WMOL(KM) = 0.
10    CONTINUE
C
C
C        PARAMETERS - JCHAR = INPUT KEY (SEE BELOW)
C
C
C     ***  ROUTINE ALSO ACCEPTS VARIABLE UNITS ON PRESS AND TEMP
C
C          SEE INPUT KEY BELOW
C
C
C
C     FOR MOLECULAR SPECIES ONLY
C
C       JCHAR   JUNIT
C
C     " ",A      10    VOLUME MIXING RATIO (PPMV)
C         B      11    NUMBER DENSITY (CM-3)
C         C      12    MASS MIXING RATIO (GM(K)/KG(AIR))
C         D      13    MASS DENSITY (GM M-3)
C         E      14    PARTIAL PRESSURE (MB)
C         F      15    DEW POINT TEMP (TD IN T(K)) - H2O ONLY
C         G      16     "    "     "  (TD IN T(C)) - H2O ONLY
C         H      17    RELATIVE HUMIDITY (RH IN PERCENT) - H2O ONLY
C         I      18    AVAILABLE FOR USER DEFINITION
C        1-6    1-6    DEFAULT TO SPECIFIED MODEL ATMOSPHERE
C
C     ****************************************************************
C     ****************************************************************
C
C     ***** OTHER 'JCHAR' SPECIFICATIONS -
C
C       JCHAR   JUNIT
C
C      " ",A     10    PRESSURE IN (MB)
C          B     11       "     "  (ATM)
C          C     12       "     "  (TORR)
C         1-6   1-6    DEFAULT TO SPECIFIED MODEL ATMOSPHERE
C
C      " ",A     10    AMBIENT TEMPERATURE IN DEG(K)
C          B     11       "         "       "  " (C)
C          C     12       "         "       "  " (F)
C         1-6   1-6    DEFAULT TO SPECIFIED MODEL ATMOSPHERE
C
C     ***** DEFINITION OF "DEFAULT" CHOICES FOR PROFILE SELECTION *****
C
C      FOR THE USER WHO WISHES TO ENTER ONLY SELECTED ORIGINAL
C      VERTICAL PROFILES AND WANTS STANDARD ATMOSPHERE SPECIFICATIONS
C      FOR THE OTHERS, THE FOLLOWING OPTION IS AVAILABLE
C
C     *** JCHAR(P,T OR K) MUST = 1-6 (AS ABOVE)
C
C      FOR MOLECULES 8-35, ONLY US STD PROFILES ARE AVIALABLE
C      THEREFORE, WHEN  'JCHAR(K) = 1-5', JCHAR(K) WILL BE RESET TO 6
C
C
      IF(IRD0 .EQ. 1) THEN
          READ(IRD,80)ZMDL(K),P(K),T(K),WMOL(1),WMOL(2),WMOL(3),
     X     (JCHAR(KM),KM=1,14)
80         FORMAT ( F10.3,5E10.3,15A1)
          WRITE(IPR,81)ZMDL(K),P(K),T(K),WMOL(1),WMOL(2),WMOL(3),
     X     (JCHAR(KM),KM=1,14)
81         FORMAT ( F10.3,1P5E10.3,10X,15A1)
      ENDIF
      IF(IRD1 .EQ. 1) THEN
           READ(IRD,83)(WMOL(KM),KM=4,12)
83         FORMAT((8E10.3))
           WRITE(IPR,84)(WMOL(KM),KM=4,12)
84         FORMAT((1P8E10.3))
      ENDIF
C
C
C     AHAZE =  AEROSOL VISIBLE EXTINCTION COFF (KM-1)
C     AT A WAVELENGTH OF 0.55 MICROMETERS
C
C     EQLWCZ=LIQUID WATER CONTENT (PPMV) AT ALT Z
C            FOR AEROSOL, CLOUD OR FOG MODELS
C
C     RRATZ=RAIN RATE (MM/HR) AT ALT Z
C
C     IHA1 AEROSOL MODEL USED FOR SPECTRAL DEPENDENCE OF EXTINCTION
C
C     IVUL1 STRATOSPHERIC AERSOL MODEL USED FOR SPECTRAL DEPENDENCE
C     OF EXT AT Z
C
C     ICLD1 CLOUD MODEL USED FOR SPECTRAL DEPENDENCE OF EXT AT Z
C
C     ONLY ONE OF IHA1,ICLD1  OR IVUL1 IS ALLOWED
C     IHA1 NE 0 OTHERS IGNORED
C     IHA1 EQ 0 AND ICLD1 NE 0 USE ICLD1
C
C     IF AHAZE AND EQLWCZ ARE BOUTH ZERO
C        DEFAULT PROFILE ARE LOADED FROM IHA1,ICLD1,IVUL1
C     ISEA1 = AERSOL SEASON CONTROL FOR ALTITUDE Z
C
C     ICHR  CHANGE AERSOL PROFILE REGION FOR IHA1 = 7
C
      IF(IRD2 .EQ. 1) THEN
           READ(IRD,82)    AHAZE,EQLWCZ,RRATZ,IHA1,ICLD1,IVUL1,ISEA1,
     X ICHR
           WRITE(IPR,82)    AHAZE,EQLWCZ,RRATZ,IHA1,ICLD1,IVUL1,ISEA1,
     X ICHR
82         FORMAT(10X,3F10.3,5I5)
      ELSE
           RRATZ = RAINRT
           IF(ZMDL(K) . GT. 6.) RRATZ = 0
      ENDIF
      ICLDS = ICLD1
      IF( ICHR.EQ. 1) THEN
         IF(IHA1. EQ. 0) THEN
             IF(ICLD1. NE. 11) ICHR = 0
         ELSE
             IF(IHA1 . NE.  7) ICHR = 0
         ENDIF
      ENDIF
      IF(MODEL .EQ. 0) THEN
           HMDLZ(1) = ZMDL(K)
           HMDLZ(2) =    P(K)
           HMDLZ(3) =    T(K)
           HMDLZ(4) = WMOL(1)
           HMDLZ(5) = WMOL(2)
           HMDLZ(6) = WMOL(3)
           HMDLZ(7) = AHAZE
      ENDIF
      DO 12 KM = 1,15
12    JUNIT(KM) = JOU(JCHAR(KM))
      IF(IRD0 .EQ. 0) THEN
          JUNIT(1) = M1
          JUNIT(2) = M1
          JUNIT(3) = M2
          JUNIT(4) =  6
          JUNIT(5) = M3
          JUNIT(6) = M5
          JUNIT(7) = M6
          JUNIT(8) = M4
          JUNIT(9) =  6
          JUNIT(10)=  6
          JUNIT(11)=  6
          JUNIT(12)=  6
          JUNIT(13)=  6
          JUNIT(14)=  6
          JUNIT(15)=  6
      ELSE
          BL = ' '
          IF((M1   .GT.0).AND.(JCHAR(1).EQ.BL))
     X    JUNIT(1) = M1
          IF((M1   .GT.0).AND.(JCHAR(2).EQ.BL))
     X    JUNIT(2) = M1
          IF((M2   .GT.0).AND.(JCHAR(3).EQ.BL))
     X    JUNIT(3) = M2
          IF((MDEF .GT.0).AND.(JCHAR(4).EQ.BL))
     X    JUNIT(4) = 6
          IF((M3   .GT.0).AND.(JCHAR(5).EQ.BL))
     X    JUNIT(5) = M3
          IF((M5   .GT.0).AND.(JCHAR(6).EQ.BL))
     X    JUNIT(6) = M5
          IF((M6   .GT.0).AND.(JCHAR(7).EQ.BL))
     X    JUNIT(7) = M6
          IF((M4   .GT.0).AND.(JCHAR(8).EQ.BL))
     X    JUNIT(8) = M4
          IF((MDEF .GT.0).AND.(JCHAR(9).EQ.BL))
     X    JUNIT(9) = 6
          IF((MDEF .GT.0).AND.(JCHAR(10).EQ.BL))
     X    JUNIT(10)= 6
          IF((MDEF .GT.0).AND.(JCHAR(11).EQ.BL))
     X    JUNIT(11)= 6
          IF((MDEF .GT.0).AND.(JCHAR(12).EQ.BL))
     X    JUNIT(12)= 6
          IF((MDEF .GT.0).AND.(JCHAR(13).EQ.BL))
     X    JUNIT(13)= 6
          IF((MDEF .GT.0).AND.(JCHAR(14).EQ.BL))
     X    JUNIT(14)= 6
      ENDIF
      IF(ICONV .EQ. 1) THEN
           CALL CHECK(P(K),JUNIT(1),1)
           CALL CHECK(T(K),JUNIT(2),2)
           CALL DEFALT(ZMDL(K),P(K),T(K))
           CALL CONVRT (P(K),T(K) )
            WH(K)    = WMOL(1)
            WCO2(K)  = WMOL(2)
            WO(K)    = WMOL(3)
            WN2O(K)  = WMOL(4)
            WCO(K)   = WMOL(5)
            WCH4(K)  = WMOL(6)
            WO2(K)   = WMOL(7)
            WNO(K)   = WMOL(8)
            WSO2(K)  = WMOL(9)
            WNO2(K)  = WMOL(10)
            WNH3(K)  = WMOL(11)
            WHNO3(K) = WMOL(12)
            WAIR(K)  = WAIR1
      ELSE
           CALL VSANSM(K,AHAZE,IHA1)
           ZMDL(K) = Z(K)
      ENDIF
C
C
C     GNDALT NOT ZERO
C
      ZSC=ZMDL(K)
      IF((GNDALT.GT.0.).AND.(ZMDL(K).LT.6.0)) THEN
           ASC=6./(6.-GNDALT)
           CON=-ASC*GNDALT
           ZSC=ASC*ZMDL(K)+CON -1.E-4
           IF(ZSC.LT.0.)ZSC=0.
      ENDIF
      ZGN(K)=ZSC
C
C
      IF(ICLD1.EQ.0) ICLD1=ICLD
      ICLDL = ICLD1
      IF(ICLD1.GT.11) ICLD1=0
      IF(IHA1.NE.0) IVUL1=0
      IF(IHA1.NE.0) ICLD1=0
      IF(ICLD1.NE.0) IVUL1=0
      IF((AHAZE.NE.0.).OR.(EQLWCZ.NE.0.)) GO TO 8
CCC   IF(RRATZ.NE.0.) GO TO 8
      IF((IVSA.EQ.1).AND.(ICLD1.EQ.0)) THEN
           IF(MODEL.NE.7)CALL LAYVSA(K,RH,AHAZE,IHA1)
      ELSE
           CALL LAYCLD(K,EQLWCZ,RRATZ,ICLD1,GNDALT,RAINRT)
           IF(RAINRT .GT. 0 .AND. ZMDL(K) .LT.6.)RRATZ = RAINRT
           IF(ICLD1 . LT.  1) GO TO 8
           IF(ICLD1 . GT. 10) GO TO 8
           IF(ZMDL(K). GT.CLDTOP(ICLD1)+ GNDALT) THEN
              RRATZ = 0.
           ENDIF
      ENDIF
8     CONTINUE
      ICLDC = ICLD
      IF(ICLDS .NE. 0) ICLDC = ICLDS
C
      IF(ICLDS. EQ. 18 .OR. ICLDS .EQ. 19) THEN
           IF(AHAZE . GT. 0) THEN
                DENSTY(16,K) = AHAZE
                AHAZE    = 0.
                GO TO 46
           ENDIF
           IF(EQLWCZ .GT. 0) THEN
                IF(ICLDS .EQ. 18) CON = 3.446E-3
                IF(ICLDS .EQ. 19) CON = 5.811E-2
                DENSTY(16,K) = EQLWCZ/CON
                EQLWCZ = 0
                GO TO 46
           ENDIF
      ENDIF
      IF(ICLDC .EQ. 18 .OR. ICLDC.EQ. 19) THEN
           DENSTY(16,K) = 0.
           IF(ZMDL(K)  .GE.  CLD1 .AND. ZMDL(K) .LE. CLD2)
     X     DENSTY(16,K) = CEXT
      ENDIF
46    CLDAMT(K)=EQLWCZ
      IF(ICLDS .EQ. 0. AND. CLDAMT(K) .EQ. 0.)ICLD1 = 0
      RRAMT(K)=RRATZ
      IF(MODEL  .EQ. 0 .OR. MODEL .EQ. 7) THEN
C     DONT CHANGE RH
      ELSE
            IF(EQLWCZ.GT.0.0) RH=100.0
            IF(RRATZ .GT.0.0) RH=100.0
      ENDIF
      AHAST(K)=AHAZE
C     IHA1  IS IHAZE FOR THIS LAYER
C     ISEA1 IS ISEASN FOR THIS LAYER
C     IVUL1 IS IVULCN FOR THE LAYER
      IF(ISEA1.EQ.0) ISEA1=ISEASN
      ITYAER=IHAZE
      IF(IHA1.GT.0) ITYAER=IHA1
      IF(IVUL1.GT.0) IVULCN=IVUL1
      IF(IVUL1.LE.0) IVUL1=IVULCN
C
      IF(K.EQ.1) GO TO 23
      IF(ICHR .EQ. 1) GO TO 20
      IF(ICLD1.NE.IREGC(IC1))GO TO 19
      IF(IHA1 .EQ. 0 .AND. ICLD1. EQ. 0) THEN
           IF(ZSC.GT.2.)ITYAER=6
           IF(ZSC.GT.10.)ITYAER=IVULCN+10
           IF(ZSC.GT.30.) ITYAER=19
           IF(ITYAER.EQ.ICH(IC1))GO TO 23
      ENDIF
      IF(ICLD1 .EQ. 0 .AND. IHA1.EQ. 0) GO TO 20
      N = 7
      IF(IC1 .GT. 1) N= IC1 + 10
      IF(IHA1 .EQ. 0) GO TO 23
      IF(IHA1 .NE.ICH(IC1)) GO TO 20
      GO TO 23
19    IF(ICLD1 .NE. 0) THEN
           IF(ICLD1. EQ. IREGC(1)) THEN
               N = 7
               ALTB(1) = ZMDL(K)
               GO TO 24
           ENDIF
           IF(IC1 .EQ. 1) GO TO 20
           IF(ICLD1. EQ. IREGC(2)) THEN
               N = 12
               ALTB(2) = ZMDL(K)
               GO TO 24
           ENDIF
           IF(IC1 .EQ. 2) GO TO 20
           IF(ICLD1. EQ. IREGC(3)) THEN
               N = 13
               ALTB(3) = ZMDL(K)
               GO TO 24
           ENDIF
      ELSE
            IF(IHA1 .EQ. 0 .AND. ICLD1. EQ. 0) THEN
                 IF(ZSC.GT.2.)ITYAER=6
                 IF(ZSC.GT.10.)ITYAER=IVULCN+10
                 IF(ZSC.GT.30.) ITYAER=19
            ENDIF
           IF(ITYAER.EQ.ICH(  1))THEN
               N = 7
               ALTB(1) = ZMDL(K)
               GO TO 24
           ENDIF
           IF(IC1 .EQ. 1) GO TO 20
           IF(ITYAER.EQ.ICH(  2))THEN
               N = 12
               ALTB(2) = ZMDL(K)
               GO TO 24
           ENDIF
           IF(IC1 .EQ. 2) GO TO 20
           IF(ITYAER.EQ.ICH(  3))THEN
               N = 13
               ALTB(3) = ZMDL(K)
               GO TO 24
           ENDIF
      ENDIF
20    IC1=IC1+1
C
C
C
      N=IC1+10
      IF(RH.GT.0.) RHH=RH
      IF(IC1.LE.4) GO TO 23
      IC1=4
      N=14
      ITYAER=ICH(IC1)
23    ICH(IC1)=ITYAER
      IREGC(IC1) = ICLD1
      ALTB(IC1) = ZMDL(K)
C
C     FOR LVSA OR CLD OR RAIN ONLY
C
24    IF (RH.GT.  0.0) THEN
            TA=T0/T(K)
            WH(K)  =F(TA)*0.01*RH
C
      ENDIF
   40 CONTINUE
      DENSTY(7,K)=0.
      DENSTY(12,K)=0.
      DENSTY(13,K)=0.
      DENSTY(14,K)=0.
      DENSTY(15,K)=0.
      TS=273.15/T(K)
      WTEMP=WH(K)
      RELHUM(K)=0.
      IF(WTEMP.LE.0.) GO TO 45
      RELHUM(K) = 100.0*WTEMP/F(TS)
      IF(RELHUM(K).GT.100.)WRITE(IPR,930)RELHUM(K),ZMDL(K)
      IF( RELHUM(K) .GT. 100.) RELHUM(K)=100.
      IF(RELHUM(K).LT.0.)WRITE(IPR,930)RELHUM(K),ZMDL(K)
930   FORMAT(' ***ERROR RELHUM ' ,E15.4,'  AT ALT  ',F12.3)
      IF( RELHUM(K) .LT.   0.) RELHUM(K)=0.
45    RHH=RELHUM(K)
      RH=RHH
      IF (VIS1.LE.0.0) VIS1=VIS
      IF (AHAZE.EQ.0.0) GO TO 47
      DENSTY(N,K)=AHAZE
      IF(ITYAER.EQ.3) GO TO 47
      IF(ITYAER.EQ.10)GO TO 47
C     AHAZE IS IN LOWTRAN NUMBER DENSTY UNITS
      GO TO 50
47    CONTINUE
C
C     AHAZE NOT INPUT OR NAVY MARITIME MODEL IS CALLED
C
C     CHECK IF GNDALT NOT ZERO
C
      IF((GNDALT.GT.0.).AND.(ZMDL(K).LT.6.0)) THEN
           J=IFIX(ZSC+1.0E-6)+1
           FAC=ZSC-FLOAT(J-1)
      ELSE
      J=IFIX(ZMDL(K)+1.0E-6)+1
      IF (ZMDL(K).GE.25.0) J=(ZMDL(K)-25.0)/5.0+26.
      IF (ZMDL(K).GE.50.0) J=(ZMDL(K)-50.0)/20.0+31.
      IF (ZMDL(K).GE.70.0) J=(ZMDL(K)-70.0)/30.0+32.
      IF (J.GT.32) J=32
      FAC=ZMDL(K)-FLOAT(J-1)
      IF (J.LT.26) GO TO 125
      FAC=(ZMDL(K)-5.0*FLOAT(J-26)-25.)/5.
      IF (J.GE.31) FAC=(ZMDL(K)-50.0)/20.
      IF (J.GE.32) FAC=(ZMDL(K)-70.0)/30.
      ENDIF
125   L=J+1
      IF (FAC.GT.1.0) FAC=1.0
      IF(ITYAER.EQ.3.AND.ICL.EQ.0)THEN
           CALL MARINE(VIS1,MODEL,WSS,WHH,ICSTL,EXTC,ABSC,IC1)
           IREG(IC1) = 1
           VIS=VIS1
           ICL = ICL + 1
      ENDIF
      IF(ITYAER.EQ.10.AND.IDSR.EQ.0)THEN
           CALL DESATT(WSS,VIS1)
           IREG(IC1) = 1
           VIS=VIS1
           IDSR = IDSR + 1
      ENDIF
      IF(AHAZE.GT.0.0) GO TO 50
      IF(IHA1.LE.0) IHA1=IHAZE
      CALL CLDPRF(K,ICLD1,IHA1,IC1)
      CALL AERPRF(J,  VIS1,HAZ1,IHA1,      ISEA1,IVUL1,NN)
      CALL AERPRF(L,  VIS1,HAZ2,IHA1,      ISEA1,IVUL1,NN)
      HAZE=0.
      IF ((HAZ1.LE.0.0).OR.(HAZ2.LE.0.0)) GO TO 48
      HAZE=HAZ1*(HAZ2/HAZ1)**FAC
48    CONTINUE
      IF(CLDAMT(K).GT.0.0) HAZE=HAZEC(K)
      DENSTY(N,K)=HAZE
50    CONTINUE
      ITY1(K)=ITYAER
      IH1(K)=IHA1
      IF(AHAZE.NE.0)IH1(K)=-99
      IS1(K)=ISEA1
      IVL1(K)=IVUL1
100   CONTINUE
C
C     END OF LOOP
C
      IHH=ICLD
      IF(IHH.LE.0) IHH=12
      IF(IHH.GT.12)IHH=12
      IF(ICLD.GE.18)IHH=13
      DO 105 II=1,5
      HHOL(II)=AHAHOL(II,IHH)
      IF(IVSA.NE.0) HHOL(II)=AHLVSA(II)
105   CONTINUE
      IF(ICLD .NE. 0) THEN
           IF(JPRT.EQ.0)WRITE (IPR,904) HHOL
904        FORMAT(//'0 CLOUD AND OR RAIN TYPE CHOSEN IS   ',5A4)
      ENDIF
      IF(JPRT.EQ.0)WRITE(IPR,905)
C
905   FORMAT(//,T7,'Z',T17,'P',T26,'T',T32,'REL H', T41,'H2O',
     1 T49,'CLD AMT',T59,'RAIN RATE', T90,'AEROSOL'/,
     2 T6,'(KM)',T16,'(MB)',T25,'(K)',T33,'(%)',T39,'(GM M-3)',T49,
     3 '(GM M-3)',T59,'(MM HR-1)',T69,
     4 'TYPE', T90,'PROFILE')
      IF(JPRT.EQ.1) RETURN
      DO 60 KK=1,ML
      DO 52 IJ=1,5
      AHOL1(IJ)=BLANK
      AHOL2(IJ)=BLANK
52    AHOL3(IJ)=BLANK
      ITYAER=ITY1(KK)
      IF(ITYAER.LE.0) ITYAER=1
      IF(ITYAER . EQ.  16) ITYAER = 11
      IF(ITYAER . EQ.  17) ITYAER = 11
      IF(ITYAER . EQ.  18) ITYAER = 13
      IF(ITYAER . EQ.  19) ITYAER = 11
      IHA1=IH1(KK)
      ISEA1=IS1(KK)
      IVUL1=IVL1(KK)
      DO 54 IJ=1,5
      AHOL1(IJ)=  HZ(IJ,ITYAER)
      IF(IVSA.EQ.1) AHOL1(IJ)=HHOL(IJ)
      IF(CLDAMT(KK).GT.0.0 .OR. RRAMT(KK).GT.0.0) AHOL1(IJ)=HHOL(IJ)
      IF(IHAZE.EQ.0) AHOL1(IJ)=HHOL(IJ)
      AHOL2(IJ)=AHUS(IJ)
      IF(AHAST(KK).EQ.0) AHOL2(IJ)=AHOL1(IJ)
      IF(CLDAMT(KK).GT.0.0 .OR. RRAMT(KK).GT.0.0) AHOL2(IJ)=HHOL(IJ)
54    IF (ZGN(KK).GT.2.0) AHOL3(IJ)=SEASN(IJ,ISEA1)
60    WRITE(IPR,915)ZMDL(KK),P(KK  ),T(KK  ),RELHUM(KK),WH(KK  ),
     X CLDAMT(KK),RRAMT(KK),AHOL1,AHOL2,AHOL3
915   FORMAT(2F10.3,2F8.2,1P3E10.3,1X,5A4,5A4,5A4)
      RETURN
C
925   FORMAT(//,' MODEL ATMOSPHERE NO. ',I5,' ICLD =',I5,//)
      END SUBROUTINE AERNSM

      SUBROUTINE RDEXA

C
C     READ IN USER DEFINED EXTINCTION ABSORPTION COEFFICIENTS AND
C     ASYMMETRY PARAMETERS
C
      COMMON RELHUM(34),HSTOR(34),ICH(4),VH(17),TX(63),W(63)
      COMMON             WPATH(68, 63),TBBY(68)
      COMMON ABSC(5,47),EXTC(5,47),ASYM(5,47),VX2(47),AWCCON(5)
      COMMON /IFIL/ IRD,IPR,IPU,NPR,IPR1
      COMMON /CARD2D/ IREG(4),ALTB(4),IREGC(4)
      DIMENSION TITLE(18),VX(47)
C
      READ (IRD,1200) (IREG(IK),IK=1,4)
1200  FORMAT(4I5)
      WRITE(IPR,1210) (IREG(IK),IK=1,4)
1210  FORMAT('0 CARD 2D *****',4I5)
C
      DO 1300 IHC = 1,4
C
      IF(IREG(IHC) .EQ. 0) GO TO 1300
      READ(IRD,1220) AWCCON(IHC),TITLE
1220  FORMAT(E10.3,18A4)
      WRITE(IPR,1230) AWCCON(IHC),TITLE
1230  FORMAT('0 CARD 2D1 **** EQUIVALENT WATER = ',1PE10.3,18A4)
      WRITE(IPR,1250)
1250  FORMAT('0 CARD 2D2 ****')
C
      READ(IRD,1260)(VX(I),EXTC(IHC,I),ABSC(IHC,I),ASYM(IHC,I),I=1,47)
1260  FORMAT(3(F6.2,2F7.5,F6.4))
      WRITE(IPR,1270)(VX(I),EXTC(IHC,I),ABSC(IHC,I),ASYM(IHC,I),I=1,47)
1270  FORMAT(2X,F6.2,2F7.5,F6.4,F6.2,2F7.5,F6.4,F6.2,2F7.5,F6.4)
1300  CONTINUE
      RETURN
      END Subroutine RDEXA

      SUBROUTINE CIRR18
C*********************************************************************
C*  ROUTINE TO SET CTHIK CALT CEXT  FOR  CIRRUS CLOUDS 18 19        **
C*  INPUTS]                                                         **
C*           CHTIK    -  CIRRUS THICKNESS (KM)                      **
C*                       0 = USE THICKNESS STATISTICS               **
C*                       .NE. 0 = USER DEFINES THICKNESS            **
C*                                                                  **
C*           CALT     -  CIRRUS BASE ALTITUDE (KM)                  **
C*                       0 = USE CALCULATED VALUE                   **
C*                       .NE. 0 = USER DEFINES BASE ALTITUDE        **
C*                                                                  **
C*           ICLD     -  CIRRUS PRESENCE FLAG                       **
C*                       0 = NO CIRRUS                              **
C*                       18  19 = USE CIRRUS PROFILE                **
C*                                                                  **
C*           MODEL    -  ATMOSPHERIC MODEL                          **
C*                       1-5  AS IN MAIN PROGRAM                    **
C*                       MODEL = 0,6,7 NOT USED SET TO 2            **
C*                                                                  **
C*  OUTPUTS]                                                        **
C*         CTHIK        -  CIRRUS THICKNESS (KM)                    **
C*         CALT         -  CIRRUS BASE ALTITUDE (KM)                **
C          CEXT IS THE EXTINCTION COEFFIENT(KM-1) AT 0.55
C               DEFAULT VALUE 0.14*CTHIK
C*                                                                  **
C*********************************************************************
C
      COMMON /CARD1/ MODEL,ITYPE,IEMSCT,M1,M2,M3,IM,NOPRNT,TBOUND,SALB
      COMMON /CARD2/ IHAZE,ISEASN,IVULCN,ICSTL,ICLD,IVSA,VIS,WSS,WHH,
     1    RAINRT
      COMMON /CARD2A/ CTHIK,CALT,CEXT
      COMMON RELHUM(34),HSTOR(34),ICH(4),VH(17),TX(63),W(63)
      COMMON             WPATH(68, 63),TBBY(68)
      COMMON /CNTRL/ KMAX,M,IKMAX,NL,ML,IKLO,ISSGEO,IMULT
      COMMON /CARD4/ V1,V2,DV
      COMMON /MODEL/ Z (34),PM(34),TM(34),RFNDX(34),DENSTY(63,34),
     1 CLDAMT(34),RRAMT(34),EQLWC(34),HAZEC(34)
      COMMON /IFIL/ IRD,IPR,IPU,NPR,IPR1
      DIMENSION CBASE(5,2),TSTAT(11),PTAB(5),CAMEAN(5)
      DIMENSION CBASE1(5),CBASE2(5)
      EQUIVALENCE (CBASE1(1),CBASE(1,1)),(CBASE2(1),CBASE(1,2))
C
      DATA  CAMEAN           / 11.0, 10.0, 8.0, 7.0, 5.0 /
      DATA  PTAB           / 0.8, 0.4, 0.5, 0.45, 0.4/
      DATA  CBASE1            / 7.5, 7.3, 4.5, 4.5, 2.5 /
      DATA  CBASE2            /16.5,13.5,14.0, 9.5,10.0 /
      DATA  TSTAT             / 0.0,.291,.509,.655,.764,.837,.892,
     + 0.928, 0.960, 0.982, 1.00 /
      MDL = MODEL
C
C  CHECK IF USER WANTS TO USE A THICKNESS VALUE HE PROVIDES
C  DEFAULTED MEAN CIRRUS THICKNESS IS 1.0KM  OR 0.2 KM.
C
      IF ( CTHIK .GT. 0.0 ) GO TO 25
      IF(ICLD.EQ.18) CTHIK=1.0
      IF(ICLD.EQ.19) CTHIK=0.2
25    IF(CEXT .EQ. 0.) CEXT = 0.14 * CTHIK
C
C  BASE HEIGHT CALCULATIONS
C
      IF ( MODEL .LT. 1  .OR.  MODEL .GT. 5 ) MDL = 2
C
      HMAX = CBASE(MDL,2) - CTHIK
C     BRANGE = HMAX - CBASE(MDL,1)
      IF ( CALT .GT. 0.0 ) GO TO 27
      CALT = CAMEAN(MDL)
C
 27   IF(ICLD. EQ. 18) WRITE(IPR,1219)
1219  FORMAT(15X,'CIRRUS ATTENUATION INCLUDED   (STANDARD CIRRUS)')
      IF(ICLD. EQ. 19) WRITE(IPR,1220)
1220  FORMAT(15X,'CIRRUS ATTENUATION INCLUDED   (THIN     CIRRUS)')
      WRITE(IPR,1221) CTHIK
1221  FORMAT(15X,'CIRRUS THICKNESS ',
     X F10.3,'KM')
      WRITE(IPR,1224)CALT
1224  FORMAT(15X,'CIRRUS BASE ALTITUDE ',
     X F10.3,' KM')
       WRITE(IPR,1226) CEXT
1226    FORMAT(15X,'CIRRUS PROFILE EXTINCT ',F10.3)
C
C       END OF CIRRUS MODEL SET UP
      RETURN
      END Subroutine CIRR18

      SUBROUTINE DESATT(WSPD,VIS)
C**********************************************************************
C*                                                                    *
C*    THIS SUBROUTINE CALCULATES THE ATTENUATION COEFFICIENTS AND     *
C*    ASYMMETRY PARAMETER FOR THE DESERT AEROSOL BASED ON THE WIND    *
C*    SPEED AND METEOROLOGICAL RANGE                                  *
C*                                                                    *
C*                                                                    *
C*                                                                    *
C*    PROGRAMMED BY:  D. R. LONGTIN         OPTIMETRICS, INC.         *
C*                                          BURLINGTON, MASSACHUSETTS *
C*                                          JULY 1987                 *
C*                                                                    *
C*                                                                    *
C*    INPUTS:    WSPD    -  WIND SPEED (IN M/S) AT 10 M               *
C*               VIS     -  METEOROLOGICAL RANGE (KM)                 *
C*                                                                    *
C*    OUTPUTS:   DESEXT  -  EXTINCTION COEFFICIENT AT 47 WAVELENGTHS  *
C*               DESSCA  -  SCATTERING COEFFICIENT AT 47 WAVELENGTHS  *
C*    *****      DESABS  -  ABSORPTION COEFFICIENT AT 47 WAVELENGTHS  *
C*               DESG    -  ASYMMETRY PARAMETER AT 47 WAVELENGTHS     *
C*                                                                    *
C**********************************************************************
C
      COMMON RELHUM(34),WHNO3(34),ICH(4),VH(17),TX(63),W(63)
      COMMON             WPATH(68, 63),TBBY(68)
      COMMON ABSC(5,47),EXTC(5,47),ASYM(5,47),VX2(47),AWCCON(5)
      COMMON/ DESAER/EXT(47,4),ABS(47,4),G(47,4)
      DIMENSION DESEXT(47),DESSCA(47),DESABS(47),DESG(47),WIND(4)
      REAL      DESEXT    ,DESSCA    ,DESABS    ,DESG    ,WIND
      INTEGER WAVEL
      DATA WIND/0., 10., 20., 30./
      DATA RAYSCT / 0.01159 /
      IF(WSPD .LT. 0.) WSPD = 10.
C
      NWSPD = INT(WSPD/10) + 1
      IF (NWSPD.GE.5) WRITE(6,999)
      IF (NWSPD.GE.4) NWSPD = 3
C
C     INTERPOLATE THE RADIATIVE PROPERTIES AT WIND SPEED WSPD
C
      DO 100 WAVEL = 1,47
C
C     EXTINCTION COEFFICIENT
C
         SLOPE = LOG(EXT(WAVEL,NWSPD+1)/EXT(WAVEL,NWSPD))/
     *           (WIND(NWSPD+1)-WIND(NWSPD))
         B = LOG(EXT(WAVEL,NWSPD+1)) - SLOPE*WIND(NWSPD+1)
         DESEXT(WAVEL) = EXP(SLOPE*WSPD + B)
C
C     ABSORPTION COEFFICIENT
C
         SLOPE = LOG(ABS(WAVEL,NWSPD+1)/ABS(WAVEL,NWSPD))/
     *           (WIND(NWSPD+1)-WIND(NWSPD))
         B = LOG(ABS(WAVEL,NWSPD+1)) - SLOPE*WIND(NWSPD+1)
         DESABS(WAVEL) = EXP(SLOPE*WSPD + B)
C
C     SCATTERING COEFFICIENT
C
         DESSCA(WAVEL) = DESEXT(WAVEL) - DESABS(WAVEL)
C
C     ASYMMETRY PARAMETER
C
         SLOPE = (G(WAVEL,NWSPD+1)-G(WAVEL,NWSPD))/(WIND(NWSPD+1)-
     *           WIND(NWSPD))
         B = G(WAVEL,NWSPD+1) - SLOPE*(WIND(NWSPD+1))
         DESG(WAVEL) = SLOPE*WSPD + B
100   CONTINUE
C
          EXT55 = DESEXT(4)
C
C         DETERMINE METEROLOGICAL RANGE FROM 0.55 EXTINCTION
C          AND KOSCHMIEDER FORMULA
C
      IF (VIS. LE .0.) THEN
               VIS = 3.912/(DESEXT(4) + RAYSCT )
      ENDIF
C
C        RENORMALIZE ATTENUATION COEFFICIENTS TO 1.0 KM-1 AT
C        0.55 MICRONS FOR CAPABILTY WITH LOWTRAN
C
          DO 200 WAVEL=1,47
            EXTC(1,WAVEL) = DESEXT(WAVEL)       /EXT55
CC          DESSCA(WAVEL) = DESSCA(WAVEL)       /EXT55
            ABSC(1,WAVEL) = DESABS(WAVEL)       /EXT55
            ASYM(1,WAVEL) = DESG(WAVEL)
200      CONTINUE
       WRITE(6,900) VIS,WSPD
900    FORMAT(//,'  VIS = ',F10.3,' WIND = ',F10.3)
       RETURN
C
999    FORMAT(' WARNING: WIND SPEED IS BEYOND 30 M/S; RADIATIVE',
     *'PROPERTIES',/,'OF THE DESERT AEROSOL HAVE BEEN EXTRAPOLATED')
      END
      BLOCK DATA DSTDTA
C>    BLOCK DATA
C**********************************************************************
C*                                                                    *
C*    DESERT AEROSOL EXTINCTION COEFFICIENTS, ABSORPTION COEFFICIENTS *
C*    AND ASYMMETRY PARAMETERS FOR FOUR WIND SPEEDS: 0 M/S, 10 M/S,   *
C*    20 M/S AND 30 M/S                                               *
C*                                                                    *
C*    PROGRAMMED BY:  D. R. LONGTIN         OPTIMETRICS, INC.         *
C*                                          BURLINGTON, MASSACHUSETTS *
C*                                          FEB  1988                 *
C*                                                                    *
C**********************************************************************
C
      COMMON /DESAER/DESEX1(47),DESEX2(47),DESEX3(47),DESEX4(47),
     *DESAB1(47),DESAB2(47),DESAB3(47),DESAB4(47),DESG1(47),DESG2(47),
     *DESG3(47),DESG4(47)
C
C     EXTINCTION COEFFICIENTS
C
      DATA DESEX1 /
     1 8.7330E-2, 7.1336E-2, 6.5754E-2, 4.0080E-2, 2.8958E-2, 1.4537E-2,
     1 7.1554E-3, 4.3472E-3, 3.5465E-3, 2.9225E-3, 2.5676E-3, 4.3573E-3,
     1 5.7479E-3, 2.9073E-3, 2.0109E-3, 1.8890E-3, 1.8525E-3, 1.8915E-3,
     1 1.9503E-3, 2.3256E-3, 4.9536E-3, 2.0526E-3, 2.6738E-3, 9.2804E-3,
     1 1.5352E-2, 6.9396E-3, 2.2455E-3, 1.9840E-3, 1.9452E-3, 1.9019E-3,
     1 1.8551E-3, 1.9661E-3, 1.9865E-3, 2.4089E-3, 1.7485E-3, 1.4764E-3,
     1 2.2604E-3, 2.1536E-3, 2.3008E-3, 2.9272E-3, 2.6943E-3, 2.4319E-3,
     1 1.9199E-3, 1.4887E-3, 8.0630E-4, 4.6950E-4, 2.0792E-4/
      DATA DESEX2 /
     2 1.0419E-1, 8.8261E-2, 8.2699E-2, 5.7144E-2, 4.6078E-2, 3.1831E-2,
     2 2.4638E-2, 2.1952E-2, 2.1254E-2, 2.0743E-2, 2.0397E-2, 2.2340E-2,
     2 2.3848E-2, 2.1104E-2, 2.0422E-2, 2.0462E-2, 2.0591E-2, 2.0843E-2,
     2 2.1030E-2, 2.1630E-2, 2.2880E-2, 1.9075E-2, 2.0928E-2, 2.9835E-2,
     2 3.8025E-2, 2.7349E-2, 2.1502E-2, 2.1475E-2, 2.1563E-2, 2.1726E-2,
     2 2.2265E-2, 2.2580E-2, 2.2708E-2, 2.1705E-2, 2.1230E-2, 2.0523E-2,
     2 2.6686E-2, 2.5461E-2, 2.3785E-2, 2.6033E-2, 2.6484E-2, 2.6464E-2,
     2 2.5318E-2, 2.3341E-2, 1.7824E-2, 1.3092E-2, 7.2020E-3/
      DATA DESEX3 /
     3 2.7337E-1, 2.5795E-1, 2.5252E-1, 2.2773E-1, 2.1710E-1, 2.0402E-1,
     3 1.9809E-1, 1.9664E-1, 1.9635E-1, 1.9655E-1, 1.9661E-1, 1.9907E-1,
     3 2.0164E-1, 1.9957E-1, 2.0013E-1, 2.0142E-1, 2.0270E-1, 2.0400E-1,
     3 2.0501E-1, 2.0665E-1, 2.0573E-1, 1.9165E-1, 2.0121E-1, 2.2402E-1,
     3 2.4718E-1, 2.2503E-1, 2.0749E-1, 2.0910E-1, 2.0999E-1, 2.1165E-1,
     3 2.1784E-1, 2.1727E-1, 2.1803E-1, 2.0995E-1, 2.1214E-1, 2.1308E-1,
     3 2.5226E-1, 2.4234E-1, 2.2638E-1, 2.3991E-1, 2.4680E-1, 2.5176E-1,
     3 2.5655E-1, 2.5505E-1, 2.3610E-1, 2.1047E-1, 1.5938E-1/
      DATA DESEX4 /
     4 1.9841E0, 1.9721E0, 1.9676E0, 1.9488E0, 1.9424E0, 1.9377E0,
     4 1.9374E0, 1.9484E0, 1.9509E0, 1.9549E0, 1.9570E0, 1.9642E0,
     4 1.9737E0, 1.9764E0, 1.9860E0, 1.9944E0, 2.0020E0, 2.0113E0,
     4 2.0148E0, 2.0245E0, 2.0283E0, 1.9397E0, 1.9973E0, 2.1039E0,
     4 2.2246E0, 2.1587E0, 2.0409E0, 2.0520E0, 2.0613E0, 2.0651E0,
     4 2.1194E0, 2.1065E0, 2.1104E0, 2.0651E0, 2.0926E0, 2.1155E0,
     4 2.3696E0, 2.2931E0, 2.1828E0, 2.2708E0, 2.3304E0, 2.3762E0,
     4 2.4533E0, 2.4915E0, 2.5118E0, 2.4463E0, 2.2122E0/
C
C     ABSORPTION COEFFICIENTS
C
      DATA DESAB1 /
     1 6.4942E-4, 6.1415E-4, 5.8584E-4, 4.4211E-4, 1.3415E-4, 7.8142E-5,
     1 5.7566E-5, 8.3848E-5, 7.6988E-5, 4.4486E-5, 8.9604E-5, 2.4887E-3,
     1 3.3444E-3, 6.8781E-4, 1.6387E-4, 3.5236E-4, 3.5340E-4, 4.0930E-4,
     1 5.0526E-4, 8.2146E-4, 3.7647E-3, 1.0162E-3, 1.3525E-3, 7.7761E-3,
     1 1.3108E-2, 5.1252E-3, 1.0973E-3, 6.8573E-4, 5.7622E-4, 5.1268E-4,
     1 7.6834E-4, 5.3793E-4, 5.0611E-4, 1.2828E-3, 6.7827E-4, 4.3826E-4,
     1 5.1221E-4, 8.8642E-4, 9.5535E-4, 1.0000E-3, 7.5646E-4, 6.1552E-4,
     1 4.6087E-4, 3.5642E-4, 2.3556E-4, 1.7596E-4, 1.1699E-4/
      DATA DESAB2 /
     2 4.3569E-3, 4.3413E-3, 4.3277E-3, 4.0649E-3, 3.9091E-4, 8.4594E-5,
     2 5.8501E-5, 8.4412E-5, 7.7547E-5, 4.6817E-5, 9.2721E-5, 2.5389E-3,
     2 3.3588E-3, 7.9414E-4, 8.5079E-4, 4.6002E-3, 4.4872E-3, 4.6200E-3,
     2 5.2973E-3, 4.8910E-3, 8.9899E-3, 5.4745E-3, 3.6375E-3, 1.1862E-2,
     2 1.5179E-2, 7.0015E-3, 8.4693E-3, 6.9516E-3, 6.3008E-3, 6.3684E-3,
     2 8.4992E-3, 6.9625E-3, 6.5192E-3, 7.8955E-3, 7.7192E-3, 5.8540E-3,
     2 5.3263E-3, 9.3004E-3, 7.4848E-3, 3.0952E-3, 1.8219E-3, 1.3078E-3,
     2 1.0653E-3, 5.5231E-4, 3.2311E-4, 2.2422E-4, 1.3839E-4/
      DATA DESAB3 /
     3 4.1552E-2, 4.1671E-2, 4.1781E-2, 4.1125E-2, 5.0552E-3, 2.1085E-4,
     3 7.5703E-5, 9.5531E-5, 8.8354E-5, 9.0588E-5, 1.5058E-4, 3.4972E-3,
     3 3.6310E-3, 2.6709E-3, 1.2558E-2, 5.9184E-2, 5.8289E-2, 5.9206E-2,
     3 6.5487E-2, 5.8707E-2, 7.4669E-2, 5.2152E-2, 2.5783E-2, 4.7971E-2,
     3 3.2378E-2, 2.4739E-2, 8.1225E-2, 7.5085E-2, 7.1232E-2, 7.3042E-2,
     3 8.0638E-2, 7.8255E-2, 7.4882E-2, 7.8853E-2, 8.1412E-2, 6.5722E-2,
     3 4.8565E-2, 8.4983E-2, 7.1273E-2, 3.0870E-2, 1.7031E-2, 1.1455E-2,
     3 1.0554E-2, 4.0418E-3, 2.1509E-3, 1.4115E-3, 7.9698E-4/
      DATA DESAB4 /
     4 4.1777E-1, 4.1880E-1, 4.2000E-1, 4.1846E-1, 8.6452E-2, 2.6538E-3,
     4 4.0804E-4, 3.1418E-4, 2.9996E-4, 9.3018E-4, 1.2814E-3, 2.1436E-2,
     4 8.7553E-3, 3.7670E-2, 2.0849E-1, 7.0914E-1, 7.0420E-1, 7.1379E-1,
     4 7.6309E-1, 7.1128E-1, 8.2992E-1, 5.3585E-1, 2.4456E-1, 3.8103E-1,
     4 1.7784E-1, 1.9305E-1, 7.9910E-1, 7.8987E-1, 7.7502E-1, 7.9400E-1,
     4 7.6332E-1, 8.3629E-1, 8.1581E-1, 8.3122E-1, 8.4901E-1, 7.0150E-1,
     4 4.4205E-1, 7.7354E-1, 7.1088E-1, 3.9328E-1, 2.3337E-1, 1.6258E-1,
     4 1.5289E-1, 5.8849E-2, 3.5576E-2, 2.4463E-2, 1.4525E-2/
C
C     ASYMMETRY PARAMETER
C
      DATA DESG1 /
     1 0.6603, 0.6581, 0.6547, 0.6383, 0.6276, 0.5997, 0.5829, 0.5873,
     1 0.5967, 0.6130, 0.6323, 0.6850, 0.6068, 0.6312, 0.6816, 0.7298,
     1 0.7574, 0.7874, 0.8124, 0.8424, 0.8301, 0.8107, 0.6143, 0.6167,
     1 0.4892, 0.4917, 0.6662, 0.6334, 0.6298, 0.6498, 0.7470, 0.6711,
     1 0.6751, 0.7538, 0.8054, 0.7797, 0.5522, 0.6575, 0.4702, 0.3719,
     1 0.3626, 0.3690, 0.3790, 0.3805, 0.3766, 0.3639, 0.3281/
      DATA DESG2 /
     2 0.6836, 0.6879, 0.6877, 0.6919, 0.6901, 0.7045, 0.7279, 0.7466,
     2 0.7522, 0.7568, 0.7629, 0.7700, 0.7567, 0.7617, 0.7781, 0.8289,
     2 0.8360, 0.8465, 0.8624, 0.8707, 0.9524, 0.8292, 0.6202, 0.6425,
     2 0.5777, 0.5623, 0.7610, 0.7310, 0.7247, 0.7419, 0.7782, 0.7481,
     2 0.7446, 0.8090, 0.8415, 0.8110, 0.6120, 0.7106, 0.5739, 0.4421,
     2 0.4089, 0.3979, 0.3917, 0.3853, 0.3842, 0.3829, 0.3797/
      DATA DESG3 /
     3 0.7718, 0.7865, 0.7907, 0.8077, 0.7801, 0.7827, 0.7871, 0.7880,
     3 0.7887, 0.7888, 0.7894, 0.7909, 0.7882, 0.7934, 0.8103, 0.8729,
     3 0.8766, 0.8844, 0.8979, 0.8997, 0.9698, 0.8318, 0.6197, 0.6420,
     3 0.5797, 0.5698, 0.8014, 0.7938, 0.7901, 0.8069, 0.7894, 0.8139,
     3 0.8086, 0.8546, 0.8691, 0.8288, 0.6394, 0.7400, 0.6495, 0.5235,
     3 0.4793, 0.4583, 0.4376, 0.4169, 0.4006, 0.3941, 0.3875/
      DATA DESG4 /
     4 0.8290, 0.8407, 0.8443, 0.8500, 0.8087, 0.7994, 0.7988, 0.7987,
     4 0.7988, 0.7989, 0.7998, 0.8023, 0.8011, 0.8076, 0.8331, 0.9045,
     4 0.9083, 0.9149, 0.9266, 0.9263, 0.9783, 0.8321, 0.6168, 0.6379,
     4 0.5706, 0.5673, 0.8196, 0.8324, 0.8347, 0.8549, 0.7940, 0.8621,
     4 0.8588, 0.8918, 0.8922, 0.8407, 0.6488, 0.7557, 0.7021, 0.6024,
     4 0.5533, 0.5280, 0.5016, 0.4711, 0.4396, 0.4230, 0.4058/
      END
      SUBROUTINE FLAYZ(ML,MODEL,ICLD,ZMDL,GNDALT,IVSA)
C
C     SUBROUTINE TO CREATE FINAL LOWTRAN BOUNDARIES
C
C     ZMDL COMMON /MODEL/ FINAL ALTITUDE FOR LOWTRAN
C     ZCLD CLOUD ALTITUDE
C     ZK1 USED WITH VSA
C     ZNEW ALTITUDES ABOVE THE CLOUD
C     ZNEWV ALTITUDES ABOVE THE 1ST 9 VSA ALTITUDES
C     ZTST  =ZCLD(J)
C     ZVSA  VSA ALTITUDES
C
      COMMON /CARD2A/ CTHIK,CALT,CEXT
      COMMON /ZVSALY/ ZVSA(10),RHVSA(10),AHVSA(10),IHVSA(10)
      DIMENSION ZNEWV(24),ZMDL( *)
      DIMENSION ZNEW(17),ZCLD(16),ZAER(34),ZST(34)
      DATA ZCLD/ 0.0,0.16,0.33,0.66,1.0,1.5,2.0,2.4,2.7,
     1 3.0,3.5,4.0,4.5,5.0,5.5,6.0/
      DATA ZNEWV/1.,2.,3.,4.,5.,6.,7.,8.,9.,10.,11.,12.,
     C 14.,16.,18.,20.,22.,25.,30.,35.,40.,50.,70.,100./
      DATA ZNEW/ 7.,8.,9.,10.,12.,14.,16.,18.,20.,22.,25.,30.,
     1 35.,40.,50.,70.,100./
      DATA ZAER / 0., 1., 2., 3., 4., 5., 6., 7., 8., 9.,
     1           10.,11.,12.,13.,14.,15.,16.,17.,18.,19.,
     1           20.,21.,22.,23.,24.,25.,30.,35.,40.,45.,
     1           50.,70.,100.,   1000./
      DATA DELZ /0.02/
      IF(MODEL .EQ.7) GO TO 600
C
      IF(MODEL.EQ.0) GO TO 600
      IF(IVSA.EQ.1) THEN
           DO 2 I=1,9
2          ZMDL(I)=ZVSA(I)
C
           HMXVSA=ZVSA(9)
           ZK1=HMXVSA+0.01
           IF(HMXVSA.LT.2.)ML=33
           IF(HMXVSA.LT.1.)ML=34
           IF(HMXVSA.EQ.2.)ML=32
           MDEL=34-ML
           DO 4 K=1,ML
           IK=K-10+MDEL
           IF(IK.GE.1)ZMDL(K)=ZNEWV(IK)
           IF(K.EQ.10)ZMDL(K)=ZK1
4          CONTINUE
C
           RETURN
      ENDIF
C
      IF(ICLD.GE.1.AND.ICLD.LE.11) GO TO 18
      DO 10 I=1,ML
      IF(ZAER(I) .GT.100.) GO TO 12
      IL = I
10    ZMDL(I)=ZAER(I)
12    ML = IL
C     IF(IEMSCT.NE.0) ZMDL(ML)=100.
C
      IF(GNDALT.LE.0.) GO TO  90
      DALT=(6.-GNDALT)/6.
      IF(DALT.LE.0.) GO TO  90
C
      DO 15 I=1,6
15    ZMDL(I)=FLOAT(I-1)*DALT+GNDALT
90    IF(ICLD .EQ. 18 .OR .ICLD. EQ. 19) THEN
           CLDD =  0.1 * CTHIK
           CLD0 = CALT - 0.5*CLDD
           IF(CLD0 .LE. 0.) CLD0 = 0.
           CLD1 = CLD0 + CLDD
           CLD2 = CLD1 + CTHIK - CLDD
           CLD3 = CLD2 + CLDD
           DO 100 I = 1,ML
           IJ = I
           IF(ZMDL(I) . LT. CLD0) GO TO 100
           GO TO 120
100        CONTINUE
           GO TO 600
120        ML1 = ML - IJ
           DO 130 I = 1 ,ML1
130        ZST(I)   = ZMDL(IJ+I-1)
           ZMDL(IJ) = CLD0
           ZMDL(IJ+1) = CLD1
           ZMDL(IJ+2) = CLD2
           ZMDL(IJ+3) = CLD3
           II  =  3
           DO 140 I = 1,ML1
           IF(ZST(I) . LT. CLD3) GO TO 140
           II  = II + 1
           IF((IJ + II) . EQ. ML) GO TO 145
           ZMDL(IJ + II) = ZST(I)
           IJII = IJ+II
140        CONTINUE
           ML = IJII + 1
145        ZMDL(ML) = 100.
      ENDIF
      GO TO 600
C
C     STAND CLOUD
C
18    DO 20 I=1,16
20    ZMDL(I)=ZCLD(I)+GNDALT
      I=16
C
      DO 30 K=17,ML
      J=K-16
      IF(ZNEW(J).LE.ZMDL(16)) GO TO 30
      I=I+1
      ZMDL(I)=ZNEW(J)
30    CONTINUE
      ML = I
      GO TO 600
C
C     MODEL 7
600   RETURN
      END
      SUBROUTINE CONVRT (P,T)
C*************************************************************
C
C        WRITTEN APR, 1985 TO ACCOMMODATE 'JCHAR' DEFINITIONS FOR
C        UNIFORM DATA INPUT -
C
C      JCHAR    JUNIT
C
C    " ",A       10    VOLUME MIXING RATIO (PPMV)
C        B       11    NUMBER DENSITY (CM-3)
C        C       12    MASS MIXING RATIO (GM(K)/KG(AIR))
C        D       13    MASS DENSITY (GM M-3)
C        E       14    PARTIAL PRESSURE (MB)
C        F       15    DEW POINT TEMP (TD IN T(K)) - H2O ONLY
C        G       16     "    "     "  (TD IN T(C)) - H2O ONLY
C        H       17    RELATIVE HUMIDITY (RH IN PERCENT) - H2O ONLY
C        I       18    AVAILABLE FOR USER DEFINITION
C        J       19    REQUEST DEFAULT TO SPECIFIED MODEL ATMOSPHERE
C
C***************************************************************
C
      COMMON /IFIL/IRD,IPR,IPU,NPR,IPR1
      COMMON /CONSTN/ PZERO,TZERO,AVOGAD,ALOSMT,GASCON,PLANK,BOLTZ,
     1    CLIGHT,ADCON,ALZERO,AVMWT,AIRMWT,AMWT(35)
      COMMON /CARD1B/ JUNITP,JUNITT,JUNIT1(13),WMOL1(12),WAIR1,JLOW
      DATA C1/18.9766/,C2/-14.9595/,C3/-2.43882/
      DENSAT(ATEMP) = ATEMP*B*EXP(C1+C2*ATEMP+C3*ATEMP**2)*1.0E-6
C*****
      RHOAIR = ALOSMT*(P/PZERO)*(TZERO/T)
C     NOPRNT = 0
C     A = TZERO/T
      DO 200 K = 1,12
      B = AVOGAD/AMWT(K)
      R = AIRMWT/AMWT(K)
      JUNIT = JUNIT1(K)
      WMOL  = WMOL1(K)
      IF(K.NE.1) GO TO 100
      CALL WATVAP(P,T)
      GO TO 200
100   CONTINUE
      IF(JUNIT.GT.10) GO TO 110
C*****GIVEN VOL. MIXING RATIO
CC    WMOL1(K)=WMOL*RHOAIR*1.E-6
      GO TO 200
110   IF(JUNIT.NE.11) GO TO 120
C*****GIVEN NUMBER DENSITY (CM-3)
CC    WMOL1(K) = WMOL
      WMOL1(K)=WMOL/(RHOAIR*1.E-6)
      GO TO 200
120   CONTINUE
      IF(JUNIT.NE.12) GO TO 130
C*****GIVEN MASS MIXING RATIO (GM KG-1)
CC    WMOL1(K)= R*WMOL*1.0E-3*RHOAIR
      WMOL1(K)= R*WMOL*1.0E+3
      GO TO 200
130   CONTINUE
      IF(JUNIT.NE.13) GO TO 140
C*****GIVEN MASS DENSITY (GM M-3)
CC    WMOL1(K) = B*WMOL*1.0E-6
      WMOL1(K) = B*WMOL/RHOAIR
      GO TO 200
140   CONTINUE
      IF(JUNIT.NE.14) GO TO 150
C*****GIVEN  PARTIAL PRESSURE (MB)
CC    WMOL1(K)= ALOSMT*(WMOL/PZERO)*(TZERO/T)
      WTEM    = ALOSMT*(WMOL/PZERO)*(TZERO/T)
      WMOL1(K)=WTEM/(RHOAIR*1.E-6)
      GO TO 200
150   CONTINUE
      IF(JUNIT.GT.14) GO TO 299
200   CONTINUE
      RETURN
299   CONTINUE
      WRITE(IPR,951)JUNIT
  951 FORMAT(/,'   **** ERROR IN CONVERT ****, JUNIT = ',I5)
      STOP
      END
      SUBROUTINE WATVAP(P,T)
C*************************************************************
C
C        WRITTEN APR, 1985 TO ACCOMMODATE 'JCHAR' DEFINITIONS FOR
C        UNIFORM DATA INPUT -
C
C     JCHAR    JUNIT
C
C    " ",A       10    VOLUME MIXING RATIO (PPMV)
C        B       11    NUMBER DENSITY (CM-3)
C        C       12    MASS MIXING RATIO (GM(K)/KG(AIR))
C        D       13    MASS DENSITY (GM M-3)
C        E       14    PARTIAL PRESSURE (MB)
C        F       15    DEW POINT TEMP (TD IN T(K)) - H2O ONLY
C        G       16     "    "     "  (TD IN T(C)) - H2O ONLY
C        H       17    RELATIVE HUMIDITY (RH IN PERCENT) - H2O ONLY
C        I       18    AVAILABLE FOR USER DEFINITION
C        J       19    REQUEST DEFAULT TO SPECIFIED MODEL ATMOSPHERE
C
C     THIS SUBROUTINE COMPUTES THE WATERVAPOR NUMBER DENSITY (MOL CM-3)
C     GIVE HUMIDITY  # TD = DEW POINT TEMP(K,C), RH = RELATIVE
C     (PERCENT), PPH2O = WATER VAPOR PARTIAL PRESSURE (MB), DENH2O =
C     WATER VAPOR MASS DENSITY (GM M-3),AMSMIX = MASS MIXING RATIO
C     (GM/KG).
C                     THE FUNCTION DENSAT FOR THE SATURATION
C     WATER VAPOR DENSITY OVER WATER IS ACCURATE TO BETTER THAN 1
C     PERCENT FROM -50 TO +50 DEG C. (SEE THE LOWTRAN3 OR 5 REPORT)
C
C       'JUNIT' GOVERNS CHOICE OF UNITS -
C
C***********************************************************************
      COMMON /IFIL/IRD,IPR,IPU,NPR,IPR1
      COMMON /CARD1B/ JUNITP,JUNITT,JUNIT1(13),WMOL1(12),WAIR,JLOW
      COMMON /CONSTN/ PZERO,TZERO,AVOGAD,ALOSMT,GASCON,PLANK,BOLTZ,
     1    CLIGHT,ADCON,ALZERO,AVMWT,AIRMWT,AMWT(35)
      DATA C1/18.9766/,C2/-14.9595/,C3/-2.43882/
      DATA XLOSCH/2.6868E19/
      DENSAT(ATEMP) = ATEMP*B*EXP(C1+C2*ATEMP+C3*ATEMP**2)*1.0E-6
C*****
      RHOAIR = ALOSMT*(P/PZERO)*(TZERO/T)
      PSS = P/PZERO
      A = TZERO/T
      WAIR = XLOSCH * PSS * A
      B = AVOGAD/AMWT(1)
      R = AIRMWT/AMWT(1)
      JUNIT = JUNIT1(1)
      WMOL  = WMOL1(1)
      IF(JUNIT.NE.10) GO TO 110
C*****GIVEN VOL. MIXING RATIO
CC    WMOL1(1)=WMOL*RHOAIR*1.E-6
      WTEM =   WMOL*RHOAIR*1.E-6
      GO TO 200
110   IF(JUNIT.NE.11) GO TO 120
C*****GIVEN NUMBER DENSITY (CM-3)
      WMOL1(1) = WMOL/(RHOAIR*1.E-6)
      WTEM =   WMOL
      GO TO 200
120   CONTINUE
      IF(JUNIT.NE.12) GO TO 130
C*****GIVEN MASS MIXING RATIO (GM KG-1)
CC    WMOL1(1) = R*WMOL*1.0E-3*RHOAIR
      WTEM     = R*WMOL*1.0E-3*RHOAIR
      WMOL1(1) = R*WMOL*1.0E+3
      GO TO 200
130   CONTINUE
      IF(JUNIT.NE.13) GO TO 140
C*****GIVEN MASS DENSITY (GM M-3)
CC    WMOL1(1) = B*WMOL*1.0E-6
      WTEM     = B*WMOL*1.0E-6
      WMOL1(1) = B*WMOL /RHOAIR
      GO TO 200
140   CONTINUE
      IF(JUNIT.NE.14) GO TO 150
C*****GIVEN WATER VAPOR PARTIAL PRESSURE (MB)
CC    WMOL1(1) = ALOSMT*(WMOL/PZERO)*(TZERO/T)
      WTEM     = ALOSMT*(WMOL/PZERO)*(TZERO/T)
      WMOL1(1) = WTEM/(RHOAIR*1.E-6)
      GO TO 200
150   CONTINUE
      IF(JUNIT.NE.15) GO TO 160
C*****GIVEN DEWPOINT (DEG K)
      ATD = TZERO/(WMOL)
CC    WMOL1(1)= DENSAT(ATD)*(WMOL)/T
      WTEM    = DENSAT(ATD)*(WMOL)/T
      WMOL1(1) = WTEM/(RHOAIR*1.E-6)
      GO TO 200
160   CONTINUE
      IF(JUNIT.NE.16) GO TO 170
C*****GIVEN DEWPOINT (DEG C)
      ATD = TZERO/(TZERO+WMOL)
CC    WMOL1(1) = DENSAT(ATD)*(TZERO+WMOL)/T
      WTEM     = DENSAT(ATD)*(TZERO+WMOL)/T
      WMOL1(1) = WTEM/(RHOAIR*1.E-6)
      GO TO 200
170   CONTINUE
      IF(JUNIT.NE.17) GO TO 199
C*****GIVEN RELATIVE HUMIDITY (PERCENT)
C     DENNUM = DENSAT(A)*(WMOL/100.0)/(1.0-(1.0-WMOL/100.0)*DENSAT(A)/
C    1    RHOAIR)
CC    WMOL1(1) = DENSAT(A)*(WMOL/100.0)
      WTEM     = DENSAT(A)*(WMOL/100.0)
      WMOL1(1) = WTEM/(RHOAIR*1.E-6)
      GO TO 200
 199   WRITE(IPR,951)JUNIT
 951  FORMAT(/,'  **** ERROR IN WATVAP ****, JUNIT = ',I5)
      STOP'JUNIT'
  200 CONTINUE
      WMOL1(1)=2.989E-23 *WMOL1(1) *WAIR
      DENST = DENSAT(A)
      DENNUM = WTEM
C     RHP = 100.0*(DENNUM/DENST)*((RHOAIR-DENST)/(RHOAIR-DENNUM))
      RHP = 100.0*(DENNUM/DENST)
   12 FORMAT(   8X,'RH = ',F6.2)
      IF(RHP.LE.100.0) GO TO 230
      WRITE(IPR,10) RHP
   10 FORMAT(/,' ********WARNING (FROM WATVAP) # RELATIVE HUMIDTY = ',
     1    G10.3,' IS GREATER THAN 100 PERCENT')
  230 CONTINUE
      RETURN
      END
      BLOCK DATA ATMCON
C>    BLOCK DATA
C***********************************************************************
C     THIS SUBROUTINE INITIALIZES THE CONSTANTS  USED IN THE
C     PROGRAM. CONSTANTS RELATING TO THE ATMOSPHERIC PROFILES ARE STORED
C     IN BLOCK DATA MLATMB.
C***********************************************************************
      COMMON /CONSTN/ PZERO,TZERO,AVOGAD,ALOSMT,GASCON,PLANK,BOLTZ,
     1    CLIGHT,ADCON,ALZERO,AVMWT,AIRMWT,AMWT(35)
      DATA PZERO/1013.25/,TZERO/273.15/
      DATA AVOGAD/6.022045E+23/,ALOSMT/2.68675E+19/,
     1    GASCON/8.31441E+7/,PLANK/6.626176E-27/,BOLTZ/1.380662E-16/,
     2    CLIGHT/2.99792458E10/
C*****ALZERO IS THE MEAN LORENTZ HALFWIDTH AT PZERO AND 296.0 K.
C*****AVMWT IS THE MEAN MOLECULAR WEIGHT USED TO AUTOMATICALLY
C*****GENERATE THE FASCODE BOUNDARIES IN AUTLAY
      DATA ALZERO/0.1/,AVMWT/36.0/
      DATA AIRMWT/28.964/,AMWT/18.015,44.010,47.998,44.01,28.011,
     1    16.043,31.999,30.01,64.06,46.01,17.03,63.01,17.00,20.01,
     2    36.46,80.92,127.91,51.45,60.08,30.03,52.46,28.014,
     3    27.03, 50.49, 34.01, 26.03, 30.07, 34.00, 7*0./
      END
      SUBROUTINE STDMDL
C***********************************************************************
C     THIS SUBROUTINE LOADS ONE OF THE 6 STANDARD ATMOSPHERIC PROFILES
C     INTO COMMON/MODEL/ AND CALCULATES THE DENSITIES OF THE
C     VARIOUS ABSORBING GASES AND AEROSOLS
C***********************************************************************
      COMMON /IFIL/IRD,IPR,IPU,NPR,IPR1
      COMMON /CARD1/ MODEL,ITYPE,IEMSCT,M1,M2,M3,IM,NOPRNT,TBOUND,SALB
      COMMON /CARD2/ IHAZE,ISEASN,IVULCN,ICSTL,ICLD,IVSA,VIS,WSS,WHH,
     1    RAINRT
      COMMON /CARD3/ H1,H2,ANGLE,RANGE,BETA,RE,LEN
      COMMON /CARD4/ V1,V2,DV
       COMMON /MDATA/  Z(50),P(50),T(50),WH(50),WCO2(50),WO(50),
     X WN2O(50),WCO(50),WCH4(50),WO2(50),
     X CLD(50,7),RR(50,7)
      COMMON /MDATA1/ WNO(50),WSO2(50),WNO2(50),WNH3(50),WAIR(50)
      COMMON /CNSTNS/ PI,CA,DEG,GCAIR,BIGNUM,BIGEXP
      COMMON /CNTRL/ KMAX,M,IKMAX,NL,ML,IKLO,ISSGEO,IMULT
      COMMON/MODEL/   ZM(34),PM(34),TM(34),RFNDX(34),DENSTY(63,34),
     1 CLDAMT(34),RRAMT(34),EQLWC(34),HAZEC(34)
      COMMON RELHUM(34),HSTOR(34),ICH(4),VH(17),TX(63),W(63)
      COMMON             WPATH(68, 63),TBBY(68)
      COMMON ABSC(5,47),EXTC(5,47),ASYM(5,47),VX2(47),AWCCON(5)
C     XLOSCH = LOSCHMIDT'S NUMBER,MOLECULES CM-2,KM-1
      DATA PZERO /1013.25/,TZERO/273.15/,XLOSCH/2.6868E24/
C     RV GAS CONSTANT FOR WATER IN MB/(GM M-3 K)
C     CON CONVERTS WATER VAPOR FROM GM M-3 TO MOLECULES CM-2 KM-1
      DATA RV/4.6152E-3/,CON/3.3429E21/
C     CONSTANTS FOR INDEX OF REFRACTION, AFTER EDLEN, 1965
      DATA A0/83.42/,A1/185.08/,A2/4.11/,
     X     B1/1.140E5/,B2/6.24E4/,C0/43.49/,C1/1.70E4/
C
C     F(A) IS SATURATED WATER WAPOR DENSITY AT TEMP T,A=TZERO/T
      F(A)=EXP(18.9766-14.9595*A-2.43882*A*A)*A
C
C     CONJOE=(1/XLOSCH)*1.E5*1.E-6 WITH
C        1.E5 ARISING FROM CM TO KM CONVERSION AND
C        1.E-6  "       "  PPMV
C
      CONJOE = 3.7194E-21
C
C     H20 CONTINUUM IS STORED AT 296 K RHZERO IS AIR DENSITY AT 296 K
C     IN UNITS OF LOSCHMIDT'S
C
      RHZERO=(273.15/296.0)
C
C     LOAD ATMOSPHERE PROFILE INTO /MODEL/
      DO 25 I=1,ML
      PM(I)=P(I)
      TM(I)=T(I)
      PP=PM(I)
      TT=TM(I)
      PSS=PP/PZERO
      TSS=TZERO/TT
      F1=(PP/PZERO)/(TT/TZERO)
      F2=(PP/PZERO)*SQRT(TZERO/TT)
      WTEMP=WH(I)
C     SCALED H2O DENSITY
      IF (ZM(I).GT.2.0) GO TO 15
      TS = TZERO / TT
15    CONTINUE
C     UNIFORMALY MIXED GASES DENSITYS
C     ORIGINAL TRANSMITTANCE MODEL FOR CO2+ HAS BEEN REPLACED.
C     DENSTY(2,I)=F1*F2**0.75
C     UV OZONE
C     THE UNIT FOR O3 HAS BEEN CHANGED FROM G/M**3 TO PPMV.
      DENSTY(8,I)= CONJOE   *WAIR(I)    *WO(I)
C     IR OZONE
C     ORIGINAL TRANSMITTANCE MODEL HAS BEEN REPLACED.
C     DENSTY(3,I)= DENSTY(8,I)*F2**0.4
C     N2 CONTINUUM
      DENSTY(4,I)=0.781*F1*F2
C     SELF BROADENED WATER
      RHOAIR = F1
      RHOH2O = CON *WTEMP/XLOSCH
      RHOFRN = RHOAIR - RHOH2O
      DENSTY(5,I)= XLOSCH*RHOH2O**2/RHZERO
C     FOREIGN BROADENED
      DENSTY(10,I)= XLOSCH*RHOH2O*RHOFRN/RHZERO
C     MOLECULAR SCATTERING
      DENSTY(6,I) = F1
C     RELITIVE HUMIDITY WEIGHTED BY BOUNDRY LAYER AEROSOL (0 TO 2 KM)
C
C     LOG WEIGHTING OF REL HUMIDITY
C
      RELH = RELHUM(I)
      IF(RELHUM(I). GT.99.) RELH = 99.
      RHLOG = LOG(100. - RELH)
C     DENSTY(15,I)=RELHUM(I)*DENSTY(7,I)
      DENSTY(15,I)=RHLOG    *DENSTY(7,I)
C     DENSITY (9,I) TEMP DEP OF WATER SET IN GEO
      DENSTY(9,I)=0.
C     IF(ICH(1).GT.7) DENSTY(15,I)=RELHUM(I)*DENSTY(12,I)
      IF(ICH(1).GT.7) DENSTY(15,I)=RHLOG    *DENSTY(12,I)
C     HNO3 IN ATM * CM /KM
C     NEW PROFILE IS IN UNIT OF PART PER 10**6 BY VOLUME
C     DENSTY(11,I)= F1* HMIX(I)*1.0E-4
C     IF(MODEL.EQ.7) DENSTY(11,I)=F1*HSTOR(I)*1.0E-4
                     DENSTY(11,I)=F1*HSTOR(I)*1.0E-4
C
C      O2 TEMP DEP
C
      DT = TT  - 220.
      WO2D       = CONJOE   *WAIR(I)    *WO2(I)  * PSS
C
C     DT CAN BE NEGIVATIVE
C     EFFECTIVE DT CALCULATED IN TRANS
C
      DENSTY(1,I)  = WO2D * TT
      DENSTY(2,I)  = WO2D * DT * DT
      DENSTY(63,I) = WO2D
C
C   NEW  MICROWAVE TEMP  RAIN
C
      DENSTY(3,I) = 0.
      DENSTY(61,I)= 0.
      DENSTY(62,I)= 0.
      IF(RRAMT(I) .NE. 0.) THEN
           DENSTY(3,I) = RRAMT(I)**(.63)
           DENSTY(61,I)= DENSTY(3,I) * T(I)
           DENSTY(62,I)= 1.
      ENDIF
C
C       CIRRIUS CLOUD
       IF(ICLD.LT.18) DENSTY(16,I) = 0.
C  --- FOR H2O -----
      CONH2O=WH(I)  *.1
      DENSTY(17,I)=CONH2O*PSS**0.9810*TSS**( 0.3324)
      DENSTY(18,I)=CONH2O*PSS**1.1406*TSS**(-2.6343)
      DENSTY(19,I)=CONH2O*PSS**0.9834*TSS**(-2.5294)
      DENSTY(20,I)=CONH2O*PSS**1.0443*TSS**(-2.4359)
      DENSTY(21,I)=CONH2O*PSS**0.9681*TSS**(-1.9537)
      DENSTY(22,I)=CONH2O*PSS**0.9555*TSS**(-1.5378)
      DENSTY(23,I)=CONH2O*PSS**0.9362*TSS**(-1.6338)
      DENSTY(24,I)=CONH2O*PSS**0.9233*TSS**(-0.9398)
      DENSTY(25,I)=CONH2O*PSS**0.8658*TSS**(-0.1034)
      DENSTY(26,I)=CONH2O*PSS**0.8874*TSS**(-0.2576)
      DENSTY(27,I)=CONH2O*PSS**0.7982*TSS**( 0.0588)
      DENSTY(28,I)=CONH2O*PSS**0.8088*TSS**( 0.2816)
      DENSTY(29,I)=CONH2O*PSS**0.6642*TSS**( 0.2764)
      DENSTY(30,I)=CONH2O*PSS**0.6656*TSS**( 0.5061)
C  --- FOR O3
      CONO3 = CONJOE   *WAIR(I)    *WO(I)
      DENSTY(31,I)=CONO3 *PSS**0.4200*TSS**( 1.3909)
      DENSTY(32,I)=CONO3 *PSS**0.4221*TSS**( 0.7678)
      DENSTY(33,I)=CONO3 *PSS**0.3739*TSS**( 0.1225)
      DENSTY(34,I)=CONO3 *PSS**0.1770*TSS**( 0.9827)
      DENSTY(35,I)=CONO3 *PSS**0.3921*TSS**( 0.1942)
C  --- FOR CO2
      CONCO2= CONJOE   *WAIR(I)  *WCO2(I)
      DENSTY(36,I)=CONCO2*PSS**0.6705*TSS**(-2.2560)
      DENSTY(37,I)=CONCO2*PSS**0.7038*TSS**(-5.0768)
      DENSTY(38,I)=CONCO2*PSS**0.7258*TSS**(-1.6740)
      DENSTY(39,I)=CONCO2*PSS**0.6982*TSS**(-1.8107)
      DENSTY(40,I)=CONCO2*PSS**0.8867*TSS**(-0.5327)
      DENSTY(41,I)=CONCO2*PSS**0.7883*TSS**(-1.3244)
      DENSTY(42,I)=CONCO2*PSS**0.6899*TSS**(-0.8152)
      DENSTY(43,I)=CONCO2*PSS**0.6035*TSS**( 0.6026)
C  --- FOR CO
      CONCO = CONJOE   *WAIR(I)  *WCO (I)
      DENSTY(44,I)=CONCO *PSS**0.7589*TSS**( 0.6911)
      DENSTY(45,I)=CONCO *PSS**0.9267*TSS**( 0.1716)
C  --- FOR CH4
      CONCH4= CONJOE   *WAIR(I)  *WCH4(I)
      DENSTY(46,I)=CONCH4*PSS**0.7139*TSS**(-0.4185)
C  --- FOR N2O
      CONN2O= CONJOE   *WAIR(I)  *WN2O(I)
      DENSTY(47,I)=CONN2O*PSS**0.3783*TSS**( 0.9399)
      DENSTY(48,I)=CONN2O*PSS**0.7203*TSS**(-0.1836)
      DENSTY(49,I)=CONN2O*PSS**0.7764*TSS**( 1.1931)
C  --- FOR O2
      CONO2 = CONJOE   *WAIR(I)  *WO2 (I)
      DENSTY(50,I)=CONO2 *PSS**1.1879*TSS**( 2.9738)
      DENSTY(51,I)=CONO2 *PSS**0.9353*TSS**( 0.1936)
C  --- FOR NH3
      CONNH3= CONJOE   *WAIR(I)  *WNH3(I)
      DENSTY(52,I)=CONNH3*PSS**0.8023*TSS**(-0.9111)
      DENSTY(53,I)=CONNH3*PSS**0.6968*TSS**( 0.3377)
C  --- FOR NO
      CONNO = CONJOE   *WAIR(I)  *WNO (I)
      DENSTY(54,I)=CONNO *PSS**0.5265*TSS**(-0.4702)
C  --- FOR NO2
      CONNO2= CONJOE   *WAIR(I)  *WNO2(I)
      DENSTY(55,I)=CONNO2*PSS**0.3956*TSS**(-0.0545)
C  --- FOR SO2
      CONSO2= CONJOE   *WAIR(I)  *WSO2(I)
      DENSTY(56,I)=CONSO2*PSS**0.2943*TSS**( 1.2316)
      DENSTY(57,I)=CONSO2*PSS**0.2135*TSS**( 0.0733)
C***********************************************************************
C   HERZBERG CONTINUUM PRESSURE DEPENDENCE CALCULATION, SHARDANAND 1977
C      AND   YOSHINO ET AL 1988
C
C     OXYGEN
C
      DENSTY(58,I)=(1.+.83*F1)*CONO2
      DENSTY(59,I) = 0.
      DENSTY(60,I) = 0.
C***********************************************************************
C
C     RFNDX = REFRAXTIVITY 1-INDEX OF REFRACTION
C     FROM EDLEN, 1966
      PPW=RV*WTEMP*TT
      AVW=0.5*(V1+V2)
      RFNDX(I)=((A0+A1/(1.-(AVW/B1)**2) +A2/(1.0-(AVW/B2)**2))*
     X (PP/PZERO)*(TZERO+15.0)/TT-(C0-(AVW/C1)**2)*PPW/PZERO)*1.E-6
25    CONTINUE
      IF(NPR.EQ.1) GO TO 40
      WRITE(IPR,910)
      DO 30 I=1,ML
       WRITE(IPR,905) I,ZM(I),PM(I),TM(I),(DENSTY(K,I),K=4,6),RFNDX(I),
     X DENSTY(8,I),DENSTY(58,I)
30    CONTINUE
      WRITE (IPR,915)
      DO 35 I=1,ML
      WRITE(IPR,905) I,ZM(I),PM(I),TM(I),(DENSTY(K,I),K=10,11),
     X DENSTY(7,I),DENSTY(12,I),DENSTY(13,I),DENSTY(14,I),DENSTY(15,I),
     X DENSTY(16,I),RELHUM(I)
35    CONTINUE
      WRITE(IPR,920)
      DO 39 I = 1,ML
      WRITE(IPR,906)I,ZM(I),PM(I),TM(I),DENSTY(17,I),DENSTY(31,I),
     + DENSTY(36,I),DENSTY(44,I),DENSTY(46,I),DENSTY(47,I),
     + DENSTY(50,I),DENSTY(52,I),DENSTY(54,I),DENSTY(55,I),DENSTY(56,I)
   39 CONTINUE
40    CONTINUE
      RETURN
  905 FORMAT (I4,0PF9.2,F9.3,F7.1,1X,1P9E10.3)
  906 FORMAT (I4,0PF9.2,F9.3,F7.1,1X,1P11E9.2)
910   FORMAT('1',/,'  ATMOSPHERIC PROFILES',//,
     1 3X,'I',T10,'Z',T18,'P',T26,'T',
     2 T35,'N2',T44,'CNTMSLF',T52,'MOL SCAT',T65,'N-1', T73,
     3 'O3 (UV)',T82,'O2 (UV)',/,
     4 T9,'(KM)',T17,'(MB)',T25,'(K)',
     5 T40,'(MOL/CM2 KM)',T55,'(-)',T65,'(-)',T 70,
     6 '(ATM CM/KM)',T82,'(ATM CM/KM)',/)
915   FORMAT('1',/,'  ATMOSPHERIC PROFILES',//,
     1 3X,'I',T10,'Z',T18,'P',T26,'T',T33,'CNTMFRN',T45,'HNO3',
     2 T53,'AEROSOL 1',T63,'AEROSOL 2', T73,'AEROSOL 3',T83,
     3 'AEROSOL 4',T93,'AER1*RH',T103,'CIRRUS',T118,'RH'/,
     4 T9,'(KM)',T17,'(MB)',T25,'(K)',T31,'MOL/CM2 KM',T42,
     5 'ATM CM/KM',T54,'(-)',T64,'(-)',T74,'(-)',T84,'(-)',T94,
     6 '(-)',T104,'(-)',T113,'(PERCNT)',/)
  920 FORMAT('1',/,'  ATMOSPHERIC PROFILES',//,
     + '  (IF A MOLECULE HAS MORE THAN ONE BAND, THEN THE DATA FOR THE',
     + ' FIRST BAND ARE SHOWN.)'//
     1 '   I      Z       P       T      H2O      O3       CO2',
     2 '      CO       CH4      N2O      O2       NH3      NO ',
     3 '      NO2      SO2'/
     4 '         (KM)    (MB)    (K) G/CM**2/KM  (            ',
     5 '          ATM CM/KM                                   ',
     6 '                  )')
      END

      SUBROUTINE LAYCLD(K,CLDATZ,RRATZ,ICLD1,GNDALT,RAINRT)
C
C      THIS SUBROUTINE RESTRUCTURES THE ATMOSPHERIC PROFILE
C      TO PROFIDE FINER LAYERING WITHIN THE FIRST 6 KM.
C
C     ZMDL COMMON /MODEL/ FINAL ALTITUDE FOR LOWTRAN
C     ZK  EFFECTIVE CLOUD ALTITUDES
C     ZCLD CLOUD ALTITUDE ARRAY
C     ZDIF  ALT DIFF OF 2 LAYERS
C     ZDA COMMON /MDATA/ CLD AND RAIN INFO IN THIS COMMON
C
       COMMON /MDATA/  Z(50),P(50),T(50),WH(50),WCO2(50),WO(50),
     X WN2O(50),WCO(50),WCH4(50),WO2(50),
     X CLD(50,7),RR(50,7)
      COMMON /MDATA1/ WNO(50),WSO2(50),WNO2(50),WNH3(50),WAIR(50)
      COMMON/MODEL/ ZMDL(34),PM(34),TM(34),RFNDX(34),DENSTY(63,34),
     1 CLDAMT(34),RRAMT(34),EQLWC(34),HAZEC(34)
      DIMENSION ZCLD(16)
      DATA ZCLD/ 0.0,0.16,0.33,0.66,1.0,1.5,2.0,2.4,2.7,
     1 3.0,3.5,4.0,4.5,5.0,5.5,6.0/
      DATA CLDTP/6.0001/
      DATA DELZ /0.02/
      ICLD=ICLD1
      IF(ICLD .EQ. 0) RETURN
      IF(ICLD .GT. 11)RETURN
      ZK=ZMDL(K)-GNDALT
      IF(ZK.LT.0.) ZK=0.
      IF(ZMDL(K).GT.6.) ZK=ZMDL(K)
      IF(ICLD.GT.5 )  GO TO 15
CCC
CCC    ICLD  IS  1- 5 ONE OF 5 SPECIFIC CLOUD MODELS IS CHOSEN
CCC
      MC=ICLD
      MR=6
      GO TO 25
15    CONTINUE
CCC
CCC   ICLD  IS  6-10 ONE OF 5 SPECIFIC CLOUD/RAIN MODELS CHOSEN
CCC
      IF(ICLD .EQ. 6) MC=3
      IF(ICLD .EQ. 7 .OR. ICLD .EQ. 8) MC=5
      IF(ICLD .GT. 8) MC=1
      MR=ICLD-5
25    IF(  ZK.GT.CLDTP) GO TO 30
      CLDATZ=0.
      RRATZ=0.
      IF(ZK.LE.10.)RRATZ=RAINRT
      IF(MC.LT.1) GO TO 29
      DO 26 MK=1,15
      IF(  ZK.GE.ZCLD(MK+1)) GO TO 26
      IF(  ZK.LT.ZCLD(MK)) GO TO 26
      IF(ABS(  ZK-ZCLD(MK)).LT.DELZ) GO TO 27
      GO TO 28
27     CLDATZ=CLD(MK,MC)
       RRATZ=RR(MK,MR)
      GO TO 29
28    ZDIF=ZCLD(MK+1)-ZCLD(MK)
      IF(ZDIF.LT.DELZ) GO TO 27
      FAC=(ZCLD(MK+1)-  ZK)/ZDIF
      CLDATZ=CLD(MK+1,MC)+FAC*(CLD(MK,MC)-CLD(MK+1,MC))
      RRATZ=RR(MK+1,MR)+FAC*(RR(MK,MR)-RR(MK+1,MR))
      GO TO 29
26    CONTINUE
29    CLDAMT(K)=CLDATZ
      CLD(K,7)=CLDATZ
      RR(K,7)=RRATZ
      RRAMT(K)=RRATZ
      RETURN
30    CONTINUE
      CLDAMT(K)=0.0
      RRAMT(K)=0.0
      CLDATZ=0.0
      RRATZ=0.0
      RETURN
C100  CONTINUE
C     RETURN
      END SUBROUTINE LAYCLD

      SUBROUTINE LAYVSA(K,RH,AHAZE,IHA1)
C
C     RETURNS HAZE FOR VSA OPTION
C
      COMMON /CNTRL/ KMAX,M,IKMAX,NL,ML,IKLO,ISSGEO,IMULT
      COMMON/MODEL/    Z(34),PM(34),TM(34),RFNDX(34),DENSTY(63,34),
     1 CLDAMT(34),RRAMT(34),EQLWC(34),HAZEC(34)
      COMMON /CARD1/ MODEL,ITYPE,IEMSCT,M1,M2,M3,IM,NOPRNT,TBOUND,SALB
      COMMON /CARD2/ IHAZE,ISEASN,IVULCN,ICSTL,ICLD,IVSA,VIS,WSS,WHH,
     1    RAINRT
       COMMON /MDATA/ ZZ(50),P(50),T(50),WH(50),WCO2(50),WO(50),
     X WN2O(50),WCO(50),WCH4(50),WO2(50),
     X CLD(50,7),RR(50,7)
      COMMON /MDATA1/ WNO(50),WSO2(50),WNO2(50),WNH3(50),WAIR(50)
      COMMON /ZVSALY/ ZVSA(10),RHVSA(10),AHVSA(10),IHVSA(10)
      COMMON /IFIL/IRD,IPR,IPU,NPR,IPR1
C
      RH=0.
      AHAZE=0
      IHA1=0
C     HMXVSA=ZVSA(9)
      IF(MODEL.EQ.0.OR.MODEL.EQ.7) RETURN
      IF(K.GT.9) RETURN
      Z(K)=ZVSA(K)
      RH=RHVSA(K)
      AHAZE=AHVSA(K)
      IHA1=IHVSA(K)
      RETURN
      END SUBROUTINE LAYVSA

      FUNCTION   JOU(CHAR)
      COMMON /IFIL/ IRD,IPR,IPU,NOPR,NFHDRF
C
      CHARACTER*1 CHAR,HOLVEC(22)
      DIMENSION INDX1(22)
      DATA  HOLVEC
     X /'1','2','3','4','5','6','0','0','0','0',' ','A',
     X  'B','C','D','E','F','G','H','I','J','K'/
      DATA  INDX1
     X /  1,  2,  3,  4,  5,  6,  0,  0,  0,  0, 10, 10,
     X   11, 12, 13, 14, 15, 16, 17, 18, 19, 20/
C
       INDX=0
      DO 100 I=1,22
       IF (HOLVEC(I) .NE. CHAR) GO TO 100
       INDX=INDX1(I)
       GO TO 110
100   CONTINUE
110   IF (INDX .EQ. 0) THEN
        WRITE(IPR,910) CHAR
910     FORMAT('0 INVALID PARAMETER :',2X,A1)
        STOP ' JOU: BAD PARAM '
      END IF
920   FORMAT(5X,A1,I5)
      JOU=INDX
                    RETURN
      END Function Jou

      SUBROUTINE CHECK(V,IV,KEY)
C
C      UNITS CONVERSION FOR P AND T
C
C     V = P OR T     AND  IV =JUNITP(I.E. MB,ATM,TORR)
C                            =JUNITT(I.E. DEG K OR C)
C                            =JUNITR(I.E. KM,M,OR CM)
C
      DATA PMB/1013.25/,PTORR/760./,DEGK/273.15/
      IF(IV.LE.10) RETURN
      GO TO(100,200,300) KEY
C
C      PRESSURE CONVERSIONS
C
  100 IF(IV.EQ.11)GO TO 110
      IF(IV.EQ.12)GO TO 120
      STOP'CHECK(P)'
  110 V=V*PMB
      RETURN
  120 V=V*PMB/PTORR
      RETURN
C
C      TEMPERATURE COMVERSIONS
C
  200 IF(IV.GT.11)STOP'CHECK(T)'
      V=V+DEGK
      RETURN
C
C      RANGE CONVERSIONS
C
  300 IF(IV.EQ.11)GO TO 310
      IF(IV.EQ.12)GO TO 320
      STOP'CHECK(R)'
  310 V=V/1.E3
      RETURN
  320 V=V/1.E5
      RETURN
      END Subroutine Check

      SUBROUTINE VSANSM(K,AHAZE,IHA1)
      COMMON RELHUM(34),WHNO3(34),ICH(4),VH(17),TX(63),W(63)
      COMMON             WPATH(68, 63),TBBY(68)
      COMMON ABSC(5,47),EXTC(5,47),ASYM(5,47),VX2(47),AWCCON(5)
      COMMON /IFIL/IRD,IPR,IPU,NPR,IPR1
      COMMON /CNTRL/ KMAX,M,IKMAX,NL,ML,IKLO,ISSGEO,IMULT
      COMMON /CARD1/ MODEL,ITYPE,IEMSCT,M1,M2,M3,IM,NOPRNT,TBOUND,SALB
      COMMON /CARD1B/ JUNIT(15),WMOLI(12),WAIR1,JLOW
      COMMON /CARD2/ IHAZE,ISEASN,IVULCN,ICSTL,ICIR,IVSA,VIS,WSS,WHH,
     1    RAINRT
      COMMON /ZVSALY/ ZVSA(10),RHVSA(10),AHVSA(10),IHVSA(10)
      COMMON /NSINP/ ZMDL(40),PM(40),TM(40),WMDL(40,13)
C
      COMMON /MDATA/  Z(50),P(50),T(50),WH(50),WCO2(50),WO(50),
     X WN2O(50),WCO(50),WCH4(50),WO2(50),
     X CLD(50,7),RR(50,7)
      COMMON /MDATA1/ WNO(50),WSO2(50),WNO2(50),WNH3(50),WAIR(50)
      DIMENSION WMOL(13)
C
C     OUTPUT COMMON MDATA AND MDATA1
C
C
C     MODEL 7 CODEING
C     OLD LAYERS  AEROSOL RETURNED
C     NEW LAYERS P,T,DP,AEROSOL
C
C
C
      JML=ML
      J=1
      KN=K
110   IF(KN.GT.10)GO TO 140
      JL=J-1
      IF(JL.LT.1)JL=1
      JP=JL+1
      JLS = JL
      IF(ZVSA(KN).EQ.ZMDL  (JL))GO TO 140
      JLS = JP
      IF(ZVSA(KN).EQ.ZMDL  (JP))GO TO 140
      IF(ZVSA(KN).GT.ZMDL  (JL).AND.ZVSA(KN).LT.ZMDL  (JP))GO TO 115
      IF(J. GE. JML) GO TO 115
      J = J + 1
      GO TO 110
115   Z(K)=ZVSA(KN)
      DIF=ZMDL  (JP)-ZMDL  (JL)
      DZ=ZVSA(KN)-ZMDL  (JL)
      DLIN=DZ/DIF
      P(K)  = (PM(JP)-PM(JL))*DLIN+PM(JL)
      T(K)   =(TM(JP)-TM(JL))*DLIN+TM(JL)
      DO 120 KM = 1,13
      WMOL(KM)=(WMDL(JP,KM)-WMDL(JL,KM))*DLIN+WMDL(JL,KM)
120   CONTINUE
      IHA1  =IHVSA(KN)
      AHAZE  =AHVSA(KN)
      FAC=(ZVSA(KN)-ZMDL  (JL))/DIF
      IF(PM(JP).GT.0.0.AND.PM(JL).GT.0.) THEN
           P(K)  =PM(JL)*(PM(JP)/PM(JL))**FAC
      ENDIF
      IF(TM(JP).GT.0.0.AND.TM(JL).GT.0.) THEN
           T(K)   =TM(JL)*(TM(JP)/TM(JL))**FAC
      ENDIF
      DO 130 KM = 1,13
      IF(WMDL(JP,KM) .GT.0.0.AND.WMDL(JL,KM).GT.0.0) THEN
           WMOL(KM)=(WMDL(JL,KM)*(WMDL(JP,KM))/WMDL(JL,KM))**FAC
      ENDIF
130   CONTINUE
       WH(K)    = WMOL(1)
       WCO2(K)  = WMOL(2)
       WO(K)    = WMOL(3)
       WN2O(K)  = WMOL(4)
       WCO(K)   = WMOL(5)
       WCH4(K)  = WMOL(6)
       WO2(K)   = WMOL(7)
       WNO(K)   = WMOL(8)
       WSO2(K)  = WMOL(9)
       WNO2(K)  = WMOL(10)
       WNH3(K)  = WMOL(11)
       WHNO3(K) = WMOL(12)
       WAIR(K)  = WMOL(13)
      RETURN
140   CONTINUE
      J = JLS
      IF(K.GT.10) THEN
         J = K - 10 + JLOW
         IHA1  =0
         AHAZE  =0.
      ENDIF
      Z(K) = ZMDL(J)
      P(K)  =PM(J)
      T(K) = TM(J)
      DO 135 KM = 1,13
      WMOL(KM)= WMDL(J,KM)
135   CONTINUE
       WH(K)    = WMOL(1)
       WCO2(K)  = WMOL(2)
       WO(K)    = WMOL(3)
       WN2O(K)  = WMOL(4)
       WCO(K)   = WMOL(5)
       WCH4(K)  = WMOL(6)
       WO2(K)   = WMOL(7)
       WNO(K)   = WMOL(8)
       WSO2(K)  = WMOL(9)
       WNO2(K)  = WMOL(10)
       WNH3(K)  = WMOL(11)
       WHNO3(K) = WMOL(12)
       WAIR(K)  = WMOL(13)
      IF(KN.LE.9) IHA1  =IHVSA(KN)
      IF(KN.LE.9)AHAZE  =AHVSA(KN)
      RETURN
      END Subroutine VSANSM

      SUBROUTINE RDNSM
C
C     THIS SUBROUTINE READS MODEL 7 DATA WHEN ISVA EQ 1
C
      COMMON /IFIL/IRD,IPR,IPU,NPR,IPR1
      COMMON /CARD1/ MODEL,ITYPE,IEMSCT,M1,M2,M3,IM,NOPRNT,TBOUND,SALB
      COMMON /CARD1A/ M4,M5,M6,MDEF,IRD1,IRD2
      COMMON /CARD1B/ JUNIT(15),WMOL(12),WAIR1,JLOW
      COMMON /CARD2/ IHAZE,ISEASN,IVULCN,ICSTL,ICIR,IVSA,VIS,WSS,WHH,
     1    RAINRT
      COMMON /CNTRL/ KMAX,M,IKMAX,NL,ML,IKLO,ISSGEO,IMULT
      COMMON /NSINP/ ZMDL(40),P(40),T(40),WMDL(40,13)
      CHARACTER*1 JCHAR
      DIMENSION  JCHAR(15)
      IF(ML. GT. 24) THEN
         WRITE(IPR,900) ML
900      FORMAT('  ML = ',I5,'  GT 24 ML RESET TO 24')
         ML = 24
      ENDIF
      JLOW = 1
      DO 200   K=1,ML
      DO 10 KM = 1,15
      JCHAR(KM) = ' '
      IF(KM. GT. 12) GO TO 10
      WMOL(KM) = 0.
10    CONTINUE
      IRD0 = 1
      ICONV = 1
      IF((MODEL .GT. 0.) .AND. (MODEL .LT. 7)) IRD0 = 0
      IF((IRD0  .EQ. 1)  .AND. (IVSA.EQ.1)   ) THEN
           IRD0 = 0
           ICONV =0
      ENDIF
C
C        PARAMETERS - JCHAR = INPUT KEY (SEE BELOW)
C
C
C     ***  ROUTINE ALSO ACCEPTS VARIABLE UNITS ON PRESS AND TEMP
C
C          SEE INPUT KEY BELOW
C
C
C
C     FOR MOLECULAR SPECIES ONLY
C
C       JCHAR   JUNIT
C
C     " ",A      10    VOLUME MIXING RATIO (PPMV)
C         B      11    NUMBER DENSITY (CM-3)
C         C      12    MASS MIXING RATIO (GM(K)/KG(AIR))
C         D      13    MASS DENSITY (GM M-3)
C         E      14    PARTIAL PRESSURE (MB)
C         F      15    DEW POINT TEMP (TD IN T(K)) - H2O ONLY
C         G      16     "    "     "  (TD IN T(C)) - H2O ONLY
C         H      17    RELATIVE HUMIDITY (RH IN PERCENT) - H2O ONLY
C         I      18    AVAILABLE FOR USER DEFINITION
C        1-6    1-6    DEFAULT TO SPECIFIED MODEL ATMOSPHERE
C
C     ****************************************************************
C     ****************************************************************
C
C     ***** OTHER 'JCHAR' SPECIFICATIONS -
C
C       JCHAR   JUNIT
C
C      " ",A     10    PRESSURE IN (MB)
C          B     11       "     "  (ATM)
C          C     12       "     "  (TORR)
C         1-6   1-6    DEFAULT TO SPECIFIED MODEL ATMOSPHERE
C
C      " ",A     10    AMBIENT TEMPERATURE IN DEG(K)
C          B     11       "         "       "  " (C)
C          C     12       "         "       "  " (F)
C         1-6   1-6    DEFAULT TO SPECIFIED MODEL ATMOSPHERE
C
C     ***** DEFINITION OF "DEFAULT" CHOICES FOR PROFILE SELECTION *****
C
C      FOR THE USER WHO WISHES TO ENTER ONLY SELECTED ORIGINAL
C      VERTICAL PROFILES AND WANTS STANDARD ATMOSPHERE SPECIFICATIONS
C      FOR THE OTHERS, THE FOLLOWING OPTION IS AVAILABLE
C
C     *** JCHAR(P,T OR K) MUST = 1-6 (AS ABOVE)
C
C      FOR MOLECULES 8-35, ONLY US STD PROFILES ARE AVIALABLE
C      THEREFORE, WHEN  'JCHAR(K) = 1-5', JCHAR(K) WILL BE RESET TO 6
C
C
      READ(IRD,80)ZMDL(K),P(K),T(K),WMOL(1),WMOL(2),WMOL(3),
     X (JCHAR(KM),KM=1,15)
80    FORMAT ( F10.3,5E10.3,15A1)
       WRITE(IPR,81)ZMDL(K),P(K),T(K),WMOL(1),WMOL(2),WMOL(3),
     X (JCHAR(KM),KM=1,15)
81    FORMAT ( F10.3,1P5E10.3,10X,15A1)
      IF(ZMDL(K) .LE. 2.0)JLOW = K
      IF(IRD1 .EQ. 1) THEN
           READ(IRD,83)(WMOL(KM),KM=4,12)
83         FORMAT(8E10.3)
           WRITE(IPR,84)(WMOL(KM),KM=4,12)
84         FORMAT(1P8E10.3)
      ENDIF
C
C
C     AHAZE =  AEROSOL VISIBLE EXTINCTION COFF (KM-1)
C     AT A WAVELENGTH OF 0.55 MICROMETERS
C
C     EQLWCZ=LIQUID WATER CONTENT (PPMV) AT ALT Z
C            FOR AEROSOL, CLOUD OR FOG MODELS
C
C     RRATZ=RAIN RATE (MM/HR) AT ALT Z
C
C     IHA1 AEROSOL MODEL USED FOR SPECTRAL DEPENDENCE OF EXTINCTION
C
C     IVUL1 STRATOSPHERIC AERSOL MODEL USED FOR SPECTRAL DEPENDENCE
C     OF EXT AT Z
C
C     ICLD1 CLOUD MODEL USED FOR SPECTRAL DEPENDENCE OF EXT AT Z
C
C     ONLY ONE OF IHA1,ICLD1  OR IVUL1 IS ALLOWED
C     IHA1 NE 0 OTHERS IGNORED
C     IHA1 EQ 0 AND ICLD1 NE 0 USE ICLD1
C
C     IF AHAZE AND EQLWCZ ARE BOUTH ZERO
C        DEFAULT PROFILE ARE LOADED FROM IHA1,ICLD1,IVUL1
C     ISEA1 = AERSOL SEASON CONTROL FOR ALTITUDE Z
C
      IF(IRD2 .EQ. 1) THEN
           READ(IRD,82)    AHAZE,EQLWCZ,RRATZ,IHA1,ICLD1,IVUL1,ISEA1
           WRITE(IPR,82)    AHAZE,EQLWCZ,RRATZ,IHA1,ICLD1,IVUL1,ISEA1
82         FORMAT(10X,3F10.3,4I5)
      ENDIF
      DO 12 KM = 1,15
12    JUNIT(KM) = JOU(JCHAR(KM))
      IF(M1 .NE. 0) JUNIT(1) = M1
      IF(M1 .NE. 0) JUNIT(2) = M1
      CALL CHECK(P(K),JUNIT(1),1)
      CALL CHECK(T(K),JUNIT(2),2)
      CALL DEFALT(ZMDL(K),P(K),T(K))
      CALL CONVRT (P(K),T(K) )
      DO 20 KM = 1,12
20    WMDL(K,KM) = WMOL(KM)
      WMDL(K,13) = WAIR1
200   CONTINUE
      RETURN
      END

      SUBROUTINE DEFALT  (Z,P,T)
C
C     ******************************************************************
C
C     THIS SUBROUTINE LOADS ONE OF THE 6 BUILT IN ATMOSPHERIC PROFILES
C     FROM WHICH IT WILL INTERPOLATE "DEFAULT" VALUES FOR ALTITUDE "Z"
C
C
C      ***  THIS SUBROUTINE IS CALLED BY "RDUNIT" WHICH
C      ***  READS USER SUPPLIED INPUT PROFILES OR SINGLE VALUES
C      ***  UNDER "MODEL = 0     " SPECIFICATIONS
C
C      *** SEE DOCUMENTATION FOR CLARIFICATION ***
C
C     SUBROUTINE "DEFALT"IS TRIGGERRED WHENEVER ANY ONE OF
C     THE INPUT PARAMETERS JCHARP, JCART, (JCHAR(K),K=1,NMOL) IS = 1-6
C
C     FOR SIMPLICITY, ALL INTERPOLATIONS ARE DONE AT ONE TIME BECAUSE
C     THE LAGRANGE WEIGHTS (4PT), BASED ON (ALT-Z), REMAIN UNCHANGED
C
C                   JCHAR(K) FOR K<8 ALLOW MODEL-DEPENDENT CHOICES
C
C                   JCHAR=JUNIT
C
C                        1       CHOOSES TROPICAL
C                        2         "     MID-LATITUDE SUMMER
C                        3         "     MID-LATITUDE WINTER
C                        4         "     HIGH-LAT SUMMER
C                        5         "     HIGH-LAT WINTER
C                        6         "     US STANDARD
C
C
C    JUNIT(K) FOR K>7 CHOOSES FROM THE SINGLE TRACE CONSTITUENT
C        PROFILES, ALL APPRORIATE FOR THE US STD ATMOSPHERE
C
C     ***  NOTE ***  T<0 WILL ALSO PRINT OUT A MESSAGE INDICATING
C     ***  A POSSIBLE MISAPPLICATION OF TEMPERATURE UNITS, (K) VS (C)
C
C     ******************************************************************
      COMMON /IFIL/IRD,IPR,IPU,NPR,IPR1
      COMMON /CARD1B/ JUNITP,JUNITT,JUNIT(13),WMOL(12),WAIR,JLOW
      COMMON /MLATM / ALT(50),PMATM(50,6),TMATM(50,6),AMOL(50,8,6)
      COMMON /TRAC/ TRAC(50,21)
C
      DATA PZERO /1013.25/,TZERO/273.15/,XLOSCH/2.6868E19/
C
C     *** 4PT INTERPOLATION FUNCTION
C
      VAL(A1,A2,A3,A4,X1,X2,X3,X4)=A1*X1+A2*X2+A3*X3+A4*X4
C
C
      NMOL = 12
      ILOWER=0
      IUPPER=0
      IM50=50
      DO 15 IM=2,IM50
      I2=IM
      IF (ALT(IM).GE.Z) GO TO 20
   15 CONTINUE
      I2=IM50
   20 I1=I2-1
      I0=I2-2
      I3=I2+1
      IF(I0.LT.1) GO TO 25
      IF(I3.GT.IM50) GO TO 26
C
      GO TO 28
C
C     LOWER ENDPOINT CORRECTION
C
25    CONTINUE
      ILOWER=1
      I0=I1
      I1=I2
      I2=I3
      I3=I3+1
      GO TO 28
C
C     UPPER ENDPOINT CORRECTION
C
26    CONTINUE
      IUPPER=1
      IF(Z.GT.ALT(IM50))GO TO 29
      I3=I2
      I2=I1
      I1=I0
      I0=I1-1
      GO TO 28
C
C      UPPER ENDPOINT EXTRAPOLATION
C
29    CONTINUE
      Z0=ALT(I0)
      Z1=ALT(I1)
      Z2=ALT(I2)
      Z3=Z2+2.*(Z-Z2)
      IUPPER=2
      WRITE(IPR,80)Z
80    FORMAT(/,'   *** Z IS GREATER THAN 120 KM ***, Z = ',F10.3)
      STOP'DEFAULTZ'
C     I3=I2
C     GO TO 31
C
C     LAGRANGE CONTINUATION
C
28    CONTINUE
C
C      LAGRANGE COEF DETERMINATION
C
      Z1=ALT(I1)
      Z2=ALT(I2)
      Z0=ALT(I0)
      Z3=ALT(I3)
31    CONTINUE
      DEN1=(Z0-Z1)*(Z0-Z2)*(Z0-Z3)
      DEN2=(Z1-Z2)*(Z1-Z3)*(Z1-Z0)
      DEN3=(Z2-Z3)*(Z2-Z0)*(Z2-Z1)
      DEN4=(Z3-Z0)*(Z3-Z1)*(Z3-Z2)
      A1=((Z-Z1)*(Z-Z2)*(Z-Z3))/DEN1
      A2=((Z-Z2)*(Z-Z3)*(Z-Z0))/DEN2
      A3=((Z-Z3)*(Z-Z0)*(Z-Z1))/DEN3
      A4=((Z-Z0)*(Z-Z1)*(Z-Z2))/DEN4
C
C
C     TEST INPUT PARAMETERS (JUNIT'S) SEQUENTIALLY FOR TRIGGER
C      I.E.  JUNIT(P,T,K) = 1-6
C
      IF (JUNITP.GT.6) GO TO 35
      MATM=JUNITP
C     WRITE (IPR,60) Z,MATM
      X1=LOG(PMATM(I0,MATM))
      X2=LOG(PMATM(I1,MATM))
      X3=LOG(PMATM(I2,MATM))
      X4=LOG(PMATM(I3,MATM))
      IF(IUPPER.EQ.2)X4=X3+2*(X3-X2)
      P=VAL(A1,A2,A3,A4,X1,X2,X3,X4)
      P=EXP(P)
   35 IF (JUNITT.GT.6) GO TO 40
      MATM=JUNITT
C     WRITE (IPR,65) Z,MATM
      X1=TMATM(I0,MATM)
      X2=TMATM(I1,MATM)
      X3=TMATM(I2,MATM)
      X4=TMATM(I3,MATM)
      T=VAL(A1,A2,A3,A4,X1,X2,X3,X4)
  40  DO 55 K=1,NMOL
      IF (JUNIT(K).GT.6) GO TO 55
C
      IF (K.GT.7) GO TO 45
      MATM=JUNIT(K)
C
      X1=AMOL(I0,K,MATM)
      X2=AMOL(I1,K,MATM)
      X3=AMOL(I2,K,MATM)
      X4=AMOL(I3,K,MATM)
      GO TO 50
   45 ITR=K-7
      MATM=6
C
      X1=TRAC(I0,ITR)
      X2=TRAC(I1,ITR)
      X3=TRAC(I2,ITR)
      X4=TRAC(I3,ITR)
   50 WMOL(K)=VAL(A1,A2,A3,A4,X1,X2,X3,X4)
      JUNIT(K)=10
      GO TO 55
C  53 JUNIT(K)=10
C     WRITE(IPR,54)K
C  54 FORMAT('  **** INCONSISTENCY IN THE USER SPECIFICATION',
C    A ' , JUNIT = 9 AND WMOL(K) = 0 , K =',I2,/,
C    B '  ****   DENNUM(K) HAS BEEN SET TO 0, NOT DEFAULT VALUE')
   55 CONTINUE
      WMOL(12)   =WMOL(12)   *1.0E+3
C     THE UNIT FOR NEW PROFILE IS PPMV.
      RETURN
C100  CONTINUE
  110 FORMAT(/,'  *** FATAL INPUT ERROR ***',/,
     A '  DEFAULT SPECIFICATIONS EXCEED MODEL = 6',/,
     B  0PF10.2,' KM',1PE10.3,' MB',0PF10.3,' K',/,
     C (5(I5,1PE10.3)))
C     STOP'DEFAULT'
C
   60 FORMAT ('   DEFAULT PRESSURE AT Z=',F7.2,' KM FROM MODEL',I5)
   65 FORMAT ('   DEFAULT TEMPERATURE AT Z=',F7.2,' KM FROM MODEL',I5)
   70 FORMAT ('   DEFAULT,K =',I3,',',A10,',','AT Z=',F7.2,
     A ' KM FROM MODEL',I5)
      END Subroutine DEFALT

      SUBROUTINE AERPRF (I,  VIS,HAZE,IHAZE,     ISEASN,IVULCN,N)
C***********************************************************************
C     WILL COMPUTE DENSITY    PROFILES FOR AEROSOLS
C***********************************************************************
      COMMON/PRFD  /ZHT(34),HZ2K(34,5),FAWI50(34),FAWI23(34),SPSU50(34),
     1SPSU23(34),BASTFW(34),VUMOFW(34),HIVUFW(34),EXVUFW(34),BASTSS(34),
     2VUMOSS(34),HIVUSS(34),EXVUSS(34),UPNATM(34),VUTONO(34),
     3VUTOEX(34),EXUPAT(34)
      DIMENSION VS(5)
      DATA VS/50.,23.,10.,5.,2./
      HAZE=0.
      N=7
      IF (IHAZE.EQ.0) RETURN
      IF (ZHT(I).GT.2.0) GO TO 15
      DO 5 J=2,5
      IF (VIS.GE.VS(J)) GO TO 10
    5 CONTINUE
      J=5
   10 CONST=1./(1./VS(J)-1./VS(J-1))
      HAZE=CONST*( (HZ2K(I,J)-HZ2K(I,J-1))/VIS +
     1 HZ2K(I,J-1)/VS(J) - HZ2K(I,J )/VS(J-1) )
      IF(ZHT(I).GT.2.0) GO TO 15
      RETURN
   15 IF (ZHT(I).GT.10.) GO TO 35
      CONST=1./(1./23.-1./50.)
      IF (ISEASN.GT.1) GO TO 25
      IF (VIS.LE.23.) HAZI=SPSU23(I)
      IF (VIS.LE.23.) GO TO 200
      IF (ZHT(I).GT.4.0) GO TO 20
      HAZI=CONST*((SPSU23(I)-SPSU50(I))/VIS+SPSU50(I)/23.-SPSU23(I)/50.)
      GO TO 200
   20 HAZI=SPSU50(I)
      GO TO 200
   25 IF (VIS.LE.23.) HAZI=FAWI23(I)
      IF (VIS.LE.23.) GO TO 200
      IF (ZHT(I).GT.4.0) GO TO 30
      HAZI=CONST*((FAWI23(I)-FAWI50(I))/VIS+FAWI50(I)/23.-FAWI23(I)/50.)
      GO TO 200
   30 HAZI=FAWI50(I)
      GO TO 200
   35 IF (ZHT(I).GT.30.0) GO TO 75
      HAZI=BASTSS(I)
      IF (ISEASN.GT.1) GO TO 55
      IF (IVULCN.EQ.0) HAZI=BASTSS(I)
      IF (IVULCN.EQ.0) GO TO 200
      GO TO (40,45,50,50,45,45,50,52), IVULCN
   40 HAZI=BASTSS(I)
      GO TO 200
   45 HAZI=VUMOSS(I)
      GO TO 200
   50 HAZI=HIVUSS(I)
      GO TO 200
52    HAZI=EXVUSS(I)
      GO TO 200
   55 IF (IVULCN.EQ.0) HAZI=BASTFW(I)
      IF (IVULCN.EQ.0) GO TO 200
      GO TO (60,65,70,70,65,65,70,72), IVULCN
   60 HAZI=BASTFW(I)
      GO TO 200
   65 HAZI=VUMOFW(I)
      GO TO 200
   70 HAZI=HIVUFW(I)
      GO TO 200
72    HAZI=EXVUFW(I)
      GO TO 200
   75 N=14
      IF (IVULCN.GT.1) GO TO 80
      HAZI=UPNATM(I)
      GO TO 200
   80 HAZI=VUTONO(I)
200   IF(HAZI.GT.0) HAZE=HAZI
      RETURN
      END Subroutine AERPRF

      SUBROUTINE GEO(IERROR,BENDNG,MAXGEO)
C*********************************************************************
C     THIS SUBROUTINE SERVES AS AN INTERFACE BETWEEN THE MAIN
C     LOWTRAN7 PROGRAM 'LWTRN7' AND THE NEW SET OF SUBROUTINES,
C     INCLUDING 'GEOINP', 'REDUCE', 'FDBETA', 'EXPINT', 'FNDHMN',
C     'FINDSH', 'SCALHT', 'ANDEX', 'RADREF', 'RFPATH', 'FILL',
C     AND 'LAYER',  WHICH CALCULATE THE ABSORBER
C     AMOUNTS FOR A REFRACTED PATH THROUGH THE ATMOSPHERE.
C     THE INPUT PARAMETERS ITYPE, H1, H2, ANGLE, RANGE, BETA, AND LEN
C     ALL FUNCTION IN THE SAME WAY IN THE NEW ROUTINES AS IN THE OLD.
C*********************************************************************
C     *** IN COLM 73-76 MARK IMPROVED 32 BIT CONVERGANCE OF BETA
C     SUGESTED BY TONY WARRIC             MCDONNELL DUGLAS
C     AND  MAJ ROBERT G. HUGES            AFWAL/WEA
C***********************************************************************
      COMMON RELHUM(34),HSTOR(34),ICH(4),VH(17),TX(63),W(63)
      COMMON             WPATH(68, 63),TBBY(68)
      COMMON ABSC(5,47),EXTC(5,47),ASYM(5,47),VX2(47),AWCCON(5)
      COMMON /IFIL/IRD,IPR,IPU,NPR,IPR1
      COMMON /CARD1/ MODEL,ITYPE,IEMSCT,M1,M2,M3,IM,NOPRNT,TBOUND,SALB
      COMMON /CARD2/ IHAZE,ISEASN,IVULCN,ICSTL,ICLD,IVSA,VIS,WSS,WHH,
     1    RAINRT
      COMMON /CARD3/ H1,H2,ANGLE,RANGE,BETA,REE,LEN
      COMMON /CARD4/ V1,V2,DV
      COMMON /CNSTNS/ PI,CA,DEG,GCAIR,BIGNUM,BIGEXP
      COMMON /CNTRL/ KMAX,M,IKMAX,NL,ML,IKLO,ISSGEO,IMULT
      COMMON/MODEL/   ZM(34),PM(34),TM(34),RFNDX(34),DENSTY(63,34),
     1 CLDAMT(34),RRAMT(34),EQLWC(34),HAZEC(34)
      COMMON /PARMTR/ RE,DELTAS,ZMAX,IMAX,IMOD,IBMAX,IPATH
      COMMON /RFRPTH/ ZP(35),PP(35),TP(35),RFNDXP(35),SP(35),
     1    PPSUM(35),TPSUM(35),RHOPSM(35),DENP(63,35),AMTP(63,35)
      COMMON /SOLS/ AH1(68),ARH(68),
     X   WPATHS(68,63),PA(68),PR(68),ATHETA(35),ADBETA(35),LJ(69),JTURN,
     X ANGSUN,CSZEN(68)
      COMMON /PATH/ PL(68),QTHETA(68),ITEST,HI,HF,AHT(68)
      COMMON /RAIN/ RNPATH( 68),RRAMTK( 68)
      DIMENSION KMOL(17)
C*****KMOL(K) IS A POINTER USED TO REORDER THE AMOUNTS WHEN PRINTING
      DATA KMOL/1,2,3,11,8,5,9,10,4,6,7,12,13,14,16,15,17/
C*****INITIALIZE CONSTANTS AND CLEAR CUMULATIVE VARIABLES
C*****DELTAS IS THE NOMINAL PATH LENGTH INCRENMENT USED IN THE RAY TRACE
      DELTAS = 5.0
      JMAXST=1
      IERROR = 0
      RE = REE
      IMOD = ML
      IMAX = ML
C*****ZERO OUT CUMULATIVE VARIABLES
      DO 100 I=1,35
      LJ(I)=0
      SP(I)=0.0
      PPSUM(I) = 0.0
      TPSUM(I) = 0.0
      RHOPSM(I) = 0.0
      DO 100 K=1,KMAX
      AMTP(K,I) = 0.0
  100 CONTINUE
      ZMAX=ZM(IMAX)
      IF(ISSGEO.EQ.1) GO TO 200
      IF(ITYPE.GE.2)  GO TO 200
C*****HORIZONTAL PATH, MODEL EQ 1 TO 7:  INTERPOLATE PROFILE TO H1
      ZP(1)=H1
      IF(ML   .EQ.1)  THEN
          PP(1)=PM(1)
          TP(1)=TM(1)
          LJ(1)=1
          SP(1)=RANGE
          PL(1)=RANGE
      ELSE
      IF(MODEL.EQ.0)  GO TO 145
          DO 120 I=2,ML
          I2 = I
          IF(H1.LT.ZM(I))  GO TO 130
  120     CONTINUE
  130     CONTINUE
          I1 = I2-1
          FAC = (H1-ZM(I1))/(ZM(I2)-ZM(I1))
          CALL EXPINT(PP(1),PM(I1),PM(I2),FAC)
          TP(1) = TM(I1)+(TM(I2)-TM(I1))*FAC
          II1=I1
          IF(FAC.GT.0.5) II1=I2
          LJ(1)=II1
          SP(II1)=RANGE
          DO 140 K=1,KMAX
          CALL EXPINT(DENP(K,1),DENSTY(K,I1),DENSTY(K,I2),FAC)
  140     CONTINUE
      END IF
C*****CALCULATE ABSORBER AMOUNTS FOR A HORIZONTAL PATH
 145  WRITE(IPR,36)  H1,RANGE,MODEL
   36 FORMAT('0HORIZONTAL PATH AT ALTITUDE = ',F10.3,
     1   ' KM WITH RANGE = ',F10.3,' KM, MODEL = ',I3)
      IKMAX = 1
      IMMAX = 1
      IF(MODEL.EQ.0) TP(1)=TM(1)
      TBBY(1) = TP(1)
      DO 160 K=1,KMAX
      IF(ML.EQ.1)  DENP(K,1) = DENSTY(K,1)
      W(K) = DENP(K,1)*RANGE
      WPATH(1,K) = W(K)
  160 CONTINUE
      WTEM = (296.0-TP(1))/(296.0-260.0)
      IF(WTEM.LT.0.)WTEM=0.
      IF(WTEM.GT.1)WTEM=1.
      W(9)=W(5)*WTEM
      W(59) = W(8) * .269 *(TP(1)-273.15)
      W(60) = W(8) * .269 *(TP(1)-273.15)**2
      WPATH(1,9) = W(9)
      WPATH(1,59) = W(59)
      WPATH(1,60) = W(60)
      GO TO 320
  200 CONTINUE
C*****SLANT PATH SELECTED
C*****INTERPRET SLANT PATH PARAMETERS
      CALL GEOINP(H1,H2,ANGLE,RANGE,BETA,ITYPE,LEN,HMIN,PHI,IERROR)
      IF(IERROR.EQ.0) GO TO 210
      IF(ISSGEO.NE.1)WRITE(IPR,38)
   38 FORMAT('0GEO:  IERROR NE 0: END THIS CALCULATION AND SKIP TO'
     1    ,' THE NEXT CASE')
      RETURN
  210 CONTINUE
C*****CALCULATE THE PATH THROUGH THE ATMOSPHERE
      IAMT = 1
      CALL RFPATH(H1,H2,ANGLE,PHI,LEN,HMIN,IAMT,BETA,RANGE,BENDNG)
C*****UNFOLD LAYER AMOUNTS IN AMTP INTO THE CUMULATIVE
C*****AMOUNTS IN WPATH FROM H1 TO H2
      DO 220 I=1,IPATH
      IF(H1.EQ.ZP(I)) IH1 = I
      IF(H2.EQ.ZP(I)) IH2 = I
  220 CONTINUE
      JMAX = (IPATH-1)+LEN*(MIN0(IH1,IH2)-1)
      IKMAX = JMAX
C*****DETERMINE LJ(J), WHICH IS THE NUMBER OF THE LAYER IN AMTP(K,L),
C*****STARTING FROM HMIN, WHICH CORRESPONDS TO THE LAYER J IN
C*****WPATH(J,K), STARTING FROM H1
C*****INITIAL DIRECTION OF PATH IS DOWN
      L = IH1
      LDEL = -1
      IF(LEN.EQ.1 .OR. H1.GT.H2)  GO TO 230
C*****INITIAL DIRECTION OF PATH IS UP
      L = 0
      LDEL = 1
  230 CONTINUE
      JTURN = 0
      JMAXP1=JMAX+1
      DO 250 J=1,JMAXP1
C*****TEST FOR REVERSING DIRECTION OF PATH FROM DOWN TO UP
      IF(L.NE.1 .OR. LDEL.NE.-1)  GO TO 240
      JTURN = J
      L = 0
      LDEL = +1
  240 CONTINUE
      L = L+LDEL
      LJ(J) = L
  250 CONTINUE
C*****LOAD TBBY AND WPATH
C*****TBBY IS DENSITY WEIGHTED MEAN TEMPERATURE
      AMTTOT=0.
      DO 255 K=1,KMAX
  255 WPATH(1,K) = 0.0
      IMAX = 0
      DO 265 J=1,JMAX
      L = LJ(J)
      IF(L.GE.ML)L = ML
      IF(L.GE.IMAX) IMAX = L
      TBBY(J) = TPSUM (L)/RHOPSM(L)
      AMTTOT=AMTTOT+RHOPSM(L)
      J1 = J-1
      IF(J1.EQ.0)  J1 = 1
      DO 260 K=1,KMAX
      IF(K.EQ.9) GO TO 260
      WPATH(J,K) = WPATH(J1,K)+AMTP(K,L)
  260 CONTINUE
      WPATH(J,59) = WPATH(J1,59)+AMTP(8,L)*.269*(TBBY(J)-273.15)
      WPATH(J,60) = WPATH(J1,60)+AMTP(8,L)*.269*(TBBY(J)-273.15) **2
      WTEM = (296.0-TBBY(J))/(296.0-260.0)
      IF(WTEM.LT.0.0) WTEM = 0.
      IF(WTEM.GT.1.0) WTEM = 1.0
      WPATH(J,9) = WPATH(J1,9)+WTEM*AMTP(5,L)
265   CONTINUE
      DO 270 K=1,KMAX
      W(K) = WPATH(JMAX,K)
  270 CONTINUE
      JMAXST=JMAX
CC    JMAX = IMAX
      IMMAX = IMAX
      IKMAX=JMAX
C*****INCLUDE BOUNDARY EMISSION IF:
C*****    1. NON ZERO TBOUND IS READ IN ON CARD 1
C*****    2. SLANT PATH INTERSECTS THE EARTH (TBOUND
C*****       SET TO TEMPERATURE OF LOWEST BOUNDARY)
      IF(TBOUND.EQ.0.0.AND.H2.EQ.ZM(1)) TBOUND=TM(1)
C*****PRINT CUMULATIVE ABSORBER AMOUNTS
      IF(NPR.EQ.1) GO TO 315
      WRITE(IPR,42)
   42 FORMAT(////,' CUMULATIVE ABSORBER AMOUNTS FOR THE PATH FROM'
     1    ,' H1 TO Z',//,T3,'J',T9,'Z',T18,'TBAR',T27,
     2    'HNO3', T39,'O3 UV',T50,'CNTMSLF1 ',
     +    T061,'CNTMSLF2',T73,'CNTMFRN',
     +    T86,'O2',
     3              /,T8,'(KM)',T19,'(K)',T25,
     4        '(ATM CM)',T37,'(ATM CM)',
     5    T49,'(MOL CM-2)',T61,'(MOL CM-2)',T73,'(MOL CM-2)',
     +    T83,'(MOL CM-2)'/)
C*****GOING DOWN, LP = 0,    GOING UP, LP = 1
      LP = 1
      IF(LEN.EQ.1 .OR. H1.GT.H2)  LP = 0
      AHT(1) = H1
      DO 300 J=1,JMAX
      L = LJ(J)
      IF(J.EQ.JTURN)  LP = 1
      LZ = L+LP
      AHT(J+1) = ZP(LZ)
      IF(NPR.NE.1)WRITE(IPR,44)J,ZP(LZ),TBBY(J),(WPATH(J,KMOL(K)),K=
     X 4,8),WPATH(J,58)
   44 FORMAT(I3,F9.3, F9.2,1P8E12.3)
  300 CONTINUE
      IF(NPR.NE.1)WRITE(IPR,46)
   46 FORMAT(///,T3,'J',T09,'Z',T17,'N2 CONT',T28,'MOL SCAT',T43,
     1    'AER 1',T55,'AER 2',T67,'AER 3',T79,'AER 4',T091,'CIRRUS',/
     2    ,T8,'(KM)',/)
      LP = 1
      IF(LEN.EQ.1  .OR. H1.GT.H2) LP = 0
      DO 310 J=1,JMAX
      L = LJ(J)
      IF(J.EQ.JTURN) LP = 1
      LZ = L+LP
      IF(NPR.NE.1)WRITE(IPR,48) J,ZP(LZ),(WPATH(J,KMOL(K)),K=9,15)
   48 FORMAT(I3,F9.3,1P7E12.3)
  310 CONTINUE
C*****PRINT PATH SUMMARY
315   IF(ISSGEO.EQ.1) GO TO 320
      IF(NPR.NE.1)WRITE(IPR,47)
   47 FORMAT(///'   J    Z       H2O       O3        CO2       CO    ',
     +'    CH4       N2O       O2        NH3       NO        NO2   ',
     +'    SO2'/'      (KM)   (G/CM**2)  (                           ',
     +'                 ATM CM                                     ',
     +'        )'/)
      LP = 1
      IF(LEN.EQ.1  .OR. H1.GT.H2) LP = 0
      DO 312 J=1,JMAX
      L = LJ(J)
      IF(J.EQ.JTURN) LP = 1
      LZ = L+LP
      IF(NPR.NE.1)WRITE(IPR,49) J,ZP(LZ),WPATH(J,17),WPATH(J,31),
     + WPATH(J,36),WPATH(J,44),WPATH(J,46),WPATH(J,47),WPATH(J,50),
     + WPATH(J,52),WPATH(J,54),WPATH(J,55),WPATH(J,56)
  312 CONTINUE
   49 FORMAT(I4,F8.2,1P11E10.2)
      WRITE(IPR,40)H1,H2,ANGLE,RANGE,BETA,PHI,HMIN,BENDNG,LEN
   40 FORMAT(//,'0SUMMARY OF THE GEOMETRY CALCULATION',//,
     1 10X,'H1      = ',F10.3,' KM',/,10X,'H2      = ',F10.3,' KM',/,
     110X,'ANGLE   = ',F10.3,' DEG',/,10X,'RANGE   = ',F10.3,' KM',/,
     310X,'BETA    = ',F10.3,' DEG',/,10X,'PHI     = ',F10.3,' DEG',/,
     4 10X,'HMIN    = ',F10.3,' KM',/,10X,'BENDING = ',F10.3,' DEG',/,
     5 10X,'LEN     = ',I10)
  320 CONTINUE
C*****CALCULATE THE AEROSOL WEIGHTED MEAN RH
      IF(W(7).GT.0.0 .AND. ICH(1).LE.7)  W15   = W(15)/W(7)
      IF(W(12).GT.0.0 .AND. ICH(1).GT.7)  W15   = W(15)/W(12)
C
C     INVERSE OF LOG REL HUM
C
      IF(W(7).GT.0.0 .AND. ICH(1).LE.7)  THEN
           W(15) = 100. - EXP(W15)
      ENDIF
      IF(W(12).GT.0.0 .AND. ICH(1).GT.7)  THEN
           W(15) = 100. - EXP(W15)
      ENDIF
      IF (W(7).LE.0.0 .AND. ICH(1).LE.7 )W(15) = 0.
      IF(W(12).LE.0.0 .AND. ICH(1).GT.7)  W(15) = 0.
C
C*****PRINT TOTAL PATH AMOUNTS
      IF(ISSGEO.EQ.1) RETURN
      WRITE(IPR,50)  (W(KMOL(K)),K=4,16)
   50 FORMAT(////,' EQUIVALENT SEA LEVEL TOTAL ABSORBER AMOUNTS',//,
     1    T18,'HNO3',T28,'O3 UV',
     2    T40,'CNTMSLF1',T52,'CNTMSLF2',T63,'CNTMFRN',/,
     3                   T16,'(ATM CM)',T27,'(ATM CM)',T40,
     4    '(MOL CM-2)',T52,'(MOL CM-2)',T64,'(MOL CM-2)',
     +    T76,'(MOL CM-2)',
     +    //,10X,1P5E12.3,///,
     5    T15,'N2 CONT',T26,'MOL SCAT',T41,'AER 1', T53,'AER 2',
     6    T65,'AER 3',T77, 'AER 4',T87,'CIRRUS',T99,'MEAN RH'/,
     7    T99,'(PRCNT)',//,10X,1P7E12.3,0PF12.2)
C
      WRITE(IPR,60) W(17),W(31),W(36),W(44),W(46),W(47),W(50),
     +              W(52),W(54),W(55),W(56)
   60 FORMAT(
     1 //T18,'H2O',T29,'O3',T41,'CO2',T53,'CO',T65,'CH4',T77,'N2O',
     +   T90,'O2',
     2  /T15,'(G/CM**2)',T29,'(',T57,'ATM CM',T91,')',//10X,1P7E12.3,
     3 //T18,'NH3',T29,'NO',T41,'NO2',T53,'SO2',/T18,'(',T34,'ATM CM',
     +   T55,')',
     4 //10X,1P4E12.3)
      IF(JMAXST .GT. MAXGEO) THEN
      WRITE(IPR,900)MAXGEO,JMAXST
 900  FORMAT(//'  CURRENT GEOMETRY DIMENSION ',I5 ,/
     X,' JMAXST = ',I5,' RESET AVTRAT TDIFF1 TDIFF2 TO 2. 10. 20.')
      STOP 'GEO :JMAXST .GT. MAXGEO'
      ENDIF
      DO 350 IK=1,JMAXST
      IL=LJ(IK)
      RNPATH(IK)=SP(IL)
      RRAMTK(IK)=RRAMT(IL)
350   CONTINUE
C
500   FORMAT(/10X,'ICH(1),W(15),W(7),W(12)=',I5,1P3E12.3/)
      RETURN
      END Subroutine GEO

      SUBROUTINE GEOINP(H1,H2,ANGLE,RANGE,BETA,ITYPE,LEN,HMIN,PHI,
     1    IERROR)
C***********************************************************************
C     GEOINP INTERPRETS THE ALLOWABLE COMBINATIONS OF INPUT PATH
C     PARAMETERS INTO THE STANDARD SET H1,H2,ANGLE,PHI,HMIN, AND LEN.
C     THE ALLOWABLE COMBINATIONS OF INPUT PARAMETERS ARE- FOR ITYPE = 2,
C     (SLANT PATH H1 TO H2) A. H1, H2, AND ANGLE, B. H1, ANGLE, AND
C     RANGE, C. H1, H2, AND RANGE, D. H1, H2, AND BETA -
C     FOR ITYPE = 3 (SLANT PATH H1 TO SPACE H2 = 100 KM),
C     A. H1 AND ANGLE, B. H1 AND HMIN (INPUT AS H2).
C     THE SUBROUTINE ALSO DETECTS BAD INPUT (IMPOSSIBLE GEOMETRY) AND
C     ITYPE = 2 CASES WHICH INTERSECT THE EARTH, AND RETURNS THESE
C     CASES WITH ERROR FLAGS.
C     THE SUBROUTINE FNDHMN IS CALLED TO CALCULATE HMIN, THE MINIMUM
C     HEIGHT ALONG THE PATH, AND PHI, THE ZENITH ANGLE AT H2, USING THE
C     ATMOSPHERIC PROFILE STORED IN /MODEL/
C***********************************************************************
      COMMON /IFIL/ IRD,IPR,IPU,NPR,IPR1
      COMMON /PARMTR/ RE,DELTAS,ZMAX,IMAX,IMOD,IBMAX,IPATH
      COMMON /CNSTNS/ PI,CA,DEG,GCAIR,BIGNUM,BIGEXP
      ITER = 0
      IF(ITYPE.NE.3) GO TO 120
C*****SLANT PATH TO SPACE
C*****NOTE: IF BOTH HMIN AND ANGLE ARE ZERO, THEN ANGLE IS
C*****ASSUMED SPECIFIED
      IF(H2.NE.0.0)  GO TO 110
C*****CASE 3A: H1,SPACE,ANGLE
      IF(NPR.NE.1)WRITE(IPR,10)
   10 FORMAT(//,' CASE 3A: GIVEN H1,H2=SPACE,ANGLE')
      H2 =  ZMAX
      CALL FNDHMN(H1,ANGLE,H2,LEN,ITER,HMIN,PHI,IERROR)
      IF(IERROR.EQ.-5) RETURN
      GO TO 200
  110 CONTINUE
C*****CASE 3B: H1,HMIN,SPACE
      IF(NPR.NE.1)WRITE(IPR,12)
   12 FORMAT(//,' CASE 3B: GIVEN H1, HMIN, H2=SPACE')
      HMIN = H2
      H2 = ZMAX
      IF(H1.LT.HMIN) GO TO 9001
      CALL FNDHMN(HMIN,90.0,H1,LEN,ITER,HMIN,ANGLE,IERROR)
      CALL FNDHMN(HMIN,90.0,H2,LEN,ITER,HMIN,PHI,IERROR)
      IF(HMIN.LT.H1) LEN = 1
      GO TO 200
  120 CONTINUE
      IF(ITYPE.NE.2) GO TO 9002
      IF(RANGE.NE.0.0.OR.BETA.NE.0.0) GO TO 130
C*****CASE 2A: H1, H2, ANGLE
      IF(NPR.NE.1)WRITE(IPR,16)
   16 FORMAT(//, ' CASE 2A: GIVEN H1, H2, ANGLE')
      IF(H1.GE.H2.AND.ANGLE.LE.90.0) GO TO 9004
      IF(H1.EQ.0.0 .AND. ANGLE.GT.90.0) GO TO 9007
      IF(H2.LT.H1.AND.ANGLE.GT.90.0.AND.NPR.NE.1) WRITE(IPR,15) LEN
   15 FORMAT(//,' EITHER A SHORT PATH (LEN=0) OR A LONG PATH ',
     1    'THROUGH A TANGENT HEIGHT (LEN=1) IS POSSIBLE: LEN = ',
     2    I3)
      H2ST = H2
      CALL FNDHMN(H1,ANGLE,H2,LEN,ITER,HMIN,PHI,IERROR)
      IF(H2.NE.H2ST)  GO TO 9007
      GO TO 200
  130 CONTINUE
      IF(BETA.EQ.0.0) GO TO 133
      CALL FDBETA(H1,H2,BETA,ANGLE,PHI,LEN,HMIN,IERROR)
      GO TO 200
  133 CONTINUE
      IF(ANGLE.EQ.0.0) GO TO 140
C*****CASE 2B: H1, ANGLE, RANGE
C*****ASSUME NO REFRACTION
      IF(NPR.NE.1)WRITE(IPR,18)
   18 FORMAT(//,' CASE 2B:, GIVEN H1, ANGLE, RANGE',//
     1    10X,'NOTE: H2 IS COMPUTED FROM H1, ANGLE, AND RANGE ',
     2    'ASSUMING NO REFRACTION')
      R1 = RE+H1
      R2 = SQRT(R1**2+RANGE**2+2.0*R1*RANGE*COS(+ANGLE/DEG))
      H2 = R2-RE
      IF(H2.GE.0.0)  GO TO 135
      H2 = 0.0
      R2 = RE+H2
      RANGE = -R1*COS(ANGLE/DEG)-SQRT(R2**2-R1**2*(SIN(ANGLE/DEG))**2)
      IF(NPR.NE.1)WRITE(IPR,17) RANGE
   17 FORMAT(//,10X,'CALCULATED H2 IS LESS THAN ZERO:',/,
     1    10X,'RESET H2 = 0.0 AND RANGE = ',F10.3)
  135 CONTINUE
C*****NOTE: GEOMETRIC PHI IS NEEDED TO DETERMINE LEN(0 OR 1).
C*****PHI IS THEN RECOMPUTED IN FNDHMN
      ZARG1=(R2**2+RANGE**2-R1**2)/(2.0*R2*RANGE)
      ERARG1=ABS(ZARG1)-1.0
      IF((ERARG1.GT.1.0E-6).OR.(ERARG1.LT.0.0)) GO TO 137
      IF (ZARG1.LT.0.0) GO TO 138
      ZARG1=1.0
      GO TO 137
  138 ZARG1=-1.0
  137 PHI = 180.0-ACOS(ZARG1)*DEG
      LEN = 0
      IF(ANGLE.GT.90.0.AND.PHI.GT.90.0) LEN = 1
      CALL FNDHMN(H1,ANGLE,H2,LEN,ITER,HMIN,PHI,IERROR)
      GO TO 200
  140 CONTINUE
C*****CASE 2C: H1, H2, RANGE
      IF(NPR.NE.1)WRITE(IPR,19)
   19 FORMAT(//,' CASE 2C: GIVEN H1, H2, RANGE',//,
     1    10X,'NOTE: ANGLE IS COMPUTED FROM H1, H2, AND RANGE ',
     2    'ASSUMING NO REFRACTION')
      IF(ABS(H1-H2).GT.RANGE) GO TO 9003
      R1 = H1+RE
      R2 = H2+RE
C%    PHI = 180.0-ACOS((R2**2+RANGE**2-R1**2)/(2.0*R2*RANGE))*DEG
      ZARG2=(R1**2+RANGE**2-R2**2)/(2.0*R1*RANGE)
      ERARG2=ABS(ZARG2)-1.0
      IF((ERARG2.GT.1.0E-6).OR.(ERARG2.LT.0.0)) GO TO 187
      IF (ZARG2.LT.0.0) GO TO 188
      ZARG2=1.0
      GO TO 187
  188 ZARG2=-1.0
  187 ANGLE = 180.0-ACOS(ZARG2)*DEG
      ZARG3=(R2**2+RANGE**2-R1**2)/(2.0*R2*RANGE)
      ERARG3=ABS(ZARG3)-1.0
      IF((ERARG3.GT.1.0E-6).OR.(ERARG3.LT.0.0)) GO TO 197
      IF (ZARG3.LT.0.0) GO TO 198
      ZARG3=1.0
      GO TO 197
  198 ZARG3=-1.0
  197 PHI = 180.0-ACOS(ZARG3)*DEG
      BETA = PHI +ANGLE -180.
C#    RANGE = 0.
      IF(RANGE .GT. 2.0  .AND. BETA .GT. 0)THEN
      CALL FDBETA(H1,H2,BETA,ANGLE,PHI,LEN,HMIN,IERROR)
      ELSE
CJ
      LEN = 0
      IF(ANGLE.GT.90.0.AND.PHI.GT.90.0) LEN = 1
      CALL FNDHMN(H1,ANGLE,H2,LEN,ITER,HMIN,PHI,IERROR)
      ENDIF
  200 CONTINUE
C*****TEST IERROR AND RECHECK LEN
      IF(IERROR.NE.0)  RETURN
      LEN = 0
      IF(HMIN.LT.AMIN1(H1,H2)) LEN = 1
C*****REDUCE PATH ENDPOINTS ABOVE ZMAX TO ZMAX
      IF(HMIN.GE.ZMAX) GO TO 9008
      IF(H1.GT.ZMAX .OR. H2.GT.ZMAX)  CALL REDUCE(H1,H2,ANGLE,PHI,ITER)
C*****AT THIS POINT THE FOLLOWING PARAMETERS ARE DEFINED:
C*****    H1,H2,ANGLE,PHI,HMIN,LEN
      IF(NPR.NE.1)WRITE(IPR,20)  H1,H2,ANGLE,PHI,HMIN,LEN
   20 FORMAT(///,' SLANT PATH PARAMETERS IN STANDARD FORM',//,
     1  10X,'H1      = ',F10.3,' KM',/,10X,'H2      = ',F10.3,' KM',/,
     2  10X,'ANGLE   = ',F10.3,' DEG',/,10X,'PHI     = ',F10.3,' DEG',/,
     3    10X,'HMIN    = ',F10.3,' KM',/,10X,'LEN     = ',I10)
      RETURN
C*****
C*****ERROR MESAGES
C*****
 9001 CONTINUE
      WRITE(IPR,40) H1,HMIN
   40 FORMAT('0GEOINP, CASE 3B (H1,HMIN,SPACE): ERROR IN INPUT DATA',
     1    //,10X,'H1 = ',F12.6,'    IS LESS THAN HMIN = ',F12.6)
      GO TO 9900
 9002 WRITE(IPR,42) ITYPE,ITYPE
   42 FORMAT('0GEOINP: ERROR IN INPUT DATA, ITYPE NOT EQUAL TO ',
     1    ' 2, OR 3.   ITYPE = ',I10,E23.14)
      GO TO 9900
 9003 WRITE(IPR,43) H1,H2,RANGE
   43 FORMAT('0GEOINP, CASE 2C (H1,H2,RANGE): ERROR IN INPUT DATA',//,
     110X,'ABS(H1-H2) GT RANGE;  H1 = ',F12.6,'    H2 = ',F12.6,
     2    '    RANGE = ',F12.6)
      GO TO 9900
 9004 CONTINUE
      WRITE(IPR,44)  H1,H2,ANGLE
   44 FORMAT('0GEOINP, CASE 2A (H1,H2,ANGLE): ERROR IN INPUT DATA',
     1  //,10X,'H1 = ',F12.6,'    IS GREATER THAN OR EQUAL TO H2 = ',
     2    F12.6 ,/,10X,'AND ANGLE = ',F12.6,'    IS LESS THAN OR ',
     3    'EQUAL TO 90.0')
      GO TO 9900
 9007 WRITE(IPR,48)
   48 FORMAT('0GEOINP, ITYPE = 2: SLANT PATH INTERSECTS THE EARTH',
     1    ' AND CANNOT REACH H2')
      GO TO 9900
 9008 WRITE(IPR,50) ZMAX,H1,H2,HMIN
   50 FORMAT(' GEOINP-  THE ENTIRE PATH LIES ABOVE THE TOP ZMAX ',
     1    'OF THE ATMOSPHERIC PROFILE',//,10X,'ZMAX = ',G12.6,5X,
     2    '  H1 = ',G12.6,5X,'  H2 = ',G12.6,'  HMIN = ',G12.6)
 9900 IERROR = 1
      RETURN
      END Subroutine GEOINP

      SUBROUTINE REDUCE(H1,H2,ANGLE,PHI,ITER)
C***********************************************************************
C     ZMAX IS THE HIGHEST LEVEL IN THE ATMOSPHERIC PROFILE STORED IN
C     COMMON /MODEL/.  IF H1 AND/OR H2 ARE GREATER THAN ZMAX, THIS
C     SUBROUTINE REDUCES THEM TO ZMAX AND RESETS ANGLE AND/OR PHI
C     AS NECESSARY. THIS REDUCTION IS NECESSARY,FOR EXAMPLE FOR
C     SATELLITE ALTITUDES, BECAUSE (1) THE DENSITY PROFILES ARE
C     POORLY DEFINED ABOVE ZMAX AND (2) THE CALCULATION TIME FOR
C     PATHS ABOVE ZMAX CAN BE EXCESSIVE ( EG. FOR GEOSYNCHRONOUS
C     ALTITUDES)
C***********************************************************************
      COMMON /IFIL/ IRD,IPR,IPU,NPR,IPR1
      COMMON /PARMTR/ RE,DELTAS,ZMAX,IMAX,IMOD,IBMAX,IPATH
      COMMON /CNSTNS/ PI,CA,DEG,GCAIR,BIGNUM,BIGEXP
      IF(H1.LE.ZMAX .AND. H2.LE.ZMAX)  RETURN
      CALL FINDSH(H1,SH,GAMMA)
      CPATH = ANDEX(H1,SH,GAMMA)*(RE+H1)*SIN(ANGLE/DEG)
      CALL FINDSH(ZMAX,SH,GAMMA)
      CZMAX = ANDEX(ZMAX,SH,GAMMA)*(RE+ZMAX)
      ANGMAX = 180.0-ASIN(CPATH/CZMAX)*DEG
      IF(H1.LE.ZMAX) GO TO 120
      H1 = ZMAX
      ANGLE = ANGMAX
  120 CONTINUE
      IF(H2.LE.ZMAX)  GO TO 130
      H2 = ZMAX
      PHI = ANGMAX
  130 CONTINUE
       WRITE(IPR,20) ZMAX,ANGMAX
   20 FORMAT(///,' FROM SUBROUTINE REDUCE: ',/,
     1   4X,'ONE OR BOTH OF H1 AND H2 ARE ABOVE THE TOP OF THE ',
     2   'ATMOSPHERIC PROFILE ZMAX = ',F10.3,' AND HAVE BEEN RESET ',
     3   'TO ZMAX',/,4X,'ANGLE AND/OR PHI HAVE ALSO BEEN RESET TO ',
     4    'THE ZENITH ANGLE AT ZMAX = ',F10.3,' DEG')
  200 CONTINUE
      RETURN
      END Subroutine REDUCE

      SUBROUTINE FDBETA(H1,H2,BETAS,ANGLE,PHI,LEN,HMIN,IERROR)
C**********************************************************************
C     GIVEN H1,H2,AND BETA (THE EARTH CENTERED ANGLE) THIS SUBROUTINE
C     CALCULATES THE INITIAL ZENITH ANGLE AT H1 THROUGH AN ITERATIVE
C     PROCEDURE
C**********************************************************************
      COMMON /IFIL/ IRD,IPR,IPU,NPR,IPR1
      COMMON /PARMTR/ RE,DELTAS,ZMAX,IMAX,IMOD,IBMAX,IPATH
      COMMON /CNSTNS/ PI,CA,DEG,GCAIR,BIGNUM,BIGEXP
      DOUBLE PRECISION RA,RB,SG,ANGLE1,ANGLE2,BETA,DBETA
C     DATA TOLRNC/1.0E-4/,ITERMX/10/,BETD /0.02/
      DATA TOLRNC/5.0E-3/,ITERMX/10/,BETD /0.04/
      DATA ZER /0./
      BETA = BETAS
      IFLAG = 0
      IF(H1.GT.H2) GO TO 100
      IORDER = 1
      HA = H1
      HB = H2
      GO TO 120
  100 CONTINUE
      IORDER = -1
      HA = H2
      HB = H1
  120 CONTINUE
C*****SET PARAMETER TO SUPRESS CALCULATION OF AMOUNTS
      IAMTB = 2
C*****GUESS AT ANGLE, INTEGRATE TO FIND BETA, TEST FOR
C*****CONVERGENCE, AND ITERATE
C*****FIRST GUESS AT ANGLE: USE THE GEOMETRIC SOLUTION(NO REFRACTION)
      WRITE(IPR,24)
   24 FORMAT(///,' CASE 2D: GIVEN H1, H2,  BETA:',//,
     1    ' ITERATE AROUND ANGLE UNTIL BETA CONVERGES',//,
     2    ' ITER    ANGLE',T21,'BETA',T30,'DBETA',T40,'RANGE',
     3    T51,'HMIN',T61,'PHI',T70,'BENDING',/,
     4    T10,'(DEG)',T21,'(DEG)',T30,'(DEG)',T41,'(KM)',
     5    T51,'(KM)',T60,'(DEG)',T71,'(DEG)',/)
      ITER = 0
      RA = RE+HA
      RB = RE+HB
      SG = SQRT(RA**2+RB**2-2.0*RA*RB*COS(BETA/DEG))
      ANGLE1 = 180.0-ACOS((RA**2+SG**2-RB**2)/(2.0*RA*SG))*DEG
      HMIN = HA
      IF(ANGLE1.GT.90.0)  HMIN = RA*SIN(ANGLE1/DEG)-RE
      HMING = HMIN
      ANGLS1 = ANGLE1
      CALL FNDHMN(HA,ANGLS1,HB,LEN,ITER,HMIN,PHI,IERROR)
      LEN = 0
      IF(HMIN.LT.HA) LEN = 1
      CALL RFPATH(HA,HB,ANGLS1,PHI,LEN,HMIN,IAMTB,BETA1,RANGE,BENDNG)
      WRITE(IPR,26)  ITER,ANGLE1,BETA ,ZER  ,SG    ,HMING,ZER,ZER
C
C     OBTAIN DERIVATIVE
C
      SG = SQRT(RA**2+RB**2-2.0*RA*RB*COS((BETA+BETD)/DEG))
      ANGLEP = 180.0-ACOS((RA**2+SG**2-RB**2)/(2.0*RA*SG))*DEG
      DANG = ANGLE1 - ANGLEP
      IF(HMIN.GE.0.0) GO TO 310
      IFLAG = 1
      HMIN = 0.0
      CALL FNDHMN(HMIN,90.0,HA,LEN,ITER,HMIN,ANGLS1,IERROR)
  310 CONTINUE
      ITER = 1
      LEN = 0
      IF(ANGLE1.GT.90.0) LEN = 1
      CALL FNDHMN(HA,ANGLS1,HB,LEN,ITER,HMIN,PHI,IERROR)
      LEN = 0
      IF(HMIN.LT.HA) LEN = 1
      CALL RFPATH(HA,HB,ANGLS1,PHI,LEN,HMIN,IAMTB,BETA1,RANGE,BENDNG)
      DBETA = BETA-BETA1
      WRITE(IPR,26)  ITER,ANGLE1,BETA1,DBETA,RANGE,HMIN,PHI,BENDNG
   26 FORMAT(I5,3F10.4,2F10.3,2F10.4)
      IF(IFLAG.EQ.1 .AND. BETA1.LT.BETA) GO TO 9005
  320 CONTINUE
      ANGLEP = ANGLE1 -DANG
      LEN = 0
      IF(ANGLEP.GT.90.0) LEN = 1
      CALL FNDHMN(HA,ANGLEP,HB,LEN,ITER,HMIN,PHI,IERROR)
      LEN = 0
      IF(HMIN.LT.HA) LEN = 1
      CALL RFPATH(HA,HB,ANGLEP,PHI,LEN,HMIN,IAMTB,BETAP,RANGE,BENDNG)
      IF(ABS(BETA1-BETAP).LT.TOLRNC) GO TO 330
      ITER = ITER+1
      DC = BETAP - BETA1
C     DERIV = -DC/BETD
       ANGLE2 = ANGLE1+(ANGLE1-ANGLEP)*(BETA-BETA1)/(BETA1-BETAP)
      LEN = 0
      IF(ANGLE2.GT.90.0) LEN = 1
      ANGLS2 = ANGLE2
      CALL FNDHMN(HA,ANGLS2,HB,LEN,ITER,HMIN,PHI,IERROR)
      LEN = 0
      IF(HMIN.LT.HA) LEN = 1
      CALL RFPATH(HA,HB,ANGLS2,PHI,LEN,HMIN,IAMTB,BETA2,RANGE,BENDNG)
      DBETA = BETA-BETA2
      WRITE(IPR,26)  ITER,ANGLE2,BETA2,DBETA,RANGE,HMIN,PHI,BENDNG
      IF(BETA2.LT.BETA.AND.HMIN.LT.0.0) GO TO 9005
      ANGLE1 = ANGLE2
      ANGLS1 = ANGLE1
C
      BETA1 = BETA2
C     BETA2 = BETA3
      IF(ABS(BETA-BETA2).LT.TOLRNC) GO TO 340
      IF(ITER.GT.ITERMX) GO TO 9006
      GO TO 320
  330 ANGLE2 = ANGLEP
      ANGLS2 = ANGLE2
      BETA = BETAP
  340 CONTINUE
      IF(HMIN.LT.0.0) GO TO 9005
C*****CONVERGED TO A SOLUTION
      ANGLE = ANGLE2
      BETA = BETA2
C*****ASSIGN ANGLE AND PHI TO PROPER H1 AND H2
      IF(IORDER.EQ.1) GO TO 350
      TEMP = PHI
      PHI = ANGLE
      ANGLE = TEMP
  350 CONTINUE
      BETAS = BETA
      RETURN
C*****
C*****ERROR MESSAGES
C*****
 9005 CONTINUE
      WRITE(IPR,45)
   45 FORMAT('0FDBETA, CASE 2D(H1,H2,BETA): REFRACTED TANGENT ',
     1    'HEIGHT IS LESS THAN ZERO-PATH INTERSECTS THE EARTH',
     2    //,10X,'BETA IS TOO LARGE FOR THIS H1 AND H2')
      GO TO 9900
 9006 CONTINUE
      WRITE(IPR,46) H1,H2,BETA,ITER,ANGLE1,BETA1,ANGLE2,BETA2
C    1    ANGLE3,BETA3
   46 FORMAT('0FDBETA, CASE 2D (H1,H2,BETA): SOLUTION DID NOT ',
     1    ' CONVERGE',//,10X,'H1 = ',F12.6,'    H2 = ',F12.6,
     2    '    BETA = ',F12.6,'    ITERATIONS = ',I4,//,
     3    10X,'LAST THREE ITERATIONS ',//,
     4    (10X,'ANGLE = ',F15.9,'    BETA = ',F15.9))
 9900 IERROR = 1
      RETURN
      END SUBROUTINE FDBETA

      SUBROUTINE FNDHMN(H1,ANGLE,H2,LEN,ITER,HMIN,PHI,IERROR)
C***********************************************************************
C     THIS SUBROUTINE CALCULATES THE MINIMUM ALTITUDE HMIN ALONG
C     THE REFRACTED PATH AND THE FINAL ZENITH ANGLE PHI.
C     THE PARAMETER LEN INDICATES WHETHER THE PATH GOES THROUGH
C     A TANGENT HEIGHT (LEN=1) OR NOT (LEN=0).  IF ANGLE > 90 AND
C     H1 > H2, THEN LEN CAN EITHER BE 1 OR 0, AND THE CHOICE IS
C     LEFT TO THE USER.
C     THE (INDEX OF REFRACTION - 1.0) IS MODELED AS AN EXPONENTIAL
C     BETWEEN THE LAYER BOUNDARIES, WITH A SCALE HEIGHT SH AND AN
C     AMOUNT AT THE GROUND GAMMA.
C     CPATH IS THE REFRACTIVE CONSTANT FOR THIS PATH AND
C     EQUALS  INDEX(H1)*(RE+H1)*SIN(ANGLE).
C***********************************************************************
      COMMON /IFIL/ IRD,IPR,IPU,NPR,IPR1
      COMMON /PARMTR/ RE,DELTAS,ZMAX,IMAX,IMOD,IBMAX,IPATH
      COMMON /CNSTNS/ PI,CA,DEG,GCAIR,BIGNUM,BIGEXP
      COMMON /CNTRL/ KMAX,M,IKMAX,NL,ML,IKLO,ISSGEO,IMULT
      DATA DH/1.0/,ETA/5.0E-8/
C*****ETA MAY BE TOO SMALL FOR SOME COMPUTERS. TRY 1.0E-7 FOR 32 BIT
C*****WORD MACHINES
C     CRFRCT IS REFRACTIVE CONSTANT FOR THE PATH
C
      CRFRCT(H) = (RE+H)*ANDEX(H,SH,GAMMA)
      N = 0
      CALL FINDSH(H1,SH,GAMMA)
      CPATH = CRFRCT(H1)*SIN(ANGLE/DEG)
      CALL FINDSH(H2,SH,GAMMA)
      CH2 = CRFRCT(H2)
      IF(ABS(CPATH/CH2).GT.1.0) GO TO 200
      IF(ANGLE.GT.90.0)  GO TO 100
      LEN = 0
      HMIN = H1
      GO TO 160
  100 CONTINUE
      IF(H1.LE.H2)  LEN = 1
      IF(LEN.EQ.1)  GO TO 110
      LEN = 0
      HMIN = H2
      GO TO 160
  110 CONTINUE
C*****LONG PATH THROUGH A TANGENT HEIGHT.
C*****SOLVE ITERATIVELY FOR THE TANGENT HEIGHT HT.
C*****HT IS THE HEIGHT FOR WHICH  INDEX(HT)*(RE+HT) = CPATH.
      CALL FINDSH(0.0,SH,GAMMA)
      CMIN = CRFRCT(0.0)
C*****FOR BETA CASES (ITER>0), ALLOW FOR HT < 0.0
      IF(ITER.EQ.0 .AND. CPATH.LT.CMIN)  GO TO 150
      HT1 = (RE+H1)*SIN(ANGLE/DEG)-RE
      CALL FINDSH(HT1,SH,GAMMA)
      CT1 = CRFRCT(HT1)
      HT2 = HT1-DH
      CALL FINDSH(HT2,SH,GAMMA)
      CT2 = CRFRCT(HT2)
C*****ITERATE TO FIND HT
      N = 2
  120 CONTINUE
      IF(CT2 .EQ. CT1) GO TO 125
      N = N+1
      HT3 = HT2+(HT2-HT1)*(CPATH-CT2)/(CT2-CT1)
      CALL FINDSH(HT3,SH,GAMMA)
      CT3 = CRFRCT(HT3)
      DC = CPATH-CT3
      IF(ABS((CPATH-CT3)/CPATH).LT.ETA)  GO TO 130
      IF(N.GT.15) GO TO 210
      HT1 = HT2
      CT1 = CT2
      HT2 = HT3
      CT2 = CT3
      GO TO 120
  125 HT3 = HT2
  130 CONTINUE
      HT = HT3
      HMIN = HT
      GO TO 160
  150 CONTINUE
      IF(ISSGEO.EQ.0) GO TO 155
      IERROR=-5.
      RETURN
155   CONTINUE
C*****TANGENT PATH INTERSECTS EARTH
      H2 = 0.0
      HMIN = 0.0
      LEN = 0
      CH2 = CMIN
      IF(ISSGEO.NE.1)WRITE(IPR,22) H1,ANGLE
   22 FORMAT(///,' TANGENT PATH WITH H1 = ',F10.3,' AND ANGLE = ',
     1    F10.3,' INTERSECTS THE EARTH',//,10X,'H2 HAS BEEN RESET ',
     2    'TO 0.0 AND LEN TO 0')
  160 CONTINUE
C*****CALCULATE THE ZENITH ANGLE PHI AT H2
      PHI = ASIN(CPATH/CH2)*DEG
      IF(ANGLE.LE.90.0 .OR. LEN.EQ.1)  PHI = 180.0-PHI
      RETURN
C*****H2 LT TANGENT HEIGHT FOR THIS H1 AND ANGLE
  200 CONTINUE
      WRITE(IPR,20)
   20 FORMAT('0H2 IS LESS THAN THE TANGENT HEIGHT FOR THIS PATH ',
     1    'AND CANNOT BE REACHED')
      IERROR = 2
      RETURN
  210 CONTINUE
      DC = CPATH-CT3
      WRITE(IPR,24)  N,CPATH,CT3,DC,HT3
   24 FORMAT(///,'0FROM SUBROUTINE FNDHMN :',//,
     1    10X,'THE PROCEEDURE TO FIND THE TANGENT HEIGHT DID NOT ',
     2    'CONVERG AFTER ',I3,'  ITERATIONS',//,
     3    10X,'CPATH   = ',F12.5,' KM',//,10X,'CT3     = ',F12.5,' KM',
     4    //,10X,'DC      = ',E12.3,' KM',//,
     5    10X,'HT3     = ',F12.5,' KM')
      STOP 20
      END SUBROUTINE FNDHMN

      SUBROUTINE FINDSH(H,SH,GAMMA)
C*****GIVEN AN ALTITUDE H, THIS SUBROUTINE FINDS THE LAYER BOUNDARIES
C*****ZM(I1) AND ZM(I2) WHICH CONTAIN H,  THEN CALCULATES THE SCALE
C*****HEIGHT (SH) AND THE VALUE AT THE GROUND (GAMMA+1) FOR THE
C*****INDEX OF REFRACTION
      COMMON /PARMTR/ RE,DELTAS,ZMAX,IMAX,IMOD,IBMAX,IPATH
      COMMON /CNSTNS/ PI,CA,DEG,GCAIR,BIGNUM,BIGEXP
      COMMON /MODEL/ Z(34),P(34),T(34),RFNDX(34),DENSTY(63,34),
     1 CLDAMT(34),RRAMT(34),EQLWC(34),HAZEC(34)
      DO 100 IM=2,IMOD
      I2 = IM
      IF(Z(IM).GE.H)  GO TO 110
  100 CONTINUE
      I2 = IMOD
  110 CONTINUE
      I1 = I2-1
      CALL SCALHT(Z(I1),Z(I2),RFNDX(I1),RFNDX(I2),SH,GAMMA)
      RETURN
      END Subroutine FINDSH

      SUBROUTINE SCALHT(Z1,Z2,RFNDX1,RFNDX2,SH,GAMMA)
C***********************************************************************
C     THIS SUBROUTINE CALCULATES THE SCALE HEIGHT SH OF THE (INDEX OF
C     REFRACTION-1.0) FROM THE VALUES OF THE INDEX AT THE ALTITUDES Z1
C     AND Z2 ( Z1 < Z2). IT ALSO CALCULATES THE EXTRAPOLATED VALUE
C     GAMMA OF THE (INDEX-1.0) AT Z = 0.0
C***********************************************************************
      RF1 = RFNDX1+1.0E-20
      RF2 = RFNDX2+1.0E-20
      RATIO = RF1/RF2
      IF(ABS(RATIO-1.0).LT.1.0E-05)  GO TO 100
      SH = (Z2-Z1)/LOG(RATIO)
      GAMMA = RF1*(RF2/RF1)**(-Z1/(Z2-Z1))
      GO TO 110
  100 CONTINUE
C*****THE VARIATION IN THE INDEX OF REFRACTION WITH HEIGHT IS
C*****INSIGNIFICANT OR ZERO
      SH = 0.0
      GAMMA = RFNDX1
  110 CONTINUE
      RETURN
      END Subroutine SCALHT

      FUNCTION   RADREF(H,SH,GAMMA)
C***********************************************************************
C     COMPUTES THE RADIUS OF CURVATURE OF THE REFRACTED RAY FOR
C     HORIZONTAL PATH:  RADREF = ANDEX/ D(ANDEX)/D(RADIUS)
C***********************************************************************
      COMMON /CNSTNS/ PI,CA,DEG,GCAIR,BIGNUM,BIGEXP
      IF(SH.EQ.0.0) GO TO 20
      HSH = H/SH
      IF(HSH .GT. BIGEXP) GO TO 20
      RADREF = SH*(1.0+EXP(HSH )/GAMMA)
      RETURN
   20 RADREF = BIGNUM
      RETURN
      END Function RADREF

      SUBROUTINE RFPATH(H1,H2,ANGLE,PHI,LEN,HMIN,IAMT,BETA,RANGE,BENDNG)
C***********************************************************************
C     THIS SUBROUTINE  TRACES THE REFRACTED RAY FROM H1 WITH A
C     INITIAL ZENITH ANGLE ANGLE TO H2 WHERE THE ZENITH ANGLE IS PHI,
C     AND CALCULATES THE ABSORBER AMOUNTS (IF IAMT.EQ.1) ALONG
C     THE PATH.  IT STARTS FROM THE LOWEST POINT ALONG THE PATH
C     (THE TANGENT HEIGHT HMIN IF LEN = 1 OR HA = MIN(H1,H2) IF LEN = 0)
C     AND PROCEEDS TO THE HIGHEST POINT.  BETA AND RANGE ARE THE
C     EARTH CENTERED ANGLE AND THE TOTAL DISTANCE RESPECTIVELY
C     FOR THE REFRACTED PATH FROM H1 TO H2
C***********************************************************************
      COMMON /IFIL/ IRD,IPR,IPU,NPR,IPR1
      COMMON /CARD1/ MODEL,ITYPE,IEMSCT,M1,M2,M3,IM,NOPRNT,TBOUND,SALB
      COMMON /PARMTR/ RE,DELTAS,ZMAX,IMAX,IMOD,IBMAX,IPATH
      COMMON /CNSTNS/ PI,CA,DEG,GCAIR,BIGNUM,BIGEXP
      COMMON /RFRPTH/ ZP(35),PP(35),TP(35),RFNDXP(35),SP(35),
     1    PPSUM(35),TPSUM(35),RHOPSM(35),DENP(63,35),AMTP(63,35)
      COMMON /SOLS/ AH1(68),ARH(68),
     X   WPATHS(68,63),PA(68),PR(68),ATHETA(35),ADBETA(35),LJ(69),JTURN,
     X ANGSUN,CSZEN(68)
      COMMON /CNTRL/ KMAX,M,IKMAX,NL,ML,IKLO,ISSGEO,IMULT
      COMMON /PATH/ PL(68),QTHETA(68),ITEST,HI,HF,AHT(68)
      DIMENSION HLOW(2)
      CHARACTER*2 HLOW
      DATA HLOW/'H1','H2'/
      MAX = 0
      IF(H1.GT.H2) GO TO 90
      IORDER = 1
      HA = H1
      HB = H2
      ANGLEA = ANGLE
      GO TO 95
   90 CONTINUE
      IORDER = -1
      HA = H2
      HB = H1
      ANGLEA = PHI
   95 CONTINUE
      JNEXT = 1
      IF(IAMT.EQ.1 .AND. NPR.NE.1)  WRITE(IPR,20)
   20 FORMAT('1CALCULATION OF THE REFRACTED PATH THROUGH THE ',
     1    'ATMOSPHERE',///,
     4    T3,'I',T11,'ALTITUDE',T27,'THETA',T34,'DRANGE',T44,'RANGE',
     5    T53,'DBETA',T63,'BETA',T72,'PHI',T80,'DBEND',T87,'BENDING',
     6    T 98,'PBAR',T106,'TBAR',T113,'RHOBAR',/,
     7    T07,'FROM',T18,'TO',/,T07,'(KM)',T17,'(KM)',T27,'(DEG)',
     8    T36,'(KM)',T45,'(KM)',T53,'(DEG)',T62,'(DEG)',T71,'(DEG)',
     9    T80,'(DEG)',T89,'(DEG)',T098,'(MB)',T106,'(K)',
     1    T111,'(GM CM-3)',/)
      IF(LEN.EQ.0) GO TO 100
C*****LONG PATH: FILL IN THE SYMETRIC PART FROM THE TANGENT HEIGHT
C*****TO HA
      CALL FILL(HMIN,HA,JNEXT)
      JHA = JNEXT
  100 CONTINUE
C*****FILL IN THE REMAINING PATH FROM HA TO HB
      IF(HA.EQ.HB) GO TO 110
      CALL FILL(HA,HB,JNEXT)
  110 CONTINUE
      JMAX = JNEXT
      IPATH = JMAX
C*****INTEGRATE EACH SEGMENT OF THE PATH
C*****CALCULATE CPATH SEPERATELY FOR LEN = 0,1
      IF(LEN.EQ.1) GO TO 115
      CALL FINDSH(HA,SH,GAMMA)
      CPATH = (RE+HA)*ANDEX(HA,SH,GAMMA)*SIN(ANGLEA/DEG)
      GO TO 116
  115 CONTINUE
      CALL FINDSH(HMIN,SH,GAMMA)
      CPATH = (RE+HMIN)*ANDEX(HMIN,SH,GAMMA)
  116 CONTINUE
      BETA = 0.0
      S = 0.0
      BENDNG = 0.0
      IF(LEN.EQ.0) GO TO 140
C*****DO SYMETRIC PART, FROM TANGENT HEIGHT(HMIN) TO HA
      IHLOW = 1
      IF(IORDER.EQ.-1)  IHLOW = 2
      IF(IAMT.EQ.1 .AND. NPR.NE.1) WRITE(IPR,24) HLOW(IHLOW)
   24 FORMAT(' ',T7,'TANGENT',T17,A2,/,T7,'HEIGHT',/)
      SINAI = 1.0
      COSAI = 0.0
      THETA = 90.0
      J2 = JHA-1
      DO 120 J=1,J2
      CALL SCALHT(ZP(J),ZP(J+1),RFNDXP(J),RFNDXP(J+1),SH,GAMMA)
      CALL LAYER(J,SINAI,COSAI,CPATH,SH,GAMMA,IAMT,DS,DBEND)
      DBEND = DBEND*DEG
      PHI = ASIN(SINAI)*DEG
      DBETA = THETA-PHI+DBEND
      PHI = 180.0-PHI
      S = S+DS
C
C   SAVE REFRACTED RAY PATH LENGTH FOR USE WITH MULTIPLE SCATTERING
C
      BENDNG = BENDNG+DBEND
      BETA = BETA+DBETA
      IF(IAMT.NE.1) GO TO 118
      PBAR = PPSUM(J)/RHOPSM(J)
      TBAR = TPSUM(J)/RHOPSM(J)
      RHOBAR = RHOPSM(J)/DS
      IF(IAMT.EQ.1 .AND. NPR.NE.1) WRITE(IPR,22) J,ZP(J),ZP(J+1),
     1    THETA,DS,S,DBETA,BETA,PHI,DBEND,BENDNG,PBAR,TBAR,RHOBAR
      J2A = J2 - J +  1
      J2B = J2 + J
      QTHETA(J2A)=  PHI  *CA
      QTHETA(J2B) = THETA*CA
      MAX = J2B
   22 FORMAT(' ',I2,2F9.3,9F9.3,F8.2,1PE9.2)
  118 CONTINUE
      IF(ISSGEO.EQ.1) GO TO 119
      ATHETA(J)=THETA
      ADBETA(J)=DBETA
  119 CONTINUE
      THETA = 180.0-PHI
  120 CONTINUE
C*****DOUBLE PATH QUANTITIES FOR THE OTHER PART OF THE SYMETRIC PATH
      BENDNG = 2.0*BENDNG
      BETA = 2.0*BETA
      S = 2.0*S
      IF(IAMT.EQ.1 .AND. NPR.NE.1) WRITE(IPR,26) S,BETA,BENDNG
   26 FORMAT('0',T10,'DOUBLE RANGE, BETA, BENDING',/,
     1    T10,'FOR SYMMETRIC PART OF PATH',T40,F9.3,T58,F9.3,
     2    T85,F9.3,/)
      JNEXT = JHA
      GO TO 150
  140 CONTINUE
C*****SHORT PATH
      JNEXT = 1
C*****ANGLEA IS THE ZENITH ANGLE AT HA IN DEG
C*****SINAI IS SIN OF THE INCIDENCE ANGLE
C*****COSAI IS CARRIED SEPERATELY TO AVOID A PRECISION PROBLEM
C*****WHEN SINAI IS CLOSE TO 1.0
      THETA = ANGLEA
      IF(ANGLEA.GT.45.0) GO TO 145
      SINAI = SIN(ANGLEA/DEG)
      COSAI = -COS(ANGLEA/DEG)
      GO TO 150
  145 CONTINUE
      SINAI = COS((90.0-ANGLEA)/DEG)
      COSAI = -SIN((90.0-ANGLEA)/DEG)
  150 CONTINUE
C*****DO PATH FROM HA TO HB
      IF(HA.EQ.HB) GO TO 170
      JO = MAX - JNEXT + 1
      J1 = JNEXT
      J2 = JMAX-1
C
      IF(H1 .GT. H2) THEN
      JD =  J2 - J1 + 1
      DO  1158 J = 1,MAX
      KA = MAX - J + 1
      JA = KA + JD
      QTHETA(JA) = QTHETA(KA)
1158  CONTINUE
      MAX =  MAX + JD
      JO = 0
      ENDIF
C
      IHLOW = 1
      IF(IORDER.EQ.-1)  IHLOW = 2
      IHIGH = MOD(IHLOW,2)+1
      IF(IAMT.EQ.1 .AND. NPR.NE.1) WRITE(IPR,28) HLOW(IHLOW),
     1    HLOW(IHIGH)
   28 FORMAT(' ',T11,A2,' TO ',A2,/)
      DO 160 J=J1,J2
      CALL SCALHT(ZP(J),ZP(J+1),RFNDXP(J),RFNDXP(J+1),SH,GAMMA)
      CALL LAYER(J,SINAI,COSAI,CPATH,SH,GAMMA,IAMT,DS,DBEND)
      DBEND = DBEND*DEG
      PHI = ASIN(SINAI)*DEG
      DBETA = THETA-PHI+DBEND
      PHI = 180.0-PHI
      S = S+DS
C
C    SAVE LAYER REFRACTED PATH LENGTH FOR USE WITH MULTIPLE SCATTERING
C
      PL(J)=DS
      BENDNG = BENDNG+DBEND
      BETA = BETA+DBETA
      IF(IAMT.NE.1) GO TO 158
      PBAR = PPSUM(J)/RHOPSM(J)
      TBAR = TPSUM(J)/RHOPSM(J)
      RHOBAR = RHOPSM(J)/DS
      IF(IAMT.EQ.1 .AND. NPR.NE.1) WRITE(IPR,22) J,ZP(J),ZP(J+1),
     1    THETA,DS,S,DBETA,BETA,PHI,DBEND,BENDNG,PBAR,TBAR,RHOBAR
  158 CONTINUE
C
C   SAVE LAYER REFRACTED PATH ANGLE FOR USE WITH MULTIPLE SCATTERING
C
C
      IF(H2 .GT. H1)  THEN
      QTHETA(J + JO)=THETA*CA
      MAX  = J + JO
      ELSE
      J2B  = J2 - J + 1
      QTHETA(J2B)= PHI * CA
      ENDIF
C
      IF(ISSGEO.EQ.1) GO TO 159
      ADBETA(J)=DBETA
      ATHETA(J)=THETA
  159 CONTINUE
      THETA = 180.0-PHI
  160 CONTINUE
  170 CONTINUE
      IF(ISSGEO.EQ.0) ATHETA(JMAX)=THETA
      IF(IORDER.EQ.-1) PHI = ANGLEA
      RANGE = S
      RETURN
      END Subroutine RFPATH

      SUBROUTINE FILL(HA,HB,JNEXT)
C********************************************************************
C     THIS SUBROUTINE DEFINES THE ATMOSPHERIC BOUNDARIES OF THE PATH
C     FROM HA TO HB AND INTERPOLATES (EXTRAPOLATES) THE DENSITIES TO
C     THESE BOUNDARIES ASSUMING THE DENSITIES VARY EXPONENTIALLY
C     WITH HEIGHT
C********************************************************************
      COMMON /IFIL/ IRD,IPR,IPU,NPR,IPR1
      COMMON /MODEL/ Z(34),P(34),T(34),RFNDX(34),DENSTY(63,34),
     1 CLDAMT(34),RRAMT(34),EQLWC(34),HAZEC(34)
      COMMON /PARMTR/ RE,DELTAS,ZMAX,IMAX,IMOD,IBMAX,IPATH
      COMMON /CNSTNS/ PI,CA,DEG,GCAIR,BIGNUM,BIGEXP
      COMMON /CNTRL/ KMAX,M,IKMAX,NL,ML,IKLO,ISSGEO,IMULT
      COMMON /RFRPTH/ ZP(35),PP(35),TP(35),RFNDXP(35),SP(35),
     1    PPSUM(35),TPSUM(35),RHOPSM(35),DENP(63,35),AMTP(63,35)
      IF(HA.LT.HB) GO TO 90
      WRITE(IPR,22) HA,HB,JNEXT
   22 FORMAT('0SUBROUTINE FILL- ERROR, HA .GE. HB',//,
     1    10X,'HA, HB, JNEXT = ',2E25.15,I6)
      STOP
   90 CONTINUE
C*****FIND Z(IA): THE SMALLEST Z(I).GT.HA
      DO 100 I=1,IMAX
      IF(HA.GE.Z(I)) GO TO 100
      IA = I
      GO TO 110
  100 CONTINUE
      IA = IMAX+1
      IB = IA
      GO TO 130
C*****FIND Z(IB): THE SMALLEST Z(I).GE.HB
  110 CONTINUE
      DO 120 I=IA,IMAX
      IF(HB-Z(I).GT. .0001) GO TO 120
      IB = I
      GO TO 130
  120 CONTINUE
      IB = IMAX+1
  130 CONTINUE
C*****INTERPOLATE DENSITIES TO HA, HB
      ZP(JNEXT) = HA
      I2 = IA
      IF(I2.EQ.1) I2 = 2
      IF(I2.GT.IMAX) I2 = IMAX
      I1 = I2-1
      A = (HA-Z(I1))/(Z(I2)-Z(I1))
      CALL EXPINT(PP(JNEXT),P(I1),P(I2),A)
      TP(JNEXT) = T(I1)+(T(I2)-T(I1))*A
      CALL EXPINT(RFNDXP(JNEXT),RFNDX(I1),RFNDX(I2),A)
      DO 140 K=1,KMAX
      CALL EXPINT(DENP(K,JNEXT),DENSTY(K,I1),DENSTY(K,I2),A)
  140 CONTINUE
      IF(IA.EQ.IB) GO TO 160
C*****FILL IN DENSITIES BETWEEN HA AND HB
      I1 = IA
      I2 = IB-1
      DO 150 I=I1,I2
      JNEXT = JNEXT+1
      ZP(JNEXT) = Z(I)
      PP(JNEXT) = P(I)
      TP(JNEXT) = T(I)
      RFNDXP(JNEXT) = RFNDX(I)
      DO 150 K=1,KMAX
      DENP(K,JNEXT) = DENSTY(K,I)
  150 CONTINUE
  160 CONTINUE
C*****INTERPOLATE THE DENSITIES TO HB
      JNEXT = JNEXT+1
      ZP(JNEXT) = HB
      I2 = IB
      IF(I2.EQ.1) I2 = 2
      IF(I2.GT.IMAX) I2 = IMAX
      I1 = I2-1
      A = (HB-Z(I1))/(Z(I2)-Z(I1))
      CALL EXPINT(PP(JNEXT),P(I1),P(I2),A)
      TP(JNEXT) = T(I1)+(T(I2)-T(I1))*A
      CALL EXPINT(RFNDXP(JNEXT),RFNDX(I1),RFNDX(I2),A)
      DO 170 K=1,KMAX
      CALL EXPINT(DENP(K,JNEXT),DENSTY(K,I1),DENSTY(K,I2),A)
  170 CONTINUE
      RETURN
      END Subroutine FILL

      SUBROUTINE LAYER(J,SINAI,COSAI,CPATH,SH,GAMMA,IAMT,S,BEND)
C*****************************************************************
C     THIS SUBROUTINE CALCULATES THE REFRACTED PATH FROM Z1 TO Z2
C     WITH THE SIN OF THE INITIAL INCIDENCE ANGLE SINAI
C*****************************************************************
      COMMON /PARMTR/ RE,DELTAS,ZMAX,IMAX,IMOD,IBMAX,IPATH
      COMMON /CNSTNS/ PI,CA,DEG,GCAIR,BIGNUM,BIGEXP
      COMMON /CNTRL/ KMAX,M,IKMAX,NL,ML,IKLO,ISSGEO,IMULT
      COMMON /RFRPTH/ ZP(35),PP(35),TP(35),RFNDXP(35),SP(35),
     1    PPSUM(35),TPSUM(35),RHOPSM(35),DENP(63,35),AMTP(63,35)
      DIMENSION HDEN(63),DENA(63),DENB(63)
      DATA EPSILN/1.0E-5/
C*****INITIALIZE LOOP
      N = 0
      Z1 = ZP(J)
      Z2 = ZP(J+1)
      H1 = Z1
      R1 = RE+H1
      DHMIN = DELTAS**2/(2.0*R1)
      SINAI1 = SINAI
      COSAI1 = COSAI
      Y1 = COSAI1**2/2.0+COSAI1**4/8.0+COSAI1**6*3.0/48.0
      Y3 = 0.0
      X1 = -R1*COSAI1
      RATIO1 = R1/RADREF(H1,SH,GAMMA)
      DSDX1 = 1.0/(1.0-RATIO1*SINAI1**2)
      DBNDX1 = DSDX1*SINAI1*RATIO1/R1
      S = 0.0
      BEND = 0.0
      IF(IAMT.EQ.2) GO TO 110
C*****INITIALIZE THE VARIABLES FOR THE CALCULATION OF THE
C*****ABSORBER AMOUNTS
      PA = PP(J)
      PB = PP(J+1)
      TA = TP(J)
      TB = TP(J+1)
      RHOA = PA/(GCAIR*TA)
      RHOB = PB/(GCAIR*TB)
      DZ = ZP(J+1)-ZP(J)
      HP = -DZ/LOG(PB/PA)
      IF(ABS(RHOB/RHOA-1.0).LT.EPSILN)  GO TO 90
      HRHO = -DZ/LOG(RHOB/RHOA)
      GO TO 95
   90 HRHO = 1.0E30
   95 CONTINUE
      DO 105 K=1,KMAX
      DENA(K) = DENP(K,J)
      DENB(K) = DENP(K,J+1)
      IF(DENA(K).LE.0.0 .OR. DENB(K).LE.0.0)  GO TO 100
      IF(ABS(1.0-DENA(K)/DENB(K)).LE.EPSILN)  GO TO 100
C*****USE EXPONENTIAL INTERPOLATION
      HDEN(K) = -DZ/LOG(DENB(K)/DENA(K))
      GO TO 105
C*****USE LINEAR INTERPOLATION
  100 HDEN(K) = 0.0
  105 CONTINUE
  110 CONTINUE
C*****
C*****LOOP THROUGH PATH
C*****INTEGRATE PATH QUANTITIES USING QUADRATIC INTEGRATION WITH
C*****UNEQUALLY SPACED POINTS
C*****
  115 CONTINUE
      N = N+1
      DH = -DELTAS*COSAI1
      IF(DH.LT.DHMIN) DH = DHMIN
      H3 = H1+DH
      IF(H3.GT.Z2) H3 = Z2
      DH = H3-H1
      R3 = RE+H3
      H2 = H1+DH/2.0
      R2 = RE+H2
      SINAI2 = CPATH/(ANDEX(H2,SH,GAMMA)*R2)
      SINAI3 = CPATH/(ANDEX(H3,SH,GAMMA)*R3)
      RATIO2 = R2/RADREF(H2,SH,GAMMA)
      RATIO3 = R3/RADREF(H3,SH,GAMMA)
      IF((1.0-SINAI2).GT.EPSILN)  GO TO 116
C*****NEAR A TANGENT HEIGHT, COSAI = -SQRT(1-SINAI**2) LOSES
C*****PRECISION. USE THE FOLLOWING ALGORITHM TO GET COSAI.
      Y3 = Y1+(SINAI1*(1.0-RATIO1)/R1+4.0*SINAI2*(1.0-RATIO2)/R2+
     1    SINAI3*(1.0-RATIO3)/R3)*DH/6.0
      COSAI3 = -SQRT(2.0*Y3-Y3**2)
      X3 = -R3*COSAI3
      DX = X3-X1
      W1 = 0.5*DX
      W2 = 0.0
      W3 = 0.5*DX
      GO TO 118
C*****
  116 CONTINUE
      COSAI2 = -SQRT(1.0-SINAI2**2)
      COSAI3 = -SQRT(1.0-SINAI3**2)
      X2 = -R2*COSAI2
      X3 = -R3*COSAI3
C*****CALCULATE WEIGHTS
      D31 = X3-X1
      D32 = X3-X2
      D21 = X2-X1
      IF(D32.EQ.0.0 .OR. D21.EQ.0.0) GO TO 117
      W1 = (2-D32/D21)*D31/6.0
      W2 = D31**3/(D32*D21*6.0)
      W3 = (2.0-D21/D32)*D31/6.0
      GO TO 118
  117 CONTINUE
      W1 = 0.5*D31
      W2 = 0.0
      W3 = 0.5*D31
C*****
  118 CONTINUE
      DSDX2 = 1.0/(1.0-RATIO2*SINAI2**2)
      DSDX3 = 1.0/(1.0-RATIO3*SINAI3**2)
      DBNDX2 = DSDX2*SINAI2*RATIO2/R2
      DBNDX3 = DSDX3*SINAI3*RATIO3/R3
C*****INTEGRATE
      DS = W1*DSDX1+W2*DSDX2+W3*DSDX3
      S = S+DS
      DBEND = W1*DBNDX1+W2*DBNDX2+W3*DBNDX3
      BEND = BEND+DBEND
      IF(IAMT.EQ.2)  GO TO 150
C*****CALCULATE AMOUNTS
      DSDZ = DS/DH
      DHHP = DH/HP
      IF(DHHP .LE. BIGEXP) THEN
           PB = PA*EXP(-DHHP )
      ELSE
           PB = 0.
      ENDIF
      DHRH = DH/HRHO
      IF(DHRH .LE. BIGEXP) THEN
           RHOB = RHOA*EXP(-DHRH   )
      ELSE
           RHOB = 0.
      ENDIF
      IF((DH/HRHO).LT.EPSILN)  GO TO 120
      PPSUM(J) = PPSUM(J)+DSDZ*(HP/(1.0+HP/HRHO))*(PA*RHOA-PB*RHOB)
      TPSUM(J) = TPSUM(J)+DSDZ*HP*(PA-PB)/GCAIR
      RHOPSM(J) = RHOPSM(J)+DSDZ*HRHO*(RHOA-RHOB)
      GO TO 125
  120 CONTINUE
      PPSUM(J) = PPSUM(J)+0.5*DS*(PA*RHOA+PB*RHOB)
      TPSUM(J) = TPSUM(J)+0.5*DS*(PA+PB)/GCAIR
      RHOPSM(J) = RHOPSM(J)+0.5*DS*(RHOA+RHOB)
  125 CONTINUE
      DO 140 K=1,KMAX
      IF(ABS(HDEN(K)).EQ.0.0)GO TO 130
      IF((DH/HDEN(K)).LT.EPSILN) GO TO 130
C*****EXPONENTIAL INTERPOLATION
      H3Z1 =  (H3-Z1)/HDEN(K)
      IF(H3Z1 .LE.BIGEXP) THEN
           DENB(K) = DENP(K,J)*EXP(- H3Z1 )
      ELSE
           DENB(K) = 0.
      ENDIF
      AMTP(K,J) = AMTP(K,J)+DSDZ*HDEN(K)*(DENA(K)-DENB(K))
      GO TO 140
  130 CONTINUE
C*****LINEAR INTERPOLATION
      DENB(K) = DENP(K,J)+(DENP(K,J+1)-DENP(K,J))*(H3-Z1)/DZ
      AMTP(K,J) = AMTP(K,J)+0.5*(DENA(K)+DENB(K))*DS
  140 CONTINUE
      PA = PB
      RHOA = RHOB
      DO 145 K=1,KMAX
  145 DENA(K) = DENB(K)
  150 CONTINUE
      IF(H3.GE.Z2) GO TO 160
      H1 = H3
      R1 = R3
      SINAI1 = SINAI3
      RATIO1 = RATIO3
      Y1=Y3
      COSAI1 = COSAI3
      X1 = X3
      DSDX1 = DSDX3
      DBNDX1 = DBNDX3
      GO TO 115
  160 CONTINUE
      SINAI = SINAI3
      COSAI = COSAI3
      SP(J) = S
      RETURN
      END

      SUBROUTINE TRANS(IPH,ISOURC,IDAY,ANGLEM)
C***********************************************************************
C     CALCULATES TRANSMITTANCE AND RADIANCE VALUES BETWEEN V1 AND V2
C        FOR A GIVEN ATMOSPHERIC SLANT PATH
C
C     K
C     1-2  TEMP DEP O2  1395 TO 1760
C     3    RAIN
C     4    N2 CONTINUUM
C     5    H2O SELF BROADENED CONTINUUM AT 296
C     6    MOLECULAR (RAYLIEGH) SCATTERING
C     7    BOUNDRY LAYER AEROSOL (0 TO 2 KM)
C          (TX(7) IS TOTAL AEROSOL TRANSMITTANCE)
C     8    ULTRAVIOLET OZONE
C     9    H2O SELF CONTINUUM 296-260  (TX(9) TOTAL TRANS)
C    10    H2O FORIGN CONTINUUM
C          (TX(10) IS AEROSOL ABSORPTION)
C    11    HNO3 (NITRIC ACID)
C    12    TROPOSPHERIC AEROSOL (2-10 KM)
C    13    STRATOSPHERIC  AEROSOL (10-30)
C    14    UPPER STRATOPHERIC (ABOVE 30KM)
C    15    AEROSOL WEIGHTED RELATIVE HUMITY (0 TO 2 KM)
C    16    CIRRUS CLOUDS
C    17-30 H2O (ALL REGIONS) (DOUBLE EXPONENTIAL MODELS)
C    31-35 O3  (ALL REGIONS) (DOUBLE EXPONENTIAL MODELS)
C    36-43 CO2 (ALL REGIONS) (DOUBLE EXPONENTIAL MODELS)
C    44-45 CO  (ALL REGIONS) (DOUBLE EXPONENTIAL MODELS)
C    46    CH4 (ALL REGIONS) (DOUBLE EXPONENTIAL MODELS)
C    47    N2O (ALL REGIONS) (DOUBLE EXPONENTIAL MODELS)
C    50-51 O2  (ALL REGIONS) (DOUBLE EXPONENTIAL MODELS)
C    52-53 NH3 (ALL REGIONS) (DOUBLE EXPONENTIAL MODELS)
C    54    NO  (ALL REGIONS) (DOUBLE EXPONENTIAL MODELS)
C    55    NO2 (ALL REGIONS) (DOUBLE EXPONENTIAL MODELS)
C    56-57 SO2 (ALL REGIONS) (DOUBLE EXPONENTIAL MODELS)
C    58     O2  UV
C    59-60  TEMP DEP O3
C    61-62  TEMP DEP RAIN
C    63     O2  1395 TO 1760
C***********************************************************************
C
C      MODIFIED TO ACCOMODATE MULTIPLE SCATTERING CALCULATION
C      AS DESCRIBED IN ISAACS ET AL 1986,      A.E.R. INC.
C
C-----------------------------------------------------------------------
C
C      MODIFICATIONS TO SET UP EVALUATION OF VERTICAL OPTICAL
C      QUANTITIES PROFILES (I.E. OPTICAL DEPTH, SINGLE SCATTERING
C      ALBEDO, ASYMMETRY FACTORS) FOR FLUX ADDING AND MULTIPLE
C      SCATTERING (MS) SOURCE FUNCTION.
C
C      SUBROUTINES MSRAD AND FLXADD ARE CALLED FOR MS.
C
C
C
C      'K' LOOPS IN MSRAD AND FLXADD PERFORM K DISTRIBUTION
C      INTEGRAL OVER K VALUES AND PROBABILITES (SEE ISAACS,
C      ET AL 1986, P.    )
C
C      SUBROUTINE MSRAD:
C         (1) SETS UP OPTICAL PROPERTIES PROFILES FOR VERTICAL
C             PATH
C         (2) CALLS FLXADD WHICH RETURNS MS SOURCE FUNCTION, J,
C             FOR PATH
C         (3) EVALUATES PATH INTEGRAL OF SOURCE FUNCTION, I.E.
C             MS RADIANCE CONTRIBUTION
C
C      SUBROUTINE    FLXADD:
C         (1) CALCULATES UPWARD, F+ (UPF), AND DOWNWARD, F- (DNF),
C             FLUX PROFILES USING ADDING METHOD
C         (2) MS SOURCE FUNCTION EVALUATED FROM LEVEL FLUXES VIA
C             STREAM APPROXIMATION (SEE EQN     , ISAACS ET AL, 1986)
C         (3) BACKSCATTER FOR SOURCE FUNCTION FOR GIVEN G FACTOR
C             AND ZENTIH ANGLE OBTAINED USING FUNCTION BETABS
C
C***********************************************************************
C
      COMMON /IFIL/IRD,IPR,IPU,NPR,IPR1
      COMMON /CARD1/ MODEL,ITYPE,IEMSCT,M1,M2,M3,IM,NOPRNT,TBOUND,SALB
      COMMON /CARD2/ IHAZE,ISEASN,IVULCN,ICSTL,ICLD,IVSA,VIS,WSS,WHH,
     1    RAINRT
      COMMON /CARD3/ H1,H2,ANGLE,RANGE,BETA,RE,LEN
      COMMON /CARD4/ V1,V2,DV
      COMMON /CNSTNS/ PI,CA,DEG,GCAIR,BIGNUM,BIGEXP
      COMMON /CNTRL/ KMAX,M,IKMAX,NL,ML,IKLO,ISSGEO,IMULT
      COMMON RELHUM(34),HSTOR(34),ICH(4),VH(17),TX(63),W(63)
      COMMON             WPATH(68, 63),TBBY(68)
      COMMON ABSC(5,47),EXTC(5,47),ASYC(5,47),VX2(47),AWCCON(5)
      COMMON /AER/ XX1,XX2,XX3,XX4,XX5,
     X YY1,YY2,YY3,YY4,YY5,ZZ1,ZZ2,ZZ3,ZZ4,ZZ5
      COMMON /SOLS/ AH1(68),ARH(68),
     X   WPATHS(68,63),PA(68),PR(68),ATHETA(35),ADBETA(35),LJ(69),JTURN,
     X ANGSUN,CSZEN(68)
      COMMON /SRAD/ TEB1,TEB2,TASP1,TASP2,TMSP1,TMSP2,TEB2SV
      COMMON /MODEL/ZM(34),PM(34),TM(34),RFNDX(34),DENSTY(63,34),
     1 CLDAMT(34),RRAMT(34),EQLWC(34),HAZEC(34)
      COMMON/PATH/PL(68),QTHETA(68),ITEST,HI,HF,AHT(68)
C
      COMMON /TRAN/ABB(19),
     1                     BTOP(50),BMID(34),TMD(34),TMOLS(34),
     2 TAERS(34),TCONT(34),DCONT(34)
      COMMON /MNLT/TBBSS(68),TBBMS(34),WPMS(34,63),IMSMX,WPMSS(34,63)
      COMMON /MSRD/TLE(34),COSBAR(34),OMEGA0(34),UPF(10,34),DNF(10,34),
     1 TAER(50),                                             DTX7(34),
     2 DAERS(34),ASYIK(34),ASYDM(34),
     3 STRN(0:34),DMOLS(34), DSTRN(0:34),FDNSRF    ,FDNSRT,IKDM,
     4               FDNTRF    ,FDNTRT
      COMMON /ICLL/ ICALL,FPHS,FALB,FORBIT
      COMMON /H2O/    CPH2O(3515)
      COMMON /O3/     CPO3 ( 447)
      COMMON /UFMIX1/ CPCO2(1219)
      COMMON /UFMIX2/ CPCO ( 173),CPCH4( 493),CPN2O( 704),CPO2 ( 382)
      COMMON /TRACEG/ CPNH3( 431), CPNO(  62),CPNO2( 142),CPSO2( 226)
      COMMON /WNLOHI/
     L   IWLH2O(15),IWLO3 ( 6),IWLCO2(11),IWLCO ( 4),IWLCH4( 5),
     L   IWLN2O(12),IWLO2 ( 7),IWLNH3( 3),IWLNO ( 2),IWLNO2( 4),
     L   IWLSO2( 5),
     H   IWHH2O(15),IWHO3 ( 6),IWHCO2(11),IWHCO ( 4),IWHCH4( 5),
     H   IWHN2O(12),IWHO2 ( 7),IWHNH3( 3),IWHNO ( 2),IWHNO2( 4),
     H   IWHSO2( 5)
      COMMON /AABBCC/ A1(11),B1(11),C1(11),IBND(11),A(11),CPS(11)
      COMMON /DIRST/  SUN,UMB(34),DMB(34),UMBS(34),DMBS(34)
      DIMENSION IMAP(68)
      DIMENSION BET(68),DMF(34),DMFS(34),UMF(34),UMFS(34)
      INTEGER PHASE,DIST
      DATA   CF1/3.159E-08/,CF2/2.75E-04/
C
      ALPHA2=200.**2
      IF(IMULT.EQ.1) CALL MAPMS(ML,IKMAX,ZM,AHT,IMAP)
      IOFF = 0
      IF(H1 .GE. H2 ) IOFF = 1
      IF(ANGLE.GT.90.)IOFF = 1
C     IF(ITYPE. EQ. 3)IOFF = 1
C
C
C  SET UP LAYER EDGE AND MIDPOINT TEMPERATURES FOR USE IN
C  MS FLUX ADDING
C
      IF(IMULT.EQ.1) THEN
           DO 50 IK=1,ML
           TLE(IK)=TM(ML -IK + 1)
           IF(IK. LE.IMSMX ) TMD(IK)=TBBMS(IK)
           IF(IK. GT.IMSMX)  TMD(IK)=TBBMS(IMSMX)
50         CONTINUE
           TMD(ML + 1) = TMD(ML)
           TLE(ML + 1) = TLE(ML)
      ENDIF
      RADMIN=1.0E+30
      RADMAX=0.
      IENT = 0
      EMISS=1.-SALB
      VRMIN=0.
      VRMAX=0.
C
C  SAVE IKMAX AND IMULT
C
C
      IKMX=IKMAX
      IMLT=IMULT
      SUMA=0.
      SUMS  =-99.
      SUMSSR=-99.
      RFLS  =-99.
      RFLSOL=-99.
      RADSUM=0.
      STSOL = 0.0
      SSOL = 0.0
      FACTOR=0.5
      IV1=V1/5.
      IV2=V2/5.+.99
      IV1=IV1*5
      IV2=IV2*5
      IF (IV2.GT.50000) IV2=50000
      IF (DV.LT.5) DV=5
      IDV=DV
      IV=IV1-IDV
      IKLO=1
      ICOUNT=0
      ICALL  = 0
      IEMISS = 0
      ISCTTR = 0
      IF(IEMSCT.EQ.1 .OR. IEMSCT.EQ.2) IEMISS = 1
      IF(IEMSCT.EQ.2) ISCTTR = 1
      WCRRIS = WPATH(IKMAX,16)*2.
      TCRRIS = 1.
      IF(ICLD.EQ.20)THEN
           IF(WCRRIS .LE.BIGEXP) THEN
                TCRRIS = EXP(-WCRRIS)
           ELSE
                TCRRIS = 0.
           ENDIF
      ENDIF
      TRAIN = 1.
      IF(IEMISS .EQ. 0) THEN
           IKMAX=IKLO
      ENDIF
      IF(IEMSCT. EQ. 0) WRITE(IPU,931)
931   FORMAT(   '  FREQ   TOTAL     H2O     CO2+ ',
     +'OZONE    TRACE  N2 CON  H2O CON MOL SCAT AER-HYD HNO3   ',
     +'AER-HYD')
C     IPR1 IS THE LOGICAL UNIT FOR THE MOLECULAR TRANSMITTANCE OUTPUTS
      IF(IEMSCT.EQ.0) WRITE(IPR1,901)
      IF(IEMSCT.EQ.1) WRITE(IPU,932)
      IF(IEMSCT.EQ.2) WRITE(IPU,932)
932   FORMAT('  FREQ   TRANS     ATMOS   PATH     ',
     +'SINGLE   GROUND DIRECT   TOTAL RAD')
      IF(IEMSCT. EQ. 3) WRITE(IPU,933)
933   FORMAT('  FREQ   TRANS     SOL TR  SOLAR    ')
C
      IF(NOPRNT. EQ. -1) THEN
           IF(IMULT.EQ.1) THEN
               WRITE(IPR1,1200)
1200           FORMAT('        V   ALT1    UFLX        UFLXS     ',
     X         '  DFLX        DFLXS       DIRS          TRANS ')
            ELSE
               IF(IEMSCT .GT.0 )WRITE(IPR1,1205)
1205           FORMAT('        V   ALT1   ALT2    B(V,T)     DTAU ',
     X        '       TAU ')
            ENDIF
      ENDIF
      INDH2O=1
      INDO3 =1
      INDCO2=1
      INDCO =1
      INDCH4=1
      INDN2O=1
      INDO2 =1
      INDNH3=1
      INDNO =1
      INDNO2=1
      INDSO2=1
C******BEGINNING OF FREQUENCY LOOP
C
    5 IV=IV+IDV
C
C   INITIALIZE THERMAL AND SOLAR MULTIPLE SCATTERING CONTRIBUTIONS
C
C
C   RESET TBBY, WPATH AND WPATHS FOR MULTIPLE SCATTERING
C
      ML1 = ML - 1
      INIT = 0
      IKLO=1
C
C  FOR MULTIPLE SCATTERING SET IKMAX=IKMAX+1 DUE TO GROUND LAYER
C
      IF(IMULT .EQ. 1) THEN
      IKMAX=IMSMX
      ELSE
C
C  IF NOT MULTIPLE SCATTERING, RESET IKMAX TO ORIGINAL VALUE
C
      IKMAX=IKMX
      ENDIF
      IF(IEMISS .EQ. 0) THEN
           IKMAX=IKLO
      ENDIF
C
      ITZERO=0
      IPATH=1
      SUMV=0.
      TLOLD=1.
      IF (ICOUNT.EQ.0) GO TO 15
      IF (ICOUNT.EQ.50) GO TO 15
      GO TO 20
   15 ICOUNT=0
      IF(IEMSCT.EQ.0) WRITE(IPR,900)
      IF(IEMSCT.EQ.1) WRITE(IPR,910)
      IF(IEMSCT.EQ.2 .AND. IMLT .EQ. 0) WRITE(IPR,920)
      IF(IEMSCT.EQ.2 .AND. IMLT .EQ. 1) WRITE(IPR,921)
      IF(IEMSCT.EQ.3) WRITE(IPR,930)
   20 DO 25 K=1,KMAX
      TX(K)=0.0
      IF (K.LT.4) TX(K)=1.0
   25 CONTINUE
      ICOUNT=ICOUNT+1
C
      V=FLOAT(IV)
C
C      VALF,ALF2 AND FAC2 ARE USED TO MODIFY THE H2O CONTINUUM
C      AFTER THE CALLS TO SLF296 AND SLF260
C
C     THE ORIGINAL TRANSMITTANCE MODELS FOR H2O, CO2+, O3(IR)
C     HAVE BEEN REPLACED.
C
C     CALL C1DTA (ABB(1),V)
C*****   UNIFORMLY MIXED GASES
C     CALL C2DTA (ABB(2),V)
C*****   OZONE
C     CALL C3DTA (ABB(3),V)
C  ===== STOP OF DELETION  =====
C*****   N2 CONTINUUM
C
      CALL CXDTA(CP,V,IWLH2O,IWHH2O,CPH2O,INDH2O)
      CPS(1) = CP
      CALL CXDTA(CP,V,IWLCO2,IWHCO2,CPCO2,INDCO2)
      CPS(2) = CP
      CALL CXDTA(CP,V,IWLO3, IWHO3, CPO3, INDO3 )
      CPS(3) = CP
      CALL CXDTA(CP,V,IWLN2O,IWHN2O,CPN2O,INDN2O)
      CPS(4) = CP
      CALL CXDTA(CP,V,IWLCO, IWHCO, CPCO, INDCO )
      CPS(5) = CP
      CALL CXDTA(CP,V,IWLCH4,IWHCH4,CPCH4,INDCH4)
      CPS(6) = CP
      CALL CXDTA(CP,V,IWLO2, IWHO2, CPO2, INDO2 )
      CPS(7) = CP
      CALL CXDTA(CP,V,IWLNO, IWHNO, CPNO, INDNO )
      CPS(8) = CP
      CALL CXDTA(CP,V,IWLSO2,IWHSO2,CPSO2,INDSO2)
      CPS(9) = CP
      CALL CXDTA(CP,V,IWLNO2,IWHNO2,CPNO2,INDNO2)
      CPS(10)= CP
      CALL CXDTA(CP,V,IWLNH3,IWHNH3,CPNH3,INDNH3)
      CPS(11)= CP
C
      CALL C4DTA(ABB(4),V)
      CALL ABCDTA(IV)
C
C*****   WATER CONTINUUM
       CALL  SLF296(V,SH2OT0)
       CALL  SLF260(V,SH2OT1)
       CALL  FRN296(V,FH2O)
      T0=296.
      T1=260.
      IF(SH2OT0   .GT.0.) THEN
C
C        CORRECTION TO SELF CONTINUUM (1 SEPT 85); FACTOR OF 0.78 @ 1000
          XH2O=      (1. - 0.2333*( ALPHA2/((V -1050.)**2+ALPHA2)) )
          SH2OT0  =   SH2OT0 *XH2O
          SH2OT1  =   SH2OT1 *XH2O
      END IF
C*****PROTECT AGAINST EXPONENTIAL UNDERFLOW AT HIGH FREQUENCY
      VTEMP=V/.6952
      IF(VTEMP/T1.LE.BIGEXP)THEN
           XD=EXP(-V/(T0*0.6952))
           RADFN0=V*(1.-XD)/(1.+XD)
           XD=EXP(-V/(T1*0.6952))
           RADFN1=V*(1.-XD)/(1.+XD)
      ELSE
           RADFN0 = V
           RADFN1 = V
      ENDIF
      CALL FUDGE(V,FDG)
      ABB(5)=SH2OT0*RADFN0
      CALL C6DTA(ABB(6),V)
      ABB(7)=0.
      CALL C8DTA(ABB(8),V)
      ABB(9)=(SH2OT1*RADFN1)-(SH2OT0*RADFN0)
      ABB(10)=(FH2O+FDG)*RADFN0
C*****HNO3 ABSORPTION CALCULATION
      CALL HNO3 (V,ABB(11))
      CALL AEREXT (V)
C
      CALL HERTDA(ABB(17),V)
      CALL O2CONT(V,SIGO20,SIGO2A,SIGO2B)
      IF(V. GT. 49600 )CALL SCHRUN(V,CPS(7))
C
C********    DIFFUSE OZONE  ********
C
           ABBUV = 0.
           IF(V .GT.24370. .AND. V .LT.40800.) THEN
              ABB(8) = 0.
              CALL O3HHT0                (V,C0)
              CALL O3HHT1                (V  ,CT1)
              CALL O3HHT2                (V,  CT2)
C
      END IF
      IF(V .GE.40800)   THEN
           CALL O3UV(V,C0)
           ABB(8) = 0.
      ENDIF
109   TEB1  =-99.
      IPATH = 1
      TEB2SV=-99.
C*****
C*****BEGINNING OF LAYER LOOP
      TOTAL = 1.0
      DSTRN(0) = 1.
CC    DSTRN(IKMAX) = 1.
      SUM = 0.
      SUMMS  = 0.
      DO 210 IK=IKLO,IKMAX
      IF(IEMISS.EQ.0) GO TO 120
      IF(ISCTTR.EQ.0) GO TO 116
111   CONTINUE
C*****LOAD APPROPRIATE ABSORBER AMOUNTS INTO W(K)
      IF(IPATH-2) 112,114,116
112   CONTINUE
C*****LOAD W(K) WITH WPATHS(1,K) TO OBTAIN THE FIRST
C*****SUN PATH TRANSMITTANCE
      DO 113 K=1,KMAX
      IF((IMULT. EQ. 1).AND.(INIT.EQ.0))THEN
          W(K)=WPMSS (1,K)
      ELSE
          W(K)=WPATHS(1,K)
      ENDIF
113   CONTINUE
      IF(W(36).GE.0.0) GO TO 120
      TX(6) = 0.
      TX(7) = 0.
      TX(9) = 0.
      TX(10) =0.
C            SUN CAN NOT BE SEEN
      IF((IMULT. EQ. 1).AND.(INIT.EQ.0))THEN
          IF(IK. GT. 1) THEN
             ASYIK(IK-1) = 0.
             ASYDM(IK-1) = 1.
           ENDIF
           ASYIK(IKMAX)= ASYIK(1)
           ASYDM(IKMAX)= ASYDM(1)
           DCONT(IK)= 0.
           DTX7(IK)= 0.
           DAERS(IK)= 0.
           DMOLS(IK)= 0.
          GO TO 1020
      ENDIF
      GO TO 206
114   CONTINUE
C*****LOAD W(K) WITH WPATH(IK,K)+WPATHS(IK+1,K)
C*****TO OBTAIN L PATH TRANSMITTANCES
      IKP1=IK+1
      DO 115 K=1,KMAX
C
C   FOR MULTIPLE SCATTERING, CALCULATE SOLAR PATH ONLY TO FIND
C   THE SOLAR PATH TRANSMITTANCE
C
      IF((IMULT. EQ. 1).AND.(INIT.EQ.0))THEN
      W(K)=WPMSS (IKP1,K)
      ELSE
      W(K)=WPATH(IK,K)+WPATHS(IKP1,K)
      ENDIF
115   CONTINUE
C
C   FOR MULTIPLE SCATTERING, CALCULATE SOLAR PATH ONLY TO FIND
C   THE SOLAR PATH TRANSMITTANCE
C
      IF((IMULT. EQ. 1).AND.(INIT.EQ.0))THEN
          IF(WPMSS(IKP1,36) .GT. 0.) GO TO 120
           TX(6) = 0.
           TX(7) = 0.
           TX(9) = 0.
           TX(10) =0.
          IF(IK. GT. 1) THEN
             ASYIK(IK-1) = 0.
             ASYDM(IK-1) = 1.
           ENDIF
           ASYIK(IKMAX)= ASYIK(1)
           ASYDM(IKMAX)= ASYDM(1)
           DCONT(IK)= 0.
           DTX7(IK)= 0.
           DAERS(IK)= 0.
           DMOLS(IK)= 0.
          GO TO 1020
      ENDIF
      IF(WPATHS(IKP1,36).GE.0.0) GO TO 120
      TX(6) = 0.
      TX(7) = 0.
      TX(9) = 0.
      TX(10) =0.
C            SUN CAN NOT BE SEEN
      GO TO 206
116   CONTINUE
C*****LOAD W(K) WITH WPATH(IK,K) TO OBTAIN THE OPTICAL
C*****PATH TRANSMITTANCES
      DO 117 K=1,KMAX
      IF((IMULT. EQ. 1).AND.(INIT.EQ.0))THEN
C
C     MPSM AMOUNTS FROM 0 TO SPACE A 0 DEG
C
          W(K) = WPMS(IK,K)
C
      ELSE
C
C          WPATHS IS VEW PATH
C
          W(K) = WPATH(IK,K)
C
      ENDIF
  117     CONTINUE
  120 CONTINUE
      DO 121  K = 3,16
121   TX(K) = 0.
C
      EXT   =  XX1*W(7)+XX2*W(12)+XX3*W(13)+XX4*W(14)+XX5*W(16)
      ABT   =  YY1*W(7)+YY2*W(12)+YY3*W(13)+YY4*W(14)+YY5*W(16)
      IF(IMULT.EQ.1 .AND. INIT .EQ. 0) THEN
           IF(IK .EQ. 1) THEN
                W7D  = WPMS(IK,7)
                W12D = WPMS(IK,12)
                W13D = WPMS(IK,13)
                W14D = WPMS(IK,14)
                W16D = WPMS(IK,16)
           ELSE
                IKM = IK - 1
                W7D  = WPMS(IK, 7) - WPMS(IKM,7)
                W12D = WPMS(IK,12) - WPMS(IKM,12)
                W13D = WPMS(IK,13) - WPMS(IKM,13)
                W14D = WPMS(IK,14) - WPMS(IKM,14)
                W16D = WPMS(IK,16) - WPMS(IKM,16)
           ENDIF
C
C  ASYMMETRY FACTOR IS WEIGHTED AVERAGE

C
           ASY=(ZZ1*(XX1-YY1)*W7D +ZZ2*(XX2-YY2)*W12D +
     +   ZZ3*(XX3-YY3)*W13D +ZZ4*(XX4-YY4)*W14D +ZZ5*(XX5-YY5)*W16D)
      ENDIF
C
      SCT=EXT-ABT
      TRAIN=1.
CCC
CCC   ADD CONTRIBUTION OF CLOUDS AND RAIN
CCC
      IF(W(3).NE.0) THEN
           TMPRN = W(61)/W(3)
           XD=EXP(-V/(TMPRN*0.6952))
           RFD   =V*(1.-XD)/(1.+XD)
           RAIN63 = W(3)/W(62)
           RAINAV = RAIN63**(1./.63)
           TRAIN=TNRAIN(RAINAV,V,TMPRN,RFD)
           IF(V .LT. 250.) THEN
              IF(ICLD .LE. 11) PHASE = 1
              IF(ICLD .GT. 11) PHASE = 2
              DIST = 1
C
C       CALL SCATTERING ROUTINE TO OBTAIN ASYMMTRY FACTOR AND RATIO
C       OF ABSORPTION TO EXTINCTION DUE TO RAIN WITHIN RANGE OF
C       19 TO 231 GHZ
C       EXTRAPOLATE ABOVE AND BELOW THAT FREQ RANGE
C
            CALL RNSCAT(V,RAINAV,TMPRN    ,PHASE,DIST,IK1,CSSA,ASYMR,
     X       IENT)
             IENT = IENT + 1
          ELSE
            CSSA = 0.5
            ASYMR = 0.85
          ENDIF
           RNEXPH  = TRAIN * W(62)
           ABT = ABT + RNEXPH  * CSSA
           SCT = SCT + RNEXPH  * (1.-CSSA)
           IF(IMULT.EQ.1 .AND. INIT .EQ. 0) THEN
                TRAIPL =  RNEXPH
                ASY = ASY + ASYMR *   (1. - CSSA) * TRAIPL
           ENDIF
      ENDIF
130   CONTINUE
C
C    SET EXT DUE TO RAIN FOR LAYER
C
C
C
      IF(IMULT.EQ.1 .AND. INIT .EQ. 0) THEN
           DENOM  =  ((XX1-YY1)*W7D +(XX2-YY2)*W12D +
     2      (XX3-YY3)*W13D +(XX4-YY4)*W14D +(XX5-YY5)*W16D )
           IF(W(3).NE.0.)THEN
              DENOM = DENOM + (1.-CSSA)*TRAIPL
           ENDIF
C
           IF(IK. GT. 1) THEN
                ASYIK(IK-1)= ASY
                ASYDM(IK-1)= DENOM
           ENDIF
           ASYIK(IKMAX)= ASYIK(1)
           ASYDM(IKMAX)= ASYDM(1)
      ENDIF
C
      EXT = SCT + ABT
C
      SUM=0.
      WO3  = W(8) * .269
      IF(V .GT.24370. .AND. V .LT.40800.) THEN
           W1O3 = W(59)
           W2O3 = W(60)
CCC        COZ   = C0  *(1.+ CT1  *TC+CT2   *TC*TC)
           ABBUV = C0 * (WO3+CT1*W1O3+CT2   *W2O3)
      ENDIF
      IF(V .GE.40800) THEN
           ABBUV = C0 *  WO3
      ENDIF
      SUM = SUM + ABBUV
      DO 125 JK=4,11
      TX(JK)=ABB(JK)*W(JK)
      IF(JK .EQ. 5) TX(5) = ABB(5) *(W(5) *1.0E-20)
      IF(JK .EQ. 9) TX(9) = ABB(9) *(W(9) *1.0E-20)
      IF(JK .EQ.10) TX(10)= ABB(10)*(W(10)*1.0E-20)
  125 SUM=SUM+TX(JK)
C
C  CONTINUUM OPTICAL THICKNESS (CUMULATIVE)
C
      TX(8) = TX(8) + ABBUV
      IF((IMULT. EQ. 1).AND.(INIT.EQ.0))THEN
           DCONT(IK)=TX(4)+TX(5)+TX(8)+TX(9)+TX(10)+TX(11)
      ENDIF
      TX(5)=TX(5)+TX(10)+TX(9)
C
C  STORE CUMULATIVE AEROSOL PARAMETERS FOR DIFFERENT VERTICAL REGIONS
C
      TX(10)= ABT
      TX(7) = EXT
C
C  WATCH OUT FOR NUMBERING OF LAYERS--BOTTOM=LAYER 1 IN LOWTRAN
C
C   STORE CUMULATIVE AEROSOL EXTINCTION AND SCATTERING OPTICAL
C   THICKNESS AND MOLECULAR SCATTERING OPTICAL THICKNESS
C
      IF((IMULT. EQ. 1).AND.(INIT.EQ.0))THEN
           DTX7(IK)=TX(7)
           DAERS(IK)=TX(7)-TX(10)
           DMOLS(IK)=TX(6)
      ENDIF
      SUM=SUM+TX(7)
      IF(ICLD. EQ. 20)THEN
           TX(16)=W(16)*2.
           SUM=SUM+TX(16)
      ENDIF
C***********************************************************************
C
C
C     OXYGEN
C
      WT2 =   W(1) - W(63)*220.
      TX(58) = SIGO20*(W(63)+SIGO2A*WT2+SIGO2B*W(2))
C
C  UV O2 HERZBERG CONTINUUM ABSORPTION CALCULATION
C
      TX(58)=W(58)*ABB(17)+ TX(58)
      IF((IMULT. EQ. 1).AND.(INIT.EQ.0))THEN
           DCONT(IK)=DCONT(IK) + TX(58)
      ENDIF
CCC   SUM=SUM+TX(58)
      TX(3) = TX(58)
C
C***********************************************************************
      TX(9)=SUM
      DO 205 K=3,16
CC    IF (TX(K).GT.20.0  ) TX(K)=20.0
CC    IF (TX(K).LT.-20.0 ) TX(K)=-20.0
      IF (TX(K).GT.BIGEXP) GO TO 200
      TX(K)=EXP(-TX(K))
      GO TO 205
  200 TX(K) = 1.0/BIGNUM
  205 CONTINUE
      TX(58)= TX( 3)
      TX(3)  = 1.
C  ---H2O
C
      IMOL = 1
      TEMP=1.0
      CP = CPS(IMOL)
      IF (CP .EQ. -20.0) GO TO 1001
      IB = IBND(IMOL)
      TEMP = DBLTX(W(IB),CP,A(IMOL))
 1001 TX(17)=TEMP
C  ---CO2
C
      IMOL = 2
      TEMP=1.0
      CP = CPS(IMOL)
      IF (CP .EQ. -20.0) GO TO 1002
      IB = IBND(IMOL)
      TEMP = DBLTX(W(IB),CP,A(IMOL))
 1002 TX(36)=TEMP
C  ---O3
C
      IMOL = 3
      TEMP=1.0
      CP = CPS(IMOL)
      IF (CP .EQ. -20.0) GO TO 1003
      IB = IBND(IMOL)
      TEMP = DBLTX(W(IB),CP,A(IMOL))
 1003 TX(31)=TEMP
C  ---N2O
C
      IMOL = 4
      TEMP=1.0
      CP = CPS(IMOL)
      IF (CP .EQ. -20.0) GO TO 1004
      IB = IBND(IMOL)
      TEMP = DBLTX(W(IB),CP,A(IMOL))
 1004 TX(47)=TEMP
C  ---CO
C
      IMOL = 5
      TEMP=1.0
      CP = CPS(IMOL)
      IF (CP .EQ. -20.0) GO TO 1005
      IB = IBND(IMOL)
      TEMP = DBLTX(W(IB),CP,A(IMOL))
 1005 TX(44)=TEMP
C  ---CH4
C
      IMOL = 6
      TEMP=1.0
      CP = CPS(IMOL)
      IF (CP .EQ. -20.0) GO TO 1006
      IB = IBND(IMOL)
      TEMP = DBLTX(W(IB),CP,A(IMOL))
 1006 TX(46)=TEMP
C  ---O2
C
      IMOL = 7
      TEMP=1.0
      CP = CPS(IMOL)
      IF (CP .EQ. -20.0) GO TO 1007
      IB = IBND(IMOL)
      TEMP = DBLTX(W(IB),CP,A(IMOL))
 1007 TX(50)=TEMP
C  ---NO
C
      IMOL =  8
      TEMP=1.0
      CP = CPS(IMOL)
      IF (CP .EQ. -20.0) GO TO 1008
      IB = IBND(IMOL)
      TEMP = DBLTX(W(IB),CP,A(IMOL))
 1008 TX(54)=TEMP
C  ---SO2
C
      IMOL =   9
      TEMP=1.0
      CP = CPS(IMOL)
      IF (CP .EQ. -20.0) GO TO 1009
      IB = IBND(IMOL)
      TEMP = DBLTX(W(IB),CP,A(IMOL))
 1009 TX(56)=TEMP
C  ---NO2
C
      IMOL =  10
      TEMP=1.0
      CP = CPS(IMOL)
      IF (CP .EQ. -20.0) GO TO 1010
      IB = IBND(IMOL)
      TEMP = DBLTX(W(IB),CP,A(IMOL))
 1010 TX(55)=TEMP
C  ---NH3
C
      IMOL = 11
      TEMP=1.0
      CP = CPS(IMOL)
      IF (CP .EQ. -20.0) GO TO 1011
      IB = IBND(IMOL)
      TEMP = DBLTX(W(IB),CP,A(IMOL))
 1011 TX(52)=TEMP
C     UNIF = UNIFORMLY MIXED GASES TRANSMITTANCE (DOUBLE EXPONENTIAL)
C     TRACE = TRACE GASES TRANSMITTANCE (DOUBLE EXPONENTIAL MODELS)
      UNIF=TX(36)*TX(44)*TX(46)*TX(47)*TX(50)*TX(58)
      TRACE=TX(52)*TX(54)*TX(55)*TX(56)
      TX(9)=TX(17)*UNIF*TX(31)*TX(9)*TRACE
      IF(IV .GE. 13000) TX(31) = TX(8)
C
C  SAVE TX(9) FROM PREVIOUS PASS, WHICH IS TOTAL TRANSMITTANCE
C  FOR ENTIRE ATMOSPHERIC PATH
C
1020  IF (IPATH .EQ. 1 ) DSTRN( 0)   = TX(9)
      IF((IMULT. EQ. 1).AND.(INIT.EQ.0))THEN
           IF (IPATH .EQ. 2 ) DSTRN(IK)   = TX(9)
           IF(IEMSCT .EQ. 1)  DSTRN(IK)   = 1.0
      ENDIF
C
C   DSTRN IS CUMULATIVE SOLAR TRANSMISSTION, USED IN CALCULATION
C   OF SOLAR TRANSMISSION TO LAYER N
C
C
C  IF THERMAL CASE ONLY, INITIALIZE STRN
C  STRN IS SOLAR TRANSMISSIVITY TO NTH LAYER FROM TOP OF ATM
C
C
C   INITIALIZE OMEGA0 FOR NO MULTIPLE SCATTERING CASES
C
CCC   IF(IMULT .EQ. 0) THEN
CCC   IF(IK. LE. ML)OMEGA0(IK)=0.0
CCC   ENDIF
      IF(ISCTTR.EQ.0) GO TO 209
      IF(IMULT. EQ. 1.AND.INIT.EQ.0) GO TO 207
 206  CONTINUE
C     TEST AGAINST ML1 INSERTED  FOR ERRATA TO WORK
      IF(IK .LE. ML1 .AND .IMULT .EQ. 1)
     X     CALL SSRAD(IPH,IK,ITZERO,IPATH,V,SUMSSR)
      IF(IMULT .EQ. 0)
     X     CALL SSRAD(IPH,IK,ITZERO,IPATH,V,SUMSSR)
207   IF(IPATH.EQ.3) GO TO 208
      IPATH=IPATH+1
      GO TO 111
208   IPATH=2
209   IF (IV.GE.13000) TX(3)=TX(8)
C     TO AVOID THE DIFFICULTY FOR WAVENUMBER BEING ZERO
      ALAM=9999.998
      IF(V.GT.0.)ALAM=1.0E+04/V
      IF (IEMSCT.EQ.0 .OR. IEMSCT.EQ.3) GO TO 220
C
C   FOR NO MULTIPLE SCATTERING, CALCULATE BLACK BODY FUNCTION,
C   AS WELL AS RADIANCE ADDING FOR THERMAL
C
      BBIK=BBFN(TBBY(IK),V)
C     TLNEW=(TX(9)*TX(10))/(TX(7)*TX(6))
C     TSNEW=(TX(7)*TX(6))/TX(10)
      TLNEW= TX(9)
      DTAU=TLOLD-TLNEW
      IF(IMULT.EQ.1) DTAU = TOTAL - TX(9)
      TOTAL = TX(9)
      IF(DTAU.LE.0.) DTAU=0.
      IF(IMULT .EQ. 0) THEN
           IF(NOPRNT. EQ. -1) THEN
              WRITE(IPR1,1210) V,AHT(IK),AHT(IK+1),BBIK,DTAU,TLNEW
 1210         FORMAT(F10.0,2F7.2,1P2E12.5,0PF12.9)
           ENDIF
      IF (IEMSCT.LT.2.AND.DTAU.LT.1.0E-5.AND.TLNEW.LT.1.0E-5) THEN
           IF(NOPRNT. EQ. -1) WRITE(IPR1,1220)
 1220      FORMAT('     -999.',T63,'  DTAU   EXIT LOOP ')
           GO TO 220
      ENDIF
      SUMV=SUMV+BBIK*DTAU
C     RADIANCE / CONSERVATIVE SCATTERING
      ELSE
      IF(INIT.EQ.0) GO TO 210
      N1 = ML - IMAP(IK) + IOFF
      IF(N1.GE.ML ) N1 = ML - 1
           IF(NOPRNT. EQ. -1) THEN
               N = N1 + 1
               WRITE(IPR1,1230) V,AHT(IK+1),UMB(N),UMBS(N),DMB(N),
     X         DMBS(N),SUN*TX(9),TX(9)
           ENDIF
      IF (DTAU.LT.1.0E-5.AND.TX(9).LT.1.0E-5) THEN
           IF(NOPRNT. EQ. -1) WRITE(IPR1,1220)
           GO TO 220
      ENDIF
      IF(QTHETA(IK). LT. (PI/2.)) THEN
C     UP
C
C   SU & SD ARE THERMAL UPWARD & DOWNWARD SOURCE FUNCTIONS
C   SUS & SDS ARE SOLAR UPWARD & DOWNWARD SOURCE FUNCTIONS
C
      SMS     =BBIK    *(1.-OMEGA0(N1))+OMEGA0(N1)/PI*
     1   (DMF(N1)*(1.-BET(IK)) +UMF(N1)*BET(IK))
      SMSS     =
     2  OMEGA0(N1)/PI*(DMFS(N1)*(1.-BET(IK))+UMFS(N1)*BET(IK))
      ELSE
C     DOWN
      SMS       =BBIK      *(1.-OMEGA0(N1  ))+OMEGA0(N1  )/PI*
     2 (UMF(N1  )* (1.-BET(IK  ))+DMF(N1)*BET(IK  ))
      SMSS       =    OMEGA0(N1  )/PI*
     2 (UMFS(N1  )*(1.-BET(IK  ))+DMFS(N1  )*BET(IK  ))
      ENDIF
      SUMV = SUMV + SMS  * DTAU
      SUMMS= SUMMS+ SMSS * DTAU
      ENDIF
      TLOLD=TLNEW
  210 CONTINUE
C*****END OF LAYER LOOP
  220 CONTINUE
C
C   THE FOLLOWING ROUTINE IS CALLED FOR MULTIPLE SCATTERING CASES ONLY
C
C   MSRAD RETURNS SOLAR AND THERMAL CONTRIBUTIONS TO RADIANCE
C   AND THERMAL (FDNTRT) DIFFUSE FLUX FOR SURFACE REFLECTION.
C   (THESE QUANTITIES IN COMMON /MSRD/)
C
      IF(IMULT .EQ. 0) GO TO 266
      IF(INIT  .NE. 0) GO TO 266
      CALL MSRAD(IV,V,ISOURC,IDAY,ANGLEM,SS,
     2     DMF,DMFS,UMF,UMFS)
C
      IF(NOPRNT. EQ. -1) THEN
          WRITE(IPR1,1230) V,AHT(1),UMB(1),UMBS(1),DMB(1),
     X    DMBS(1),SUN,1.
1230      FORMAT(F10.0,F7.2,1P5E12.5,0PF10.5)
      ENDIF
C
C   GO BACK AND CALCULATE RADIANCE FOR NON-MULTIPLE SCATTERING CASE
C
C
C     IKMAX AND IKMAXP NEED BE DEFINED FOR VEW TO SPACE
C
      IKMAX1 = IKMAX - 1
      IKMAXP = IKMAX + 1
      COSBAR(IKMAX) = COSBAR(IKMAX1)
      OMEGA0(IKMAX)  = OMEGA0(IKMAX1)
      UMF(IKMAX)   = UMF(IKMAX1)
      UMFS(IKMAX)   = UMFS(IKMAX1)
      DMFS(IKMAX)  =DMFS(IKMAX1)
      COSBAR(IKMAXP)= COSBAR(IKMAX1)
      OMEGA0(IKMAXP) = OMEGA0(IKMAX1)
      UMF(IKMAXP)  = UMF(IKMAX1)
      UMFS(IKMAXP)  = UMFS(IKMAX1)
      DMFS(IKMAXP) =DMFS(IKMAX1)
C
      IKMAX = IKMX
      INIT = INIT + 1
      DO 60 IK=1,IKMAX
      N  = ML - IMAP(IK) + IOFF
C
C   BET(N)     - BACKSCATTER FRACTION ALONG OPTICAL PATH AT LAYER N
C
      COZEN=ABS(COS(QTHETA(IK  )))
C
C    CALCULATE BACKSCATTER PARAMETERS
C
      IF(COSBAR(N) .EQ. 0.0) THEN
      BET(IK)=.5
      ELSE
      BET(IK)=BETABS(COZEN,COSBAR(N))
      ENDIF
60    CONTINUE
      BET(IKMAX+1)= .5
C
      GOTO 109
266   CONTINUE
      IF (IV.GT.IV1) FACTOR=1.0
      IF (IV.GE.IV2) FACTOR=0.5
      SUMA=SUMA+FACTOR*DV*(1.0-TX(9))
      IIII = IEMSCT+1
      ALTX9 = BIGNUM
      IF(TX(9) . GT. 0.)  ALTX9 = -LOG(TX(9))
      GO TO (300,400,400,600),IIII
  300 CONTINUE
C*****TRANSMITTANCE ONLY
      TX(10)=1.-TX(10)
      TX(7) = TX(7) * TX(16)
      WRITE(IPR,906) V,ALAM,TX(9),TX(17),UNIF,TX(31),TRACE,
     + TX(4),TX(5),TX(6),TX(7),TX(11),TX(10),SUMA
      TX(50) = TX(50) * TX(58)
      WRITE(IPR1,907)      V,TX(17),TX(31),TX(36),TX(44),TX(46),
     + TX(47),TX(50),TX(52),TX(54),TX(55),TX(56)
      WRITE(IPU,907)      V,TX(9),TX(17),UNIF,TX(31),TRACE,
     + TX(4),TX(5),TX(6),TX(7),TX(11),TX(10),ALTX9
  907 FORMAT(F7.0,11F8.4,1PE10.3)
      GO TO 700
  400 CONTINUE
C*****ATMOSPHERIC RADIANCE ONLY
C*****INCLUDE EMISSION OF BOUNDARY ATTENUATED BY TOTAL TRANSMISSION
C
C    CALCULATE THERMAL RADIANCE CONTRIBUTION OF BOUNDARY
C
C    SURDTR IS THE SCATTERED CONTRIBUTION TO THE THERMAL RADIANCE
C    BUT IS ONLY ADDED IF THE PATH INTERSECTS THE SURFACE
C
C
      SURDTR=0.0
      IF (IMLT .EQ. 1 .AND. H2 .EQ. 0.0) THEN
      SURDTR=SALB*FDNTRT*TX(9)/PI
      END IF
      IF (TBOUND .LE. 0.0) THEN
      BBG=0.0
      ELSE
      BBG=BBFN(TBOUND,V)*TX(9)*EMISS+SURDTR
      ENDIF
C
C   ADD THERMAL BOUNDARY AND MULTIPLE SCATTERED RADIANCE
C
      SUMV = SUMV + BBG
      SUMVV=SUMV
      IF(V. GT. 0.)SUMV=(1.0E+04/V**2)*SUMV
      IF(IEMSCT.EQ.2) GO TO 500
      RADSUM=RADSUM+DV*FACTOR*SUMV
      WRITE(IPR,916) V,ALAM ,SUMV,SUMVV,RADSUM,TX(9)
      WRITE(IPU,917) V,TX(9),SUMV,ALTX9
  917 FORMAT(F7.0,F8.4,1PE9.2,T96,E10.3)
      SUMT=SUMV
      SUMTT=SUMVV
      GO TO 700
  500 CONTINUE
C*****SOLAR SCATTERED RADIANCE
C*****MULTIPLY SUMSSR BY THE EXTRATERRESTRIAL SOURCE STRENGTH SS
      CALL SOURCE(V,ISOURC,IDAY,ANGLEM,SS)
C
C   CALCULATE TOTAL SINGLE SCATTERED + MULTIPLE SCATTERED SOLAR
C   RADIANCE FOR EACH FREQUENCY
C
      SUMSSS=SUMSSR*SS
      SUMSSR=SUMSSS+SUMMS
C*****SUMSSR IS THE SCATTERED RADIANCE IN (W/CM2-STER-MICROMETER)
      SUMS = 0.
      SUMSS = 0.
      IF(V. GT. 0.)SUMS=(1.0E4/V**2)*SUMSSR
      IF(V. GT. 0.)SUMSSS=(1.0E4/V**2)*SUMSSS
C*****RFLSOL IS GROUND-REFLECTED DIRECT SOURCE RADIANCE
      RFLSOL=0.
      RFLS=0.
      RFLSS=0.
C
C   SURDSR IS SURFACE REFLECTION OF DOWNWARD SCATTERED RADIANCE
C
      SURDSR=0.
      IF(H2.GT.ZM(1)) GO TO 510
      IF(TEB1.LE.0.)  GO TO 510
      IF(ANGSUN.GE.0.) RFLFAC=SALB*COS(ANGSUN*CA)/PI
C
C     FOR MULTIPLE SCATTERING CASES:
C
      IF (IMLT .EQ. 1) THEN
      SURDSR=SALB*FDNSRT*TX(9)/PI
      END IF
      RFLSSS=RFLFAC*TEB1*SS
      RFLSOL=RFLSSS+SURDSR
      RFLS = 0.
      RFLSS = 0.
      IF(V. GT. 0.)RFLS = 1.0E4/V**2*RFLSOL
      IF(V. GT. 0.)RFLSS = 1.0E4/V**2*RFLSSS
  510 CONTINUE
      SUMT=SUMV+SUMS+RFLS
      SUMTT=SUMVV+SUMSSR+RFLSOL
      RADSUM=RADSUM+DV*FACTOR*SUMT
      IF (IMLT .NE. 1) THEN
      WRITE(IPR,926) V,ALAM,SUMV,SUMVV,SUMS,SUMSSR,RFLS,RFLSOL,
     X    SUMT,SUMTT,RADSUM,TX(9)
      ELSE
      WRITE(IPR,928) V,ALAM,SUMV,SUMVV,SUMS,SUMSSR,SUMSSS,RFLS,RFLSOL,
     X    RFLSS,SUMT,SUMTT,RADSUM,TX(9)
      END IF
      WRITE(IPU,927) V,TX(9),SUMV,SUMS,SUMSSS,RFLS,
     X    RFLSS,SUMT,TEB1,TEB2SV,ALTX9
  927 FORMAT(F7.0,F8.4,1P6E9.2,0P2F8.4,T96,1PE10.3)
      GO TO 700
  600 CONTINUE
C*****DIRECTLY TRANSMITTED SOLAR IRRADIANCE
C*****SOLIL IS SOLAR IRRADIANCE IN WATTS/(CM2 MICROMETER)
      CALL SOURCE(V,ISOURC,IDAY,ANGLEM,SOLIL)
      SOLIV = 0.
      IF(V. GT. 0.)SOLIV = SOLIL*1.0E+4/V**2
      TSOLIV = SOLIV*TX(9)
      TSOLIL = SOLIL*TX(9)
      STSOL = STSOL+TSOLIV*DV*FACTOR
      SSOL = SSOL+SOLIV*DV*FACTOR
      WRITE(IPR,936) V,ALAM,TSOLIV,TSOLIL,SOLIV,SOLIL,STSOL,SSOL,TX(9)
      WRITE(IPU,937) V,TX(9),TSOLIV,SOLIV,ALTX9
  937 FORMAT(F7.0,F8.4,1P2E9.2,T96,E10.3)
      SUMT = TSOLIV
      RADSUM = STSOL
C*****
  700 CONTINUE
      IF(IEMSCT.EQ.0) GO TO 710
      IF(SUMT.GE.RADMAX) VRMAX = V
      IF(SUMT.GE.RADMAX) RADMAX= SUMT
      IF(SUMT.LE.RADMIN) VRMIN=V
      IF(SUMT.LE.RADMIN) RADMIN=SUMT
  710 CONTINUE
      IMULT=IMLT
      IF (IV.LT.IV2) GO TO 5
C*****END OF FREQUENCY LOOP
      AB=1.0-SUMA/FLOAT(IV-IV1)
      WRITE(IPR,740) IV1,IV,SUMA,AB
      IF(IEMSCT.EQ.0) GO TO 770
      IF(IEMSCT .EQ. 3) THEN
           WRITE(IPR,755) RADSUM,RADMIN,VRMIN,RADMAX,VRMAX
      ELSE
           WRITE(IPR,750) RADSUM,RADMIN,VRMIN,RADMAX,VRMAX
           WRITE(IPR,760) TBOUND,EMISS
      ENDIF
  770 CONTINUE
      RETURN
C*****
C*****FORMAT STATEMENTS FOR SPECTRAL DATA
C*****PAGE HEADERS
  900 FORMAT(1H1,/1X,'  FREQ WAVELENGTH  TOTAL     H2O     CO2+     ',
     +'OZONE    TRACE  N2 CONT  H2O CONT MOL SCAT  AER-HYD  HNO3    ',
     +'AER-HYD  INTEGRATED'/
     +           /1X,'  1/CM  MICRONS    TRANS    TRANS    TRANS    ',
     +'TRANS    TRANS   TRANS    TRANS    TRANS     TRANS   TRANS   ',
     +' ABS     ABSORPTION'/)
  901 FORMAT(     '   FREQ  H2O     O3       CO2    CO    ',
     + '   CH4     N2O    O2     NH3      NO     NO2      SO2',
     +           /'   1/CM  TRANS   TRANS    TRANS  TRANS ',
     + '   TRANS   TRANS  TRANS  TRANS    TRANS  TRANS    TRANS')
  910 FORMAT (1H1,20X,28HRADIANCE(WATTS/CM2-STER-XXX),
     X /,'0   FREQ',T10,'WAVLEN',T19,'ATMOS RADIANCE',T39,
     X ' INTEGRAL',T049,'TOTAL',/2X,'(CM-1)',T10,'(MICRN)',T19,'(CM-1)',
     X T29,'(MICRN)',T39,'(CM-1)',T49,'TRANS',/)
  920 FORMAT (1H1,45X,28HRADIANCE(WATTS/CM2-STER-XXX),
     X /,'0  FREQ',T11,'WAVLEN',T21,'ATMOS RADIANCE',T41,
     X 'PATH SCATTERED',T61,'GROUND REFLECTED',T85,'TOTAL',T98,
     X ' INTEGRAL',T110,'TOTAL',/2X,'(CM-1)',T10,'(MICRN)',T20,'(CM-1)',
     X T30,'(MICRN)',T40,'(CM-1)',T50,'(MICRN)',T60,'(CM-1)',T70,
     X'(MICRN)',T80,'(CM-1)',T90,'(MICRN)',T100,'(CM-1)',T110,'TRANS',/)
  921 FORMAT (1H1,45X,28HRADIANCE(WATTS/CM2-STER-XXX),/,
     X /,'0 FREQ',T10,'WAVLEN',T20,'ATMOS RADIANCE',T40,
     X 'PATH SCATTERED RADIANCE',T69,'GROUND REFLECTED RADIANCE',
     X T100,'TOTAL RADIANCE',T117,' INTEGRAL',T127,'TOTAL',/,T45,
     X 'TOTAL',T59,'S SCAT',T75,'TOTAL',T89,'DIRECT',/,1X,'(CM-1)',
     X T9,'(MICRN)',T19,'(CM-1)',T29,'(MICRN)',T39,'(CM-1)',T49,
     X '(MICRN)',T59,'(CM-1)',T69,'(CM-1)',T79,'(MICRN)',T89,'(CM-1)',
     X T99,'(CM-1)',T109,'(MICRN)',T119,'(CM-1)',T127,'TRANS',/)
  930 FORMAT('1',22X,'IRRADIANCE (WATTS/CM2-XXXX)',/
     1    '0  FREQ',T11,'WAVLEN',T23,'TRANSMITTED ',T45,
     2    'SOLAR',T61,'INTEGRATED',T80,'TOTAL',/,
     3    2X,'(CM-1)',T10,'(MICRN)',T20,'(CM-1)',T30,'(MICRN)',
     4    T40,'(CM-1)',T50,'(MICRN)',T60,'TRANS.',T70,'SOLAR',
     5    T80,'TRANS')
C*****SPECTRAL DATA TO UNIT=IPR (=6)
  906 FORMAT(1X,F7.0,F8.3,11F9.4,F12.3)
  916 FORMAT(1X,F7.0,F8.3,1P3E10.2,0PF9.4)
  926 FORMAT(1X,F7.0,F8.3,1P9E10.2,0PF9.4)
  928 FORMAT(1X,F6.0,F8.3,1P11E10.2,0PF7.4)
  936 FORMAT(1X,F7.0,F8.3,1P6E10.2,0PF9.4)
C*****SPECTRAL DATA TO UNIT=IPU (=7)
C*****SUMMARY VALUES
  720 FORMAT('0TRANSMISSION DUE TO CIRRUS = ',F10.4)
  740 FORMAT('0INTEGRATED ABSORPTION FROM',I5,' TO',I5,' CM-1 =',F10.2,
     1' CM-1',/,' AVERAGE TRANSMITTANCE =',F6.4,/)
  750 FORMAT('0INTEGRATED RADIANCE = ',1PE10.3,' WATTS CM-2 STER-1',/,
     X ' MINIMUM RADIANCE    = ',E10.3,' WATTS CM-2 STER-1 (CM-1)-1 ',
     X 'AT ', 0PF10.1,' CM-1',/,
     X ' MAXIMUM RADIANCE    = ',1PE10.3,' WATTS CM-2 STER-1 (CM-1)-1 ',
     X 'AT ',0PF10.1,' CM-1')
  755 FORMAT('0INTEGRATED IRRADIANCE = ',1PE10.3,' WATTS CM-2 ',/,
     X ' MINIMUM IRRADIANCE    = ',E10.3,' WATTS CM-2  (CM-1)-1 ',
     X 'AT ', 0PF10.1,' CM-1',/,
     X ' MAXIMUM IRRADIANCE    = ',1PE10.3,' WATTS CM-2  (CM-1)-1 ',
     X 'AT ',0PF10.1,' CM-1')
  760  FORMAT(' BOUNDARY TEMPERATURE = ',F10.2,' K',/,
     X ' BOUNDARY EMISSIVITY = ',F11.3)
      END Subroutine TRANS

      SUBROUTINE FUDGE(V,SUMY)
C
C     TO CALCULATE H2O FAR WING CONTINUUM USING THE SUMS OF EXPONENTIALS
C
C     THIS FUNCTION IS WITHIN 5% OF THE ORIGINAL "FUDGE" BETWEEN 0 AND
C     3000CM-1, PRESERVING THAT VALIDATION.
C     THE NEW FUNCTION IS 0.01 OF THE ORIGINAL NEAR 10000CM-1 (1.06NM),
C     IN ACCORDANCE WITH THE MEASUREMENTS OF JAYCOR, FUNDED BY SDIO.
C
C     Y0(V)=EXP(LOG(3.159E-8)-(2.75E-4)*V)
      Y1(V)=EXP(LOG(1.025*3.159E-8)-(2.75E-4)*V)
      Y2(V)=EXP(LOG(8.97E-6)-(1.300E-3)*V)
C
C     YO=Y0(V)
      YA=Y1(V)
      YB=Y2(V)
      YAINV=1/YA
      YBINV=1/YB
      SUMY=1./(1.*YAINV+1.*YBINV)
      RETURN
      END Subroutine FUDGE

      FUNCTION   ANDEX(H,SH,GAMMA)
C***********************************************************************
C     COMPUTES THE INDEX OF REFRACTION AT HEIGHT H, SH IS THE
C     SCALE HEIGHT, GAMMA IS THE VALUE AT H=0 OF THE REFRACTIVITY =
C     INDEX-1
C***********************************************************************
      COMMON /CNSTNS/ PI,CA,DEG,GCAIR,BIGNUM,BIGEXP
      IF(SH.EQ.0.0) GO TO 10
      IF(H. LE. 0.) GO TO 10
      HSH = H/SH
      IF(HSH .GT.BIGEXP) GO TO 20
      ANDEX = 1.0+GAMMA*EXP(-HSH )
      RETURN
   10 ANDEX = 1.0+GAMMA
      RETURN
  20  ANDEX = 1.
      RETURN
      END Function ANDEX

      FUNCTION   TNRAIN(RR,V,TM,RADFLD)
CCC
      COMMON /CNSTNS/ PI,CA,DEG,GCAIR,BIGNUM,BIGEXP
      COMMON /CARD3/ H1,H2,ANGLE,RANGE,BETA,RE,LEN
CCC   CALCULATES TRANSMISSION DUE TO RAIN AS A FUNCTION OF
CCC   RR=RAIN RATE IN MM/HR
CCC   OR WITHIN 350CM-1 USES THE MICROWAVE TABLE ROUTINE TO
CCC   OBTAIN THE EXTINCTION DUE TO RAIN
CCC   RANGE=SLANT RANGE KM
CCC
CCC   ASSUMES A MARSHALL-PALMER RAIN DROP SIZE DISTRIBUTION
CCC   N(D)=NZERO*EXP(-A*D)
CCC   NZERO=8.E3 (MM-1)  (M-3)
CCC   A=41.*RR**(-0.21)
CCC   D=DROP DIAMETER (CM)
CCC
      REAL NZERO
      DATA NZERO /8000./
CCC
      A=41./RR**0.21
CCC
      IF(RR.LE.0)TNRAIN=1.
      IF(RR.LE.0)RETURN
CCC
      IF(V.GE.350.0) THEN
       TNRAIN=PI*NZERO/A**3
      ELSE
       TNRAIN=GMRAIN(V,TM,RR)
       TNRAIN = TNRAIN * RADFLD
      END IF
      RETURN
      END Function TNRAIN

      SUBROUTINE RNSCAT(V,R,TT,PHASE,DIST,IK,CSSA,ASYMR,IENT)
C**********************************************************************
      INTEGER PHASE,DIST
      DIMENSION SC(3,4)
C
C          ARGUMENTS:
C
C          F = FREQUENCY (GHZ)
C          R = RAINFALL RATE (MM/HR)
C          T = TEMPERATURE (DEGREES CELSIUS)
C          PHASE = PHASE PARAMETER (1=WATER, 2=ICE)
C          DIST = DROP SIZE DISTRIBUTION PARAMETER
C                     (1=MARSHALL-PALMER, 2=BEST)
C
C          RESULTS:
C
C          SC(1) = ABSORPTION COEFFICIENT (1/KM)
C          SC(2) = EXTINCTION COEFFICIENT (1/KM)
C          SC(I),I=3,NSC = LEGENDRE COEFFICIENTS #I-3  (NSC=10)
C          ERR = ERROR RETURN CODE: 0=NO ERROR, 1=BAD FREQUENCY,
C                2=BAD RAINFALL RATE, 3=BAD TEMPERATURE,
C                4=BAD PHASE PARAMETER, 5=BAD DROP SIZE DISTRIBUTION
C
C          THE INTERNAL DATA:
C
      DIMENSION FR(9),TEMP(3)
C
C          FR(I),I=1,NF = TABULATED FREQUENCIES (GHZ)  (NF=9)
C          TEMP(I),I=1,NT = TABULATED TEMPERATURES  (NT=3)
C
C          THE BLOCK-DATA SECTION
C
      DATA RMIN,RMAX/0.,50./,NF/9/,NT/3/,NSC/4/,MAXI/3/
      DATA TK/273.15/,CMT0/1.0/,C7500/0.5/,G0/0.0/,G7500/0.85/
      DATA (TEMP(I),I=1,3)/-10.,0.,10./
      DATA (FR(I),I=1,9)/19.35,37.,50.3,89.5,100.,118.,130.,183.,231./
C
C      THIS SUBROUTINE REQUIRES FREQUENCIES IN GHZ
      NOPR = 0
      IF(IK .EQ. 1) NOPR = 1
      IF(IENT .GT.1) NOPR = 0
      F= V *29.97925
      FSAV=F
      RSAV=R
      TSAV=T
      INT=0
C      CONVERT TEMP TO DEGREES CELSIUS
      T=TT-TK
C      FREQ RANGE OF DATA 19.35-231 GHZ IF LESS THAN 19.35
C      SET UP PARAMETERS FOR INTERPOLATION
      IF(F.LT.FR(1)) THEN
        FL=0.0
        FM=FR(1)
        INT=1
        IF(NOPR .GT. 0) WRITE (6,801)
      END IF
C      IF MORE THAN 231 GHZ SET UP PARAMETERS FOR EXTRAPOLATION
       IF(F.GT.FR(NF)) THEN
         FL=FR(NF)
         FM=7500.
         INT=2
         IF(NOPR .GT. 0) WRITE (6,801)
      END IF
C      TEMP RANGE OF DATA IS -10 TO +10 DEGREES CELCIUS
C      IF BELOW OR ABOVE EXTREME SET AND DO CALCULATIONS AT EXTREME
      IF (T.LT.TEMP(1)) THEN
        T=TEMP(1)
        IF(NOPR .GT. 0) WRITE (6,802)
      END IF
C
      IF (T.GT.TEMP(3)) THEN
        T=TEMP(3)
        IF(NOPR .GT. 0) WRITE (6,802)
      END IF
C
C      RAIN RATE OF DATA IS FOR 0-50 MM/HR
C      IF GT 50 TREAT CALCULATIONS AS IF 50 MM/HR WAS INPUT
      IF(R.GT.50) THEN
        R=50.
        IF(NOPR .GT. 0) WRITE (6,803)
      END IF
C
      KI=1
C             FIGURE OUT THE SECOND INDEX
   10 J=PHASE+2*DIST
C
C
C             GET THE TEMPERATURE INTERPOLATION PARAMETER ST
C             IF NEEDED AND AMEND THE SECOND INDEX
      CALL BS(J,T,TEMP,NT,ST)
C
C             FIGURE OUT THE THIRD INDEX AND THE FREQUENCY INTERPOLATION
C             PARAMETER SF
      CALL BS(K,F,FR,NF,SF)
C
C             INITIALIZE SC
      DO 11 I=1,NSC
      SC(KI,I)=0.
   11 CONTINUE
      SC(KI,3)=1.
C
C             NOW DO THE CALCULATIONS
C
C             THE WATER CONTENT IS
      IF(DIST.EQ.1) THEN
      WC=.0889*R**.84
      ELSE
      WC=.067*R**.846
      END IF
C
C             FOR A TEMPERATURE DEPENDENT CASE, I.E.
      IF(J.LT.3) THEN
      S1=(1.-SF)*(1.-ST)
      S2=(1.-SF)*ST
      S3=SF*(1.-ST)
      S4=SF*ST
      DO 14 I=1,MAXI
      IF(I.LE.2) THEN
      ISC=I
      ELSE
      ISC=I+1
      END IF
      SC(KI,ISC)=S1*TAB(I,J,K,WC)+S2*TAB(I,J+1,K,WC)+
     *             S3*TAB(I,J,K+1,WC)+S4*TAB(I,J+1,K+1,WC)
   14 CONTINUE
C
C             FOR A TEMPERATURE INDEPENDENT CASE
      ELSE
      S1=1.-SF
      S2=SF
      DO 17 I=1,MAXI
      IF(I.LE.2) THEN
      ISC=I
      ELSE
      ISC=I+1
      END IF
      SC(KI,ISC)=S1*TAB(I,J,K,WC)+S2*TAB(I,J,K+1,WC)
   17 CONTINUE
      END IF
      F=FSAV
      IF(INT.EQ.3) GO TO 20
      IF(INT.EQ.4) GO TO 30
      IF(INT.EQ.0) THEN
        CSSA=SC(KI,1)/SC(KI,2)
        IF(CSSA.GT.1.0) CSSA=1.0
        ASYMR=SC(KI,4)/3.0
        F=FSAV
        R=RSAV
        T=TSAV
      RETURN
      END IF
      IF(INT.EQ.1) THEN
        INT=3
        F=FM
        KI=2
      END IF
      IF(INT.EQ.2) THEN
        INT=4
        F=FL
        KI=3
      END IF
      GO TO 10
   20 CONTINUE
      FDIF=FM-F
      FTOT=FM-FL
      CM=SC(KI,1)/SC(KI,2)
      IF(CM.GT.1.0) CM=1.0
      CL=CMT0
      AM=SC(KI,4)/3.0
      AL=G0
      GO TO 40
   30 CONTINUE
      FDIF=FM-F
      FTOT=FM-FL
      CM=C7500
      CL=SC(KI,1)/SC(KI,2)
      IF(CL.GT.1.0) CL=1.0
      AM=G7500
      AL=SC(KI,4)/3.0
   40 CTOT=CM-CL
      CAMT=FDIF*CTOT/FTOT
      CSSA=CM-CAMT
      ATOT=AM-AL
      AAMT=FDIF*ATOT/FTOT
      ASYMR=AM-AAMT
      F=FSAV
      R=RSAV
      T=TSAV
      RETURN
801   FORMAT(2X,'***  THE ASYMMETRY PARAMETER DUE TO RAIN IS BASED ON',
     1 'DATA BETWEEN 19 AND 231 GHZ',
     2 /2X,'***  EXTRAPOLATION IS USED FOR FREQUENCIES LOWER AND',
     3 'HIGHER THAN THIS RANGE')
802   FORMAT(2X,'***  TEMPERATURE RANGE OF DATA IS -10 TO +10 ',
     1'DEGREES CELSIUS',/2X,'***  BEYOND THESE VALUES IT IS ',
     2'TREATED AS IF AT THE EXTREMES')
803   FORMAT(2X,'***  RAIN RATES BETWEEN 0 AND 50 MM/HR ARE',
     1'WITHIN THIS DATA RANGE',/2X,'***  ABOVE THAT THE ASYMMETRY',
     2' PARAMETER IS CALCULATED FOR 50 MM/HR')
      END Subroutine RNSCAT

      SUBROUTINE BS(I,A,B,N,S)

      Integer,Intent(OUT)   :: I
      Real,Intent(OUT)      :: S
      Integer, Intent(IN)   :: N
      Real,Intent(IN)       :: A,B

      DIMENSION B(*)                                                    BS   120
C                                                                       BS   130
C             THIS SUBROUTINE DOES THE BINARY SEARCH FOR THE INDEX I    BS   140
C             SUCH THAT A IS IN BETWEEN B(I) AND B(I+1)                 BS   150
C             AND CALCULATES THE INTERPOLATION PARAMETER S              BS   160
C             SUCH THAT A=S*B(I+1)+(1.-S)*B(I)                          BS   170
C                                                                       BS   180
      I=1
      J=N

   10 M=(I+J)/2
      IF(A.LE.B(M)) THEN
        J=M
      ELSE
        I=M
      END IF
      IF(J.GT.I+1) GO TO 10

      S=(A-B(I))/(B(I+1)-B(I))
      RETURN
      END Subroutine BS

      FUNCTION   TAB(I,J,K,WC)
C**********************************************************************
C
C          THE INTERNAL DATA:
C
      DIMENSION A(9,6,9),ALPHA(9,6,9),A1(5),A2(5),ALPHA1(5),
     *    MAXI(6,9)
C
C          A(1,J,K),J=1,3 = POWER LAW COEFFICIENT FOR THE ABSORPTION
C            COEFICIENT FOR THE MARSHALL-PALMER WATER DROP SIZE
C            DISTRIBUTION FOR TEMPERATURE=10.*(J-2) AND FREQUENCY=FR(K)
C          A(2,J,K),J=1,3 = THE SAME FOR THE EXTINCTION COEFFICIENT
C          A(I,J,K),J=1,3,I=3,9 = THE SAME FOR THE LEGENDRE
C                                      COEFFICIENT #I-2
C          A(I,4,K),I=1,9 = THE SAME AS A(I,2,K), BUT FOR ICE
C                             (NO TEMPERATURE DEPENDENCE)
C          A(I,5,K),I=1,9 = THE SAME AS A(I,2,K), BUT FOR THE BEST DROP
C            SIZE DISTRIBUTION (NO TEMPRATURE DEPENDENCE)
C          A(I,6,K),I=1,9 = THE SAME AS A(I,5,K), BUT FOR ICE
C          ALPHA(I,J,K) = THE POWER EXPONENET CORRESPONDING TO A(I,J,K)
C          MAXI(J,K): TAB(I,J,K,WC)=0. IF I.GT.MAXI(J,K)
C          A1, A2 AND ALPHA1 = THE POWER-LINEAR LAW COEFFICIENTS AND
C                 EXPONENT FOR THE EXCEPTIONAL CASES
C
C          THE FORMULA:
C
C          SC=A*WC**ALPHA IF ABS(A).GT.10.**-8,
C          SC=A1*WC**ALPHA1+A2*WC IF ABS(A).LE.10.**-8,
C                    A1, A2 AND ALPHA1 ARE INDEXED BY INT(ALPHA)
C
C          THE BLOCK-DATA SECTION
C
      DATA ((MAXI(J,K),J=1,6),K=1,9)/4*6,14*7,36*9/
      DATA (A1(I),A2(I),ALPHA1(I),I=1,5)/.611,-.807,1.18,.655,-.772,1.08
     * ,.958,-1.,.99,.538,-.696,1.27,1.58,-1.50,1.02/
      DATA ((A(I,J,1),J=1,6),I=1,7)/.284,.285,.294,.001336,.36,.00146,
     *.363,.365,.375,.0148,.528,.0317,3*0.,.3147,0.,.438,
     *.4908,.487,.482,.528,.478,.538,3*.0350,.0470,.0482,.0647,
     *.002,.00205,.00208,.00285,.0037,.0048,4*0.,.00021,.00016/
      DATA ((ALPHA(I,J,1),J=1,6),I=1,7)/1.214,1.233,1.25,1.035,1.22,
     *1.076,1.291,1.31,1.323,1.63,1.334,1.74,3.1,2.1,1.1,5.005,4.1,.555,
     *-.009,-.013,-.016,.028,-.019,.031,.398,.399,.4,.473,.461,.525,
     *1.06,.97,1.03,1.03,1.18,1.16,4*0.,1.3,1.3/
      DATA ((A(I,J,2),J=1,6),I=1,7)/.8,.77,.73,.00344,.76,.0043,
     *1.28,1.27,1.24,.162,1.43,.332,.254,.172,0.,.93,.32,1.29,
     *.5,.486,.4706,.69,.481,.8,.0965,.0936,.09,.159,.151,.234,
     *.0234,.0228,.0221,.034,.057,.065,2*.0037,.0035,.005,.011,.0106/
      DATA ((ALPHA(I,J,2),J=1,6),I=1,7)/2*1.1,1.09,1.13,1.02,1.19,
     *2*1.20,1.15,1.66,1.14,1.7,.29,.42,5.1,.39,.66,.44,
     *0.,-.01,-.0199,.12,-.01,.17,.386,.378,.2,.48,.485,.56,
     *.92,.91,.90,.97,1.15,1.13,1.32,1.26,1.32,1.41,1.69,1.67/
      DATA ((A(I,J,3),J=1,6),I=1,7)/1.11,1.07,1.02,.0059,.92,.00775,
     *1.88,1.89,1.87,.43,1.80,.77,.512,.425,.336,1.25,.677,1.55,
     *.561,.534,.506,.867,.6,1.07,.175,.165,.156,.300,.292,.49,
     *.066,.064,.061,.105,.16,.22,
     *.0169,.0162,.0156,.023,.055,.056/
      DATA ((ALPHA(I,J,3),J=1,6),I=1,7)/2*1.01,1.,1.18,.92,1.23,
     *3*1.1,1.58,1.,1.57,.264,.320,.445,.27,.416,.27,
     *.048,.033,.018,.168,.09,.224,.429,.417,.402,.501,.528,.62,
     *2*.83,.82,.9,1.01,1.11,1.22,1.21,1.2,1.23,1.51,1.53/
      DATA ((A(I,J,4),J=1,6),I=1,9)/1.51,1.49,1.44,.0163,1.12,.0194,
     *2.73,2.77,2.79,1.61,2.18,1.9,1.14,1.054,.961,1.57,1.36,1.66,
     *.99,.93,.87,1.31,1.33,1.63,.594,.557,.516,.77,1.02,1.16,
     *.352,.334,.315,.43,.73,.8,.171,.163,.154,.18,.47,.43,
     *.084,.081,.077,.106,.29,.32,.037,.036,.034,.029,.16,.11/
      DATA ((ALPHA(I,J,4),J=1,6),I=1,9)/.87,.86,.85,1.181,.79,1.16,
     *.93,.92,.91,1.3,.84,1.18,.188,.21,.24,.09,.21,.06,
     *2*.2,.19,.175,.275,.2,2*.461,.459,.39,.51,.41,
     *2*.66,.65,.58,.70,.64,2*.94,.93,.84,1.03,1.01,
     *3*1.22,1.09,1.37,1.4,1.58,1.56,1.54,1.5,1.8,1.9/
      DATA ((A(I,J,5),J=1,6),I=1,9)/1.55,1.53,1.49,.0194,1.14,.0225,
     *2.82,2.87,2.90,1.91,2.22,2.,1.266,1.184,1.093,1.60,1.48,1.65,
     *1.13,1.07,1.,1.4,1.51,1.69,.74,.698,.649,.87,1.24,1.23,
     *.465,.444,.418,.52,.94,.91,.248,.238,.225,.24,.65,.53,
     *.132,.128,.122,.15,.43,.47,.065,.063,.06,.045,.26,.16/
      DATA ((ALPHA(I,J,5),J=1,6),I=1,9)/.85,.84,.83,1.168,.78,1.15,
     *.9,.89,.88,1.23,.82,1.11,.172,.191,.216,.071,.181,.04,
     *.222,.221,.22,.165,.274,.17,.452,.454,.456,.35,.48,.33,
     *.63,.68,.63,.52,.66,.55,3*.89,.76,.94,.86,
     *1.14,1.13,1.12,.96,1.24,1.1,1.44,1.41,1.43,1.31,1.6,1.6/
      DATA ((A(I,J,6),J=1,6),I=1,9)/2*1.58,1.54,.0248,1.15,.0279,
     *2.94,2.97,3.,2.34,2.25,2.2,1.447,1.374,1.288,1.62,1.64,1.63,
     *1.37,1.31,1.234,1.52,1.8,1.77,1.,.96,.898,1.01,1.6,1.3,
     *.68,.66,.62,.66,1.31,1.07,.41,.4,.38,.33,.99,.66,
     *.25,.24,.23,.23,.71,.56,.136,.133,.127,.081,.49,.26/
      DATA ((ALPHA(I,J,6),J=1,6),I=1,9)/.83,.81,.8,1.145,.762,1.120,
     *.87,.86,.85,1.14,.799,1.,.149,.165,.184,.046,.148,.014,
     *.232,.236,.238,.146,.255,.13,.428,.433,.438,.28,.44,.23,
     *3*.59,.44,.59,.43,3*.81,.64,.83,.66,
     *1.02,2*1.01,.81,1.06,.89,2*1.25,1.24,1.07,1.36,1.3/
      DATA ((A(I,J,7),J=1,6),I=1,9)/1.60,1.59,1.56,.0285,1.16,.0314,
     *2.98,3.02,3.05,2.6,2.26,2.3,1.546,1.481,1.4,1.63,1.72,1.62,
     *1.52,1.464,1.388,1.58,1.97,1.8,1.18,1.13,1.07,1.08,1.82,1.33,
     *.84,.82,.78,.75,1.55,1.16,.54,.53,.5,.4,1.22,.74,
     *.34,.33,.32,.3,.93,.67,2*.2,.19,.112,.67,.33/
      DATA ((ALPHA(I,J,7),J=1,6),I=1,9)/.81,.80,.788,1.132,.753,1.105,
     *.85,.84,.83,1.09,.788,.95,.136,.153,.167,.033,.131,.004,
     *.232,.236,.241,.133,.24,.11,.411,.416,.422,.25,.40,.19,
     *3*.56,.4,.55,.38,2*.77,.76,.58,.76,.56,
     *3*.95,.74,.97,.78,1.17,2*1.16,.98,1.23,1.11/
      DATA ((A(I,J,8),J=1,6),I=1,9)/2*1.60,1.58,.045,1.15,.0461,
     *3.08,3.09,3.1,3.3,2.27,2.32,1.849,1.81,1.75,1.628,1.98,1.606,
     *2.07,2.04,1.98,1.78,2.5,1.946,1.89,1.86,1.81,1.30,2.6,1.508,
     *1.58,1.56,1.52,1.11,2.49,1.57,1.22,1.21,1.18,.68,2.2,1.11,
     *2*.91,.89,.61,2.,1.18,2*.65,.64,.299,1.6,.73/
      DATA ((ALPHA(I,J,8),J=1,6),I=1,9)/.777,.764,.752,1.092,.729,1.057,
     *.796,.79,.784,.96,.756,.81,.1,.108,.117,.004,.089,-.006,
     *.207,.210,.215,.093,.182,.075,2*.34,.35,.15,.30,.122,
     *3*.46,.3,.41,.28,3*.61,.42,.55,.394,
     *3*.75,.56,.7,.55,2*.91,.9,.76,.87,.79/
      DATA ((A(I,J,9),J=1,6),I=1,9)/2*1.58,1.56,.0587,1.13,.0579,
     *3.09,2*3.08,3.39,2.26,2.33,2.009,1.99,1.95,1.624,2.11,1.64,
     *2.43,2.42,2.38,1.902,2.80,2.078,2*2.42,2.38,1.454,3.09,1.7,
     *2*2.2,2.17,1.4,3.1,1.91,1.87,1.88,1.85,.94,3.,1.46,
     *2*1.54,1.52,.93,2.8,1.64,2*1.22,1.21,.53,2.5,1.17/
      DATA ((ALPHA(I,J,9),J=1,6),I=1,9)/.757,.746,.736,1.06,.717,1.024,
     *.766,.764,.761,.86,.74,.763,.084,.087,.092,-.0018,.069,.007,
     *.183,.182,.184,.078,.148,.075,3*.29,.128,.24,.13,
     *.4,2*.39,.264,.33,.256,2*.52,.51,.367,.44,.360,
     *2*.63,.62,.49,.55,.47,.76,2*.75,.67,.67,.66/
C
C
      IF(I.GT.MAXI(J,K)) THEN
      TAB=0.
      RETURN
      END IF
      IF(ABS(A(I,J,K)).GT.1.E-8) THEN
      TAB=A(I,J,K)*WC**ALPHA(I,J,K)
      ELSE
      L=ALPHA(I,J,K)
      TAB=A1(L)*WC**ALPHA1(L)+A2(L)*WC
      END IF
      RETURN
      END
      BLOCK DATA ABCD
C>    BLOCK DATA
      COMMON /ABC/ FACTOR(3),ANH3(2),ACO2(10),ACO(3),
     X             ACH4(4),ANO2(3),AN2O(11),AO2(6),AO3(5),
     X             ASO2(4),AH2O(14),ANO,
     X             AANH3(2),BBNH3(2),CCNH3(2),
     X             AACO2(10),BBCO2(10),CCCO2(10),
     X             AACO(3),BBCO(3),CCCO(3),
     X             AACH4(4),BBCH4(4),CCCH4(4),
     X             AANO2(3),BBNO2(3),CCNO2(3),
     X             AAN2O(11),BBN2O(11),CCN2O(11),
     X             AAO2(6),BBO2(6),CCO2(6),
     X             AAO3(5),BBO3(5),CCO3(5),
     X             AASO2(4),BBSO2(4),CCSO2(4),
     X             AAH2O(14),BBH2O(14),CCH2O(14),
     X             AANO     ,BBNO     ,CCNO
      DATA FACTOR/1.0,0.09,0.015/
      DATA ANH3/.4704,.6035/
      DATA ACO2/.6176,.6810,.6033,.6146,.6513,.6050,
     1 .6160,.7070,.7070,.7070/
      DATA ACO/.6397,.6133,.6133/
      DATA ACH4/.5844,.5844,.5844,.5844/
      DATA ANO/.6613/
      DATA ANO2/.7249,.7249,.7249/
      DATA AN2O/.8997,.7201,.7201,.7201,.7201,.7201,
     1 .6933,.6933,.6933,.6933,.6933/
      DATA AO2/.6011,.5641,.5641,.5641,.5641,.5641/
      DATA AO3/.8559,.7593,.7819,.9175,.7703/
      DATA ASO2/.8907,.8466,.8466,.8466/
      DATA AH2O/.5274,.5299,.5416,.5479,.5495,.5464,.5454,
     1 .5474,.5579,.5621,.5847,.6076,.6508,.6570/
      DATA AANH3/.285772,.134244/
      DATA BBNH3/.269839,.353937/
      DATA CCNH3/19.9507,27.8458/
      DATA AACO2/.120300,.069728,.134448,.123189,.090948,
     1 .132717,.121835,.054348,.054348,.054348/
      DATA BBCO2/.348172,.303510,.354002,.349583,.327160,
     1 .353435,.348936,.280674,.280674,.280674/
      DATA CCCO2/29.4277,37.0842,27.8241,29.0834,33.4608,
     1 28.0093,29.2436,40.1951,40.1951,40.1951/
      DATA AACO/.100401,.124454,.124454/
      DATA BBCO/.335296,.350165,.350165/
      DATA CCCO/32.0496,28.9354,28.9354/
      DATA AACH4/.154447,.154447,.154447,.154447/
      DATA BBCH4/.357657,.357657,.357657,.357657/
      DATA CCCH4/25.8920,25.8920,25.8920,25.8920/
      DATA AANO/.083336/
      DATA BBNO/.319585/
      DATA CCNO/34.6834/
      DATA AANO2/.045281,.045281,.045281/
      DATA BBNO2/.264248,.264248,.264248/
      DATA CCNO2/42.2784,42.2784,42.2784/
      DATA AAN2O/.001679,.047599,.047599,.047599,.047599,
     1 .047599,.062106,.062106,.062106,.062106,.062106/
      DATA BBN2O/.095621,.268696,.268696,.268696,.268696,
     1 .268696,.292891,.292891,.292891,.292891,.292891/
      DATA CCN2O/59.3660,41.7251,41.7251,41.7251,41.7251,
     1 41.7251,38.5667,38.5667,38.5667,38.5667,38.5667/
      DATA AAO2/.136706,.177087,.177087,.177087,.177087,.177087/
      DATA BBO2/.354683,.355447,.355447,.355447,.355447,.355447/
      DATA CCO2/27.5869,24.1314,24.1314,24.1314,24.1314,24.1314/
      DATA AAO3/.006712,.030870,.023278,.000458,.027004/
      DATA BBO3/.138026,.231722,.209952,.078492,.221153/
      DATA CCO3/55.6442,46.1189,48.5155,60.7802,47.2982/
      DATA AASO2/.002468,.008192,.008192,.008192/
      DATA BBSO2/.104307,.147065,.147065,.147065/
      DATA CCSO2/58.6298,54.8078,54.8078,54.8078/
      DATA AAH2O/.219312,.216415,.206349,.196196,.194540,.198500,
     1 .198500,.196196,.184148,.179360,.154120,.130095,.091341,.086549/
      DATA BBH2O/.334884,.336904,.343272,.348610,.349810,.347498,
     1 .347498,.348610,.353429,.354864,.357640,.352497,.327526,.322898/
      DATA CCH2O/21.8352,21.9588,22.4234,22.9517,23.0750,22.8262,
     1 22.8262,22.9517,23.6654,23.9774,25.9207,28.2957,33.3998,34.1575/
      END

      SUBROUTINE ABCDTA(IV)
      COMMON RELHUM(34),HSTOR(34),ICH(4),VH(17),TX(63),W(63)
      COMMON             WPATH(68, 63),TBBY(68)
      COMMON ABSC(5,47),EXTC(5,47),ASYM(5,47),VX2(47),AWCCON(5)
C
      COMMON /ABC/ FACTOR(3),ANH3(2),ACO2(10),ACO(3),
     X             ACH4(4),ANO2(3),AN2O(11),AO2(6),AO3(5),
     X             ASO2(4),AH2O(14),ANO,
     X             AANH3(2),BBNH3(2),CCNH3(2),
     X             AACO2(10),BBCO2(10),CCCO2(10),
     X             AACO(3),BBCO(3),CCCO(3),
     X             AACH4(4),BBCH4(4),CCCH4(4),
     X             AANO2(3),BBNO2(3),CCNO2(3),
     X             AAN2O(11),BBN2O(11),CCN2O(11),
     X             AAO2(6),BBO2(6),CCO2(6),
     X             AAO3(5),BBO3(5),CCO3(5),
     X             AASO2(4),BBSO2(4),CCSO2(4),
     X             AAH2O(14),BBH2O(14),CCH2O(14),
     X             AANO     ,BBNO     ,CCNO
C
      COMMON /AABBCC/ AA(11),BB(11),CC(11),IBND(11),A(11),CPS(11)
      DIMENSION TJO(10)
      DATA TJO /.9,.8,.7,.6,.5,.4,.3,.2,.1,.02/
C
C    MOL
C     1    H2O (ALL REGIONS) (DOUBLE EXPONENTIAL MODELS)
C     2    CO2 (ALL REGIONS) (DOUBLE EXPONENTIAL MODELS)
C     3    O3  (ALL REGIONS) (DOUBLE EXPONENTIAL MODELS)
C     4    N2O (ALL REGIONS) (DOUBLE EXPONENTIAL MODELS)
C     5    CO  (ALL REGIONS) (DOUBLE EXPONENTIAL MODELS)
C     6    CH4 (ALL REGIONS) (DOUBLE EXPONENTIAL MODELS)
C     7    O2  (ALL REGIONS) (DOUBLE EXPONENTIAL MODELS)
C     8    NO  (ALL REGIONS) (DOUBLE EXPONENTIAL MODELS)
C     9    SO2 (ALL REGIONS) (DOUBLE EXPONENTIAL MODELS)
C    10    NO2 (ALL REGIONS) (DOUBLE EXPONENTIAL MODELS)
C    11    NH3 (ALL REGIONS) (DOUBLE EXPONENTIAL MODELS)
C
C  ---H2O
      IMOL = 1
      IW = -1
      IF(IV.GE.     0.AND.IV.LE.   345) IW = 17
      IF(IV.GE.   350.AND.IV.LE.  1000) IW = 18
      IF(IV.GE.  1005.AND.IV.LE.  1640) IW = 19
      IF(IV.GE.  1645.AND.IV.LE.  2530) IW = 20
      IF(IV.GE.  2535.AND.IV.LE.  3420) IW = 21
      IF(IV.GE.  3425.AND.IV.LE.  4310) IW = 22
      IF(IV.GE.  4315.AND.IV.LE.  6150) IW = 23
      IF(IV.GE.  6155.AND.IV.LE.  8000) IW = 24
      IF(IV.GE.  8005.AND.IV.LE.  9615) IW = 25
      IF(IV.GE.  9620.AND.IV.LE. 11540) IW = 26
      IF(IV.GE. 11545.AND.IV.LE. 13070) IW = 27
      IF(IV.GE. 13075.AND.IV.LE. 14860) IW = 28
      IF(IV.GE. 14865.AND.IV.LE. 16045) IW = 29
      IF(IV.GE. 16340.AND.IV.LE. 17860) IW = 30
      IBAND = IW - 16
      IBND(IMOL) = IW
      IF(IW .GT.  0) THEN
           A(IMOL)  =   AH2O(IBAND)
           AA(IMOL)  = AAH2O(IBAND)
           BB(IMOL)  = BBH2O(IBAND)
           CC(IMOL)  = CCH2O(IBAND)
      ENDIF
C  ---O3
      IMOL = 3
      IW = -1
      IF (IV .GE.     0 .AND. IV .LE.   200)  IW = 31
      IF (IV .GE.   515 .AND. IV .LE.  1275)  IW = 32
      IF (IV .GE.  1630 .AND. IV .LE.  2295)  IW = 33
      IF (IV .GE.  2670 .AND. IV .LE.  2845)  IW = 34
      IF (IV .GE.  2850 .AND. IV .LE.  3260)  IW = 35
      IBAND      = IW - 30
      IBND(IMOL) = IW
      IF(IW .GT.  0) THEN
           A(IMOL)  =  AO3(IBAND)
           AA(IMOL) = AAO3(IBAND)
           BB(IMOL) = BBO3(IBAND)
           CC(IMOL) = CCO3(IBAND)
      ENDIF
C  ---CO2
      IMOL = 2
      IW = -1
      IF (IV .GE.   425 .AND. IV .LE.   835)  IW = 36
      IF (IV .GE.   840 .AND. IV .LE.  1440)  IW = 37
      IF (IV .GE.  1805 .AND. IV .LE.  2855)  IW = 38
      IF (IV .GE.  3070 .AND. IV .LE.  3755)  IW = 39
      IF (IV .GE.  3760 .AND. IV .LE.  4065)  IW = 40
      IF (IV .GE.  4530 .AND. IV .LE.  5380)  IW = 41
      IF (IV .GE.  5905 .AND. IV .LE.  7025)  IW = 42
      IF((IV .GE.  7395 .AND. IV .LE.  7785) .OR.
     *   (IV .GE.  8030 .AND. IV .LE.  8335) .OR.
     *   (IV .GE.  9340 .AND. IV .LE.  9670)) IW = 43
      IBAND = IW - 35
      IBND(IMOL) = IW
      IF(IW .GT.  0) THEN
           A(IMOL)  =  ACO2(IBAND)
           AA(IMOL) = AACO2(IBAND)
           BB(IMOL) = BBCO2(IBAND)
           CC(IMOL) = CCCO2(IBAND)
      ENDIF
C  ---CO
      IMOL = 5
      IW = -1
      IF (IV .GE.     0 .AND. IV .LE.   175) IW = 44
      IF((IV .GE.  1940 .AND. IV .LE.  2285) .OR.
     *   (IV .GE.  4040 .AND. IV .LE.  4370)) IW = 45
      IBAND = IW - 43
      IBND(IMOL) = IW
      IF(IW .GT.  0) THEN
           A(IMOL)  =  ACO(IBAND)
           AA(IMOL) = AACO(IBAND)
           BB(IMOL) = BBCO(IBAND)
           CC(IMOL) = CCCO(IBAND)
      ENDIF
C  ---CH4
      IMOL = 6
      IW = -1
      IF((IV .GE.  1065 .AND. IV .LE.  1775) .OR.
     *   (IV .GE.  2345 .AND. IV .LE.  3230) .OR.
     *   (IV .GE.  4110 .AND. IV .LE.  4690) .OR.
     *   (IV .GE.  5865 .AND. IV .LE.  6135))IW = 46
      IBAND = IW - 45
      IBND(IMOL) = IW
      IF(IW .GT.  0) THEN
           A(IMOL)  =  ACH4(IBAND)
           AA(IMOL) = AACH4(IBAND)
           BB(IMOL) = BBCH4(IBAND)
           CC(IMOL) = CCCH4(IBAND)
      ENDIF
C  ---N2O
      IMOL = 4
      IW = -1
      IF (IV .GE.     0 .AND. IV .LE.   120)  IW = 47
      IF((IV .GE.   490 .AND. IV .LE.   775) .OR.
     *   (IV .GE.   865 .AND. IV .LE.   995) .OR.
     *   (IV .GE.  1065 .AND. IV .LE.  1385) .OR.
     *   (IV .GE.  1545 .AND. IV .LE.  2040) .OR.
     *   (IV .GE.  2090 .AND. IV .LE.  2655)) IW = 48
      IF((IV .GE.  2705 .AND. IV .LE.  2865) .OR.
     *   (IV .GE.  3245 .AND. IV .LE.  3925) .OR.
     *   (IV .GE.  4260 .AND. IV .LE.  4470) .OR.
     *   (IV .GE.  4540 .AND. IV .LE.  4785) .OR.
     *   (IV .GE.  4910 .AND. IV .LE.  5165)) IW = 49
      IBAND = IW - 46
      IBND(IMOL) = IW
      IF(IW .GT.  0) THEN
           A(IMOL)  =  AN2O(IBAND)
           AA(IMOL) = AAN2O(IBAND)
           BB(IMOL) = BBN2O(IBAND)
           CC(IMOL) = CCN2O(IBAND)
      ENDIF
C  ---O2
      IMOL = 7
      IW = -1
      IF (IV .GE.     0 .AND. IV .LE.   265)  IW = 50
      IF((IV .GE.  7650 .AND. IV .LE.  8080) .OR.
     *   (IV .GE.  9235 .AND. IV .LE.  9490) .OR.
     *   (IV .GE. 12850 .AND. IV .LE. 13220) .OR.
     *   (IV .GE. 14300 .AND. IV .LE. 14600) .OR.
     *   (IV .GE. 15695 .AND. IV .LE. 15955)) IW = 51
       IF(IV .GE. 49600 .AND. IV. LE. 52710)  IW = 51
      IBAND = IW - 49
      IBND(IMOL) = IW
      IF(IW .GT.  0) THEN
           A(IMOL)  =  AO2(IBAND)
           IF(IV .GE. 49600 .AND. IV. LE. 52710)  A(IMOL)  = .4704
           AA(IMOL) = AAO2(IBAND)
           BB(IMOL) = BBO2(IBAND)
           CC(IMOL) = CCO2(IBAND)
      ENDIF
C  ---NH3
      IMOL = 11
      IW = -1
      IF (IV .GE.     0 .AND. IV .LE.   385)  IW = 52
      IF (IV .GE.   390 .AND. IV .LE.  2150)  IW = 53
      IBAND = IW - 51
      IBND(IMOL) = IW
      IF(IW .GT.  0) THEN
           A(IMOL)  =  ANH3(IBAND)
           AA(IMOL) = AANH3(IBAND)
           BB(IMOL) = BBNH3(IBAND)
           CC(IMOL) = CCNH3(IBAND)
      ENDIF
C  ---NO
      IMOL = 8
      IW = -1
      IF (IV .GE.  1700 .AND. IV .LE.  2005) IW  = 54
      IBAND = IW - 53
      IBND(IMOL) = IW
      IF(IW .GT.  0) THEN
           A(IMOL)  =  ANO
           AA(IMOL) = AANO
           BB(IMOL) = BBNO
           CC(IMOL) = CCNO
      ENDIF
C  ---NO2
      IW = -1
      IMOL = 10
      IF((IV .GE.   580 .AND. IV .LE.   925) .OR.
     *   (IV .GE.  1515 .AND. IV .LE.  1695) .OR.
     *   (IV .GE.  2800 .AND. IV .LE.  2970)) IW = 55
      IBAND = IW - 54
      IBND(IMOL) = IW
      IF(IW .GT.  0) THEN
           A(IMOL)  =  ANO2(IBAND)
           AA(IMOL) = AANO2(IBAND)
           BB(IMOL) = BBNO2(IBAND)
           CC(IMOL) = CCNO2(IBAND)
      ENDIF
C  ---SO2
      IMOL = 9
      IW = -1
      IF (IV .GE.     0 .AND. IV .LE.   185)  IW = 56
      IF((IV .GE.   400 .AND. IV .LE.   650) .OR.
     *   (IV .GE.   950 .AND. IV .LE.  1460) .OR.
     *   (IV .GE.  2415 .AND. IV .LE.  2580)) IW = 57
      IBAND = IW - 55
      IBND(IMOL) = IW
      IF(IW .GT.  0) THEN
           A(IMOL)  =  ASO2(IBAND)
           AA(IMOL) = AASO2(IBAND)
           BB(IMOL) = BBSO2(IBAND)
           CC(IMOL) = CCSO2(IBAND)
      ENDIF
      RETURN
      END Subroutine ABCDTA

      SUBROUTINE CXDTA (CPRIME,V,IWL,IWH,CP,IND)
C     THIS SUBROUTINE FINDS THE CPRIME FOR THE WAVENUMBER V.
C     INPUT:         V --- WAVENUMBER
C            (IWL,IWH) --- WAVENUMBER PAIR SPECIFIES THE ABSORPTION
C                          REGION. BOTH ARE ARRAYS AND TERMINATED
C                          WITH THE VALUE -999
C                   CP --- ARRAY CONTAINS THE CPRIMES
C     OUTPUT:   CPRIME --- THE CPRIME CORRESPONDING TO V
C     I/O:         IND --- INDICATOR INDICATES THE ABSORPTION REGION
C                          WHERE THE WAVENUMBER IS EXPECTED TO BE IN
C                          OR NEARBY (IT SERVES FOR THE PURPOSE
C                          TO SPEED UP THE SEARCHING PROCESS)
      DIMENSION IWL(*),IWH(*),CP(*)
      IV=V
      CPRIME=-20.0
      IF (IWL(IND+1) .EQ. -999 .AND. IV .GT. IWH(IND)) RETURN
      IF (IV .LT. IWL(1)) RETURN
      IC=0
  100 IF (IV .GE. IWL(IND) .AND. IV .LE. IWH(IND)) GO TO 200
      IF (IV .GT. IWH(IND) .AND. IV .LT. IWL(IND+1)) RETURN
      IND=IND+1
      IF (IWL(IND) .NE. -999) GO TO 100
      IND=IND-1
      IF (IV .GT. IWH(IND)) RETURN
      IND=1
      GO TO 100
  200 IF (IND .EQ. 1) GO TO 400
      INDM1=IND-1
      DO 300 I=1,INDM1
        IC=IC+(IWH(I)-IWL(I))/5+1
  300 CONTINUE
  400 IC=IC+(IV-IWL(IND))/5+1
      CPRIME=CP(IC)
      RETURN
      END SUBROUTINE CXDTA

      FUNCTION   DBLTX(W,CPRIME,QA)
      DBLTX=1.0
      IF (W .LT. 1.0E-20) RETURN
      IF (CPRIME .LT. -20) RETURN
      WS=LOG10(W)+CPRIME
      QAWS=QA*WS
      IF (QAWS .LT. 2.0) GO TO 100
      DBLTX=0.0
      RETURN
  100 IF (QAWS .GT. -6.0) GO TO 200
      DBLTX=1.0
      RETURN
  200 DBLTX=EXP(-10**QAWS)
      RETURN
      END FUNCTION   DBLTX

      SUBROUTINE CLDPRF (K,ICLD,IHA1,IC1)
C***********************************************************************
C     WILL COMPUTE DENSITY    PROFILES FOR CLOUDS
C***********************************************************************
      REAL MDLWC
      COMMON RELHUM(34),WHNO3(34),ICH(4),VH(17),TX(63),W(63)
      COMMON             WPATH(68, 63),TBBY(68)
      COMMON ABSC(5,47),EXTC(5,47),ASYM(5,47),VX2(47),AWCCON(5)
      COMMON/MODEL/ ZMDL(34),PM(34),TM(34),RFNDX(34),DENSTY(63,34),
     1 CLDAMT(34),RRAMT(34),EQLWC(34),HAZEC(34)
      DIMENSION RHZONE(4)
      DIMENSION ELWCR(4),ELWCU(4),ELWCM(4),ELWCT(4)
      DATA RHZONE/0.,70.,80.,99./
      DATA ELWCR/3.517E-04,3.740E-04,4.439E-04,9.529E-04/
      DATA ELWCM/4.675E-04,6.543E-04,1.166E-03,3.154E-03/
      DATA ELWCU/3.102E-04,3.802E-04,4.463E-04,9.745E-04/
      DATA ELWCT/1.735E-04,1.820E-04,2.020E-04,2.408E-04/
      DATA AFLWC/1.295E-02/,RFLWC/1.804E-03/,CULWC/7.683E-03/
      DATA ASLWC/4.509E-03/,STLWC/5.272E-03/,SCLWC/4.177E-03/
      DATA SNLWC/7.518E-03/,BSLWC/1.567E-04/,FVLWC/5.922E-04/
      DATA AVLWC/1.675E-04/,MDLWC/4.775E-04/
      DATA TNLWC/3.446E-3/ ,TKLWC/5.811E-2/
      IF(CLDAMT(K).LE.0.) GO TO 15
      IH=ICLD
      IF(IH .EQ. 0) GO TO 200
      IF(ICLD .EQ. 18) THEN
           HAZEC(K) = CLDAMT(K)/TNLWC
           RETURN
      ENDIF
      IF(ICLD .EQ. 19) THEN
           HAZEC(K) = CLDAMT(K)/TKLWC
           RETURN
      ENDIF
      IF(ICLD .EQ. 20) THEN
           RETURN
      ENDIF
      GO TO(114,115,116,117,118,116,118,118,114,114,114),IH
114   HAZEC(K)=CLDAMT(K)/CULWC
      RETURN
115   HAZEC(K)=CLDAMT(K)/ASLWC
      RETURN
116   HAZEC(K)=CLDAMT(K)/STLWC
      RETURN
117   HAZEC(K)=CLDAMT(K)/SCLWC
      RETURN
118   HAZEC(K)=CLDAMT(K)/SNLWC
 15   RETURN
200   IF(IHA1 .GT. 0) GO TO 205
      PRINT*,' WARNING ICLD NOT SET '
      RETURN
205   CONTINUE
      WRH = RELHUM(K)
C
      M = IC1
      IF (ICH(M).EQ.6.AND.M.NE.1) WRH=70.
C     THIS CODING  DOES NOT ALLOW TROP RH DEPENDENT  ABOVE EH(7,I)
C     DEFAULTS TO TROPOSPHERIC AT 70. PERCENT
      DO 210 I=2,4
      IF (WRH.LT.RHZONE(I)) GO TO 215
  210 CONTINUE
      I=4
  215 II=I-1
      IF(WRH.GT.0.0.AND.WRH.LT.99.)X=LOG(100.0-WRH)
      X1=LOG(100.0-RHZONE(II))
      X2=LOG(100.0-RHZONE(I))
      IF (WRH.GE.99.0) X=X2
      IF (WRH.LE.0.0) X=X1
      ITA=ICH(M)
      IF(ITA.EQ.3. AND. M.EQ.1) GO TO 218
      IF(ITA.GT.6) GO TO 245
CC
CC    MICROWAVE
      N = 41
CC
218   IF(N.GE.41. AND. ITA.EQ.3) ITA = 4
C     RH DEPENDENT AEROSOLS
      GO TO (220,220,222,225,230,235), ITA
 220  E2=LOG(ELWCR(I))
      E1=LOG(ELWCR(II))
      GO TO 240
 222  IF(M.GT.1) GO TO 225
      E2=LOG(ELWCM(I))
      E1=LOG(ELWCM(II))
      GO TO 240
  225 E2=LOG(ELWCM(I))
      E1=LOG(ELWCM(II))
      GO TO 240
  230 E2=LOG(ELWCU(I))
      E1=LOG(ELWCU(II))
      GO TO 240
  235 E2=LOG(ELWCT(I))
      E1=LOG(ELWCT(II))
  240 EC=E1+(E2-E1)*(X-X1)/(X2-X1)
      CON=EXP(EC)
      HAZEC(K) = CLDAMT(K)/CON
      RETURN
  245 IF (ITA.GT.19) GO TO 275
      ITC=ICH(M)-7
      IF (ITC.LT.1) RETURN
      GO TO (250,255,280,260,265,270,265,270,260,260,270,275), ITC
250   CON=AFLWC
      GO TO 280
255   CON=RFLWC
      GO TO 280
260   CON=BSLWC
      GO TO 280
265   CON=AVLWC
      GO TO 280
270   CON=FVLWC
      GO TO 280
275   CON=MDLWC
280   CONTINUE
      HAZEC(K) = CLDAMT(K)/CON
      RETURN
      END SUBROUTINE CLDPRF

      FUNCTION   BBFN(T,V)
C***********************************************************************
C   PLANCK BLACK BODY FUNCTION IN UNITS OF WATTS/(CM2 STER MICROMETER)
C***********************************************************************
      COMMON /CNSTNS/ PI,CA,DEG,GCAIR,BIGNUM,BIGEXP
      BBFN = 0.0
      IF(V. LE. 0.) RETURN
      X = 1.43879*V/T
C*****PROTECT AGAINST EXPONENTIAL OVERLOW
      IF(X.GT.BIGEXP) RETURN
      BBFN = 1.190956E-16*V**5/(EXP(X)-1.0)
      RETURN
      END  FUNCTION   BBFN

      SUBROUTINE MSRAD(IV,V,ISOURC,IDAY,ANGLEM,SS,
     2     DMF,DMFS,UMF,UMFS)
C
C         (1) SETS UP OPTICAL PROPERTIES PROFILES FOR VERTICAL
C             PATH
C         (2) CALLS FLXADD WHICH RETURNS MS SOURCE FUNCTION, J,
C             FOR PATH
C         (3) EVALUATES PATH INTEGRAL OF SOURCE FUNCTION, I.E.
C             MS RADIANCE CONTRIBUTION
C
C                                 A.E.R. 1986
C
      COMMON /CARD1/ MODEL,ITYPE,IEMSCT,M1,M2,M3,IM,NOPRNT,TBOUND,SALB
      COMMON /CARD2/ IHAZE,ISEASN,IVULCN,ICSTL,ICLD,IVSA,VIS,WSS,WHH,
     1    RAINRT
      COMMON /CNTRL/ KMAX,M,IKMAX,NL,ML,IKLO,ISSGEO,IMULT
      COMMON RELHUM(34),HSTOR(34),ICH(4),VH(17),TX(63),W(63)
      COMMON             WPATH(68, 63),TBBY(68)
      COMMON ABSC(5,47),EXTC(5,47),ASYC(5,47),VX2(47),AWCCON(5)
      COMMON /AER/ XX1,XX2,XX3,XX4,XX5,
     X YY1,YY2,YY3,YY4,YY5,ZZ1,ZZ2,ZZ3,ZZ4,ZZ5
      COMMON /SOLS/ AH1(68),ARH(68),
     X   WPATHS(68,63),PA(68),PR(68),ATHETA(35),ADBETA(35),LJ(69),JTURN,
     X ANGSUN,CSZEN(68)
C
      COMMON /TRAN/ABB(19),
     1                     BTOP(50),BMID(34),TMD(34),TMOLS(34),
     2 TAERS(34),TCONT(34),DCONT(34)
      COMMON /MNLT/TBBSS(68),TBBMS(34),WPMS(34,63),IMSMX,WPMSS(34,63)
      COMMON /MSRD/TLE(34),COSBAR(34),OMEGA0(34),UPF(10,34),DNF(10,34),
     1 TAER(50),                                             DTX7(34),
     2 DAERS(34),ASYIK(34),ASYDM(34),
     3 STRN(0:34),DMOLS(34), DSTRN(0:34),FDNSRF    ,FDNSRT,IKMX,
     4               FDNTRF    ,FDNTRT
      DIMENSION         DMF(34),DMFS(34),UMF(34),UMFS(34)
C
      IKMAX = IKMAX + 1
      IKM=IKMAX-1
C
C  FOR H1 < H2, CALCULATE DOWNWARD RADIANCE
C
C
      DO 222 IK=IKLO,IKM-1
C
C  AEROSOL PATH FOR EACH LAYER (NOT CUMULATIVE)
C
C
C  SOLAR TRANSMITTANCE FROM TOP OF ATMOSPHERE
C
      STRN(IK-1)=DSTRN(IKMAX-IK)
      IF(IHAZE .GT. 0) THEN
C
C  CALCULATE AEROSOL ASYMMETRY FACTOR FOR GIVEN LAYER
C
      DENOM  =  ASYDM(IK)
      IF(DENOM .LE. 0.) THEN
      COSBAR(IKM-IK) = 0.
      ELSE
      COSBAR(IKM-IK)= ASYIK(IK)/DENOM
      ENDIF
      ENDIF
C
C  TAER,TAERS, AND TMOLS ARE TOTAL AEROSOL, AEROSOL SCATTERING, AND
C  MOLECULAR SCATTERING OPTICAL THICKNESS FOR GIVEN LAYER
C
      TAER(IKM-IK)=DTX7(IK+1)-DTX7(IK)
      TAERS(IKM-IK)=DAERS(IK+1)-DAERS(IK)
      TMOLS(IKM-IK)=DMOLS(IK+1)-DMOLS(IK)
      IKMIK = IKM-IK
      IF(TAER (IKMIK) .LT. 0)TAER (IKMIK) = 0.
      IF(TAERS(IKMIK) .LT. 0)TAERS(IKMIK) = 0.
      IF(TMOLS(IKMIK) .LT. 0)TMOLS(IKMIK) = 0.
C
C  WEIGHT ASYMMETRY FACTOR
C
      IF(TAERS(IKM-IK) .LE.0.) THEN
            COSBAR(IKM-IK) = 0.
      ELSE
      COSBAR(IKM-IK)=COSBAR(IKM-IK)*TAERS(IKM-IK)/(TAERS(IKM-IK)+
     1 TMOLS(IKM-IK))
      ENDIF
C
C  TCONT IS MOLECULAR CONTINUUM OPTICAL THICKNESS FOR GIVEN LAYER
C
222   TCONT(IKM-IK)=DCONT(IK+1)-DCONT(IK)
      IF(IHAZE .GT. 0) THEN
C
C  CALCULATE ASYMMETRY FACTOR FOR BOTTOM OF ATMOSPHERE
C
      DENOM =  ASYDM(1)
      IF(DENOM .LE. 0.)  THEN
            COSBAR(IKM) = 0.
      ELSE
      COSBAR(IKM)= ASYIK(IK)/DENOM
      ENDIF
      ENDIF
      STRN(IKM-1)=DSTRN(IKMAX-IKM)
      STRN(IKM)=DSTRN(0)
      TAER(IKM)=DTX7(1)
      TAERS(IKM)=DAERS(1)
      TMOLS(IKM)=DMOLS(1)
C
C   WEIGHT ASYMMETRY FACTOR
C
      IF(TAERS(IKM) .LE.0.) THEN
            COSBAR(IKM) = 0.
      ELSE
      COSBAR(IKM)=COSBAR(IKM)*TAERS(IKM)/(TAERS(IKM)+TMOLS(IKM))
      ENDIF
      TCONT(IKM)=DCONT(1)
C
C   FOR H1 > H2, CALCULATE UPWARD RADIANCE
C
C
C   CALCULATE SOLAR INTENSITY AT TOP OF ATMOSPHERE
C
      S0 = 0.
      IF(IEMSCT .EQ. 2) CALL SOURCE(V,ISOURC,IDAY,ANGLEM,S0)
C
C
C   CALL FLUX ADDING SUBROUTINE
C
      CALL FLXADD (TLE,COSBAR,TAER,OMEGA0,UPF,DNF,IV,     IKMAX,
     2 CSZEN,S0,STRN,            FDNSRT,FDNTRT,
     3     DMF,DMFS,UMF,UMFS)
      RETURN
      END SUBROUTINE MSRAD

      SUBROUTINE FLXADD (TLE,COSBAR,TAER,OMEGA0,UPF,DNF,IWAVN,
     1 IKMAX,     CSZEN,S0,STRN,            FDNSRF,FDNTRF,
     2     DMF,DMFS,UMF,UMFS)
C
C         (1) CALCULATES UPWARD, F+ (UPF), AND DOWNWARD, F- (DNF),
C             FLUX PROFILES USING ADDING METHOD
C         (2) MS SOURCE FUNCTION EVALUATED FROM LEVEL FLUXES VIA
C             STREAM APPROXIMATION (SEE EQN     , ISAACS ET AL, 1986)
C         (3) BACKSCATTER FOR SOURCE FUNCTION FOR GIVEN G FACTOR
C             AND ZENTIH ANGLE OBTAINED USING FUNCTION BETABS
C
C                                          A.E.R. 1986
C
      DOUBLE PRECISION AER1,AER2,AERA,AERU,AERV,AERC,AERCX,EX1,EX2,
     1                 DENO,DNMO,DNM1
      COMMON /IFIL/IRD,IPR,IPU,NPR,IPR1
      COMMON RELHUM(34),HSTOR(34),ICH(4),VH(17),TX(63),W(63)
      COMMON             WPATH(68, 63),TBBY(68)
      COMMON ABSC(5,47),EXTC(5,47),ASYM(5,47),VX2(47),AWCCON(5)
C
      COMMON /TRAN/ABB(19),
     1                     BTOP(50),BMID(34),TMD(34),TMOLS(34),
     1 TAERS(34),TCONT(34),DCONT(34)
      COMMON /AABBCC/ AA(11),BB(11),CC(11),IBND(11),A(11),CPS(11)
      COMMON/CARD1/ MODEL,ITYPE,IEMSCT,M1,M2,M3,IM,NOPRNT,TBOUND,SALB
      COMMON/MODEL/ZM(34),PM(34),TM(34),DUM(34),DENSTY(63,34),
     1 CLDAMT(34),RRAMT(34),EQLWC(34),HAZEC(34)
      COMMON /CNTRL/ KMAX,M7,JKMAX,NL,ML,JKLO,ISSGEO,IMULT
      COMMON /PATH/ PL(68),QTHETA(68),ITEST,H1S,H2S,AHT(68)
      COMMON /CNSTNS/PI,CA,DEG,GCAIR,BIGNUM,BIGEXP
      COMMON /DIRST/  SUN,UMB(34),DMB(34),UMBS(34),DMBS(34)
      DIMENSION COSBAR(34),DNF(10,34),
     1 EDN(50),EUP(50),EUPC(50),TAUM(3,50),
     2                        TDF(50),TLE(34),OMEGA0(34),
     3 UPF(10,34),                  RUPC(50),TAER(50),REF(50),
     4 EUPS(34),EDNS(34),UPFS(15,34),DNFS(15,34),EUPCS(34),
     5 CSZEN(68),STRN(0:34),BETS(34),           TWGP(3,34),RUPCS(34),
     6 UMF(34),DMF(34),UMFS(34),DMFS(34),REFS(34),TDFS(34)
      DIMENSION OMEGAK(34),TAUT(34)
      DIMENSION FAC(3),GKWJ(3,11),DPWJ(3,11)
      DIMENSION CP1S(11),DPJ(3,34)
C***********************************************************************
C
C   INPUT PARAMETERS:
C   ----------------
C   TLE(N)     - TEMPERATURE (KELVIN) OF UPPER EDGE OF LAYER N
C   COSBAR(N)  - ASYMMETRY FACTOR FOR LAYER N
C   TAER(N)    - TOTAL AEROSOL OPTICAL THICKNESS OF LAYER N
C   TAERS(N)   - AEROSOL SCATTERING OPTICAL THICKNESS OF LAYER N
C   TCONT(N)   - MOLECULAR CONTINUUM OPTICAL THICKNESS FOR LAYER N
C   TMOLS(N)   - RAYLEIGH SCATTERING OPTICAL THICKNESS FOR LAYER N
C   CSZEN(N)   - COSINE OF SOLAR ZENITH ANGLE FOR LAYER N
C   IWAVN      - FREQUENCY (WAVENUMBER)
C   S0         - SOLAR INTENSITY AT TOP OF ATMOSPHERE
C   H1         - ALTITUDE OF OBSERVER (KM)
C   H2         - ALTITUDE OF TARGET (KM)
C   STRN(N)    - SOLAR TRANSMISSION TO BOTTOM OF LAYER N
C
C   OUTPUT PARAMETERS:
C   -----------------
C   OMEGAK  (N)- SINGLE SCATTERING ALBEDO OF LAYER N FOR VALUE OF K
C   TAUM(K,N)  - MOLECULAR OPTICAL THICKNESS OF LAYER N FOR VALUE OF K
C   BTOP(N)    - BLACK BODY FLUX FOR UPPER EDGE TEMPERATURE OF LAYER N
C   BMID(N)    - BLACK BODY FLUX FOR AVERAGE TEMPERATURE OF LAYER N
C
C   INTERNAL PARAMETERS:
C   -------------------
C   TWGP(K,N)  - SUM OF OPTICAL DEPTH * PROBABILITY BY MOLECULE
C
C   UPF(K,N)   - UPWARD THERMAL FLUX AT UPPER EDGE OF LAYER N FOR
C                VALUE OF K
C   UPFS(K,N)  - UPWARD SOLAR FLUX AT UPPER EDGE OF LAYER N FOR
C                VALUE OF K
C   DNF(K,N)   - DOWNWARD THERMAL FLUX AT UPPER EDGE OF LAYER N FOR
C                VALUE OF K
C   DNFS(K,N)  - DOWNWARD SOLAR FLUX AT UPPER EDGE OF LAYER N FOR
C                VALUE OF K
C   UMF(N)     - MEAN UPWARD THERMAL FLUX OF LAYER N FOR VALUE OF K
C   UMFS(N)    - MEAN UPWARD SOLAR FLUX OF LAYER N FOR VALUE OF K
C   DMF(N)     - MEAN DOWNWARD THERMAL FLUX OF LAYER N FOR VALUE OF K
C   DMFS(N)    - MEAN DOWNWARD SOLAR FLUX OF LAYER N FOR VALUE OF K
C   SU(K,N)    - UPWARD THERMAL RADIANCE SOURCE FUNCTION FOR N,K
C   SUS(K,N)   - UPWARD SOLAR RADIANCE SOURCE FUNCTION FOR N,K
C   SD(K,N)    - DOWNWARD THERMAL RADIANCE SOURCE FUNCTION FOR N,K
C   SDS(K,N)   - DOWNWARD SOLAR RADIANCE SOURCE FUNCTION FOR N,K
C   BETS(N)    - BACKSCATTER FRACTION ALONG SOLAR PATH AT LAYER N
C
C***********************************************************************
C
C   NEW VARABLES          11 MOLECULES  BY JOSEPH H PIERLUISSI
C   DPWJ  PROBABILITY FOR EACH MOLECULE  FIT DOUBLE EXPODENTIAL
C   GKWJ  BAND DEPENDENT  SCALING OF DENSITYS TO GET K  AMOUNT
C   CPS IS THE STORED VALUES OF PIERLUISSI BAND MODEL COEFFIECNTS
C   CP1S = 10**CPS
C   IBND MAPS BANDS TO MOLECULES
C   DPJ REPLACES DPO  IS THE  EFFECTIVE PROBILITY BY LAYER
C   TAUM IS DEFINED AS THE SUM OF THE OPTICAL DEPTHS BY MOLECULE
C
      DATA RUPC/50*0.0/,RUPCS/34*0.0/
      DATA EUPS/34*0.0/,EDNS/34*0.0/
      DATA REFS/34*0.0/,TDFS/34*0.0/
      DATA UPFS/510*0.0/,DNFS/510*0.0/
      DATA FAC /1.0,0.09,0.015/
320   FORMAT(5E14.6)
300   FORMAT(10F7.2)
310   FORMAT(10F7.4)
      DPC = 1./3.
      WAVN=FLOAT(IWAVN)
      V = WAVN
CC    PRINT 1900
1900  FORMAT('      V    FLXDN     FLXDNS    FLXUP     FLXUPS')
      NLAYRS = ML - 1
      NG=NLAYRS+1
      NG1=NG+1
      DO  1 M = 1,11
1     CP1S(M)= 10.**CPS(M)
C
      DO  4  MOL = 1,11
      DO  5    K = 1,3
      IW = IBND(MOL)
      GKWJ(K,MOL) = 0.
      DPWJ(K,MOL) = 0.
      IF(IW. LE. 0) GO TO 5
      GKWJ(K,MOL) = FAC(K) * CC(MOL)
      IF(K .EQ. 1) DPWJ(K,MOL) = AA(MOL)
      IF(K .EQ. 2) DPWJ(K,MOL) = BB(MOL)
      IF(K .EQ. 3) DPWJ(K,MOL) = 1. - AA(MOL) - BB(MOL)
      IF(K. GT. 1) GO TO 5
  5   CONTINUE
 4    CONTINUE
      TLE(NG1)=TLE(NG)
      DO 98 N=1,NG
C
C   BLACK BODY FLUX FOR LAYER EDGE TEMPERATURE
C
      BTOP(N)=BBFN(TLE(N),V)*PI
C
C   BLACK BODY RADIANCE FOR LAYER MIDDLE TEMPERATURE
C
      BMID(N)=BBFN(TMD(N),V)
      IF(N .LT. NG) THEN
C
C    CALCULATE COSINE OF VIEWING PATH ZENITH ANGLE
C
C
C    CALCULATE BACKSCATTER PARAMETERS
C
      IF(COSBAR(N) .EQ. 0.0) THEN
      BETS(N)=.5
      ELSE
      IF((IEMSCT .EQ. 2) .OR. (IEMSCT .EQ. 3)) THEN
      BETS(N)=BETABS(CSZEN(N),COSBAR(N))
      ENDIF
      ENDIF
      ENDIF
   98 CONTINUE
C
C   ABSORPTION COEFFICIENTS FOR WATER VAPOR, UNIFORMLY MIXED GASES
C   AND OZONE
C
C
C   EVALUATE THE WEIGHTED K DISTRIBUTION QUANTITIES FOR
C   WATER VAPOR AND THE UNIFORMLY MIXED GASES
C
      DO 70 K=1, 3
      DO 70 N=1,NLAYRS
C
      TAUM(K,N)  = 0.
      TWGP(K,N)  = 0.
      DO 60 MOL = 1,11
      IB = IBND(MOL)
      IF(IB .LT.0) GO TO 60
      W(IB) = DENSTY(IB,IKMAX-N)*PL(IKMAX-N)*GKWJ(K,MOL)
      TAUM(K,N)= TAUM(K,N) + W(IB) * CP1S(MOL)
      TWGP(K,N)= TWGP(K,N) + W(IB) * CP1S(MOL) * DPWJ(K,MOL)
60    CONTINUE
      DPJ(K,N) = DPC
      IF(TAUM(K,N) .NE .0) THEN
         DPJ(K,N) = TWGP(K,N) / TAUM(K,N)
      ENDIF
C
C     EFFECTIVE PROBILITY BY LAYER DPJ IS BASED ON MOLECULAR
C     PROBILITY WEIGHTED BY OPTICAL DEPTH
C
  70  CONTINUE
      DO 80 N=1,NLAYRS
      SMDPJ = DPJ(1,N) + DPJ(2,N) + DPJ(3,N)
      DO 80 K=1, 3
      DPJ(K,N) = DPJ(K,N)/SMDPJ
  80  CONTINUE
C
C     EFFECTIVE PROBILITY BY LAYER DPJ NORMALIZED
C     FOR CURRENT VALUES OF GKWJ  NORMALIZATION NOT REQUIRED
C     PROTECTION FOR ARBITARY CHOICE OF GKWJ
C
C***********************************************************************
C*    PROBABILITY INTEGRATION LOOP                                     *
C***********************************************************************
      DO 100 K=1,3
C**** COMPOSITE DOWNWARDS REFLECTION
      RDNCN=0.
      RDNCNS=0.0
C***********************************************************************
C*    ADDING GROUND LAYER                                              *
C***********************************************************************
C
C   DEFINE INITIAL UPWARD COMPOSITE SURFACE REFLECTANCE
C
      RUPCN=SALB
      RUPCNS=SALB
C
C   SURFACE THERMAL EMISSION
C
      BTOP(NG1)=BBFN(TLE(NG1),V)*PI
C
C   SURFACE EMISSION
C
      EUPCN=(1.0-RUPCN)*BTOP(NG1)
      EUP(NG)=EUPCN
      EUPC(NG)=EUPCN
      IF(IEMSCT .EQ. 2) THEN
      MF = ML - 1
      EUPCNS=RUPCNS*CSZEN(MF)*STRN(MF)*S0
      ELSE
      EUPCNS=0.0
      ENDIF
      EUPS(NG)=EUPCNS
      EUPCS(NG)=EUPCNS
C
C***********************************************************************
C*      UPWARD ADDING LOOP(1-N)                                        *
C***********************************************************************
      DO 101 N=NLAYRS,1,-1
      M=N-1
C
C    CALCULATE MOLECULAR OPTICAL THICKNESS OF EACH LAYER FOR EACH K
C    NOTE: TOP LAYER IS LAYER 1
C
C
C      EUP AND EDN ARE UPWARD AND DOWNWARD THERMAL FLUX
C      FOR AN ISOLATED LAYER
C      TDF AND REF ARE THE THERMAL TRANSMISSION AND REFLECTANCE
C      FOR AN ISOLATED LAYER
      IF(K.EQ.1) THEN
        TAUT(N) = TAUM(K,N) * DPJ(K,N)
      ELSE
        TAUT(N) = TAUM(K,N) * DPJ(K,N) + TAUT(N)
        DENOM =  (TAUT(N)+TAER(N)+TCONT(N)+TMOLS(N))
        IF(DENOM .LE. 0.) DENOM = 1.
        IF(K.EQ.3) OMEGA0(N) = (TAERS(N) + TMOLS(N)) /
     X  DENOM
      ENDIF
C
C    XP IS THE PATH OPTICAL THICKNESS FOR A GIVEN LAYER OF PATH
C    LENGTH PL
C
      XP=TAUM(K,N)+TAER(N)+TCONT(N)+TMOLS(N)
C
C    X IS THE NORMAL PATH OPTICAL THICKNESS FOR A GIVEN LAYER
C
      X=XP*(ZM(IKMAX-N+1)-ZM(IKMAX-N))/PL(IKMAX-N)
      OMEGAK(N)=(TAERS(N)+TMOLS(N))/XP
C
C   USE TWO STREAM APPROXIMATION FOR THERMAL
C
160   CONTINUE
      IF(OMEGAK(N).GT.0.99999) GO TO 115
      AER1=1.0-OMEGAK(N)
      AER2=1.0-OMEGAK(N)*COSBAR(N)
      AERA=SQRT(AER1/AER2)
      AERU=(1.0-AERA)/2.0
      AERV=(1.0+AERA)/2.0
      AERC=SQRT(3.0*AER1*AER2)
      AERCX = AERC*X
      IF(AERCX.LT.BIGEXP) THEN
           EX1=EXP(-AERCX)
      ELSE
           EX1 = 1./BIGNUM
      ENDIF
      EX2=EX1*EX1
      DENO=(AERV*AERV-AERU*AERU*EX2)
      DNMO=(BTOP(N)-BTOP(N+1))/X/AERC*(AERV-AERU*EX2-AERA*EX1)
      DNM1=AERV+AERU*EX2
      EUP(N)=(BTOP(N)*DNM1-DNMO-BTOP(N+1)*EX1)/DENO*AERA
      EDN(N)=(BTOP(N+1)*DNM1+DNMO-BTOP(N)*EX1)/DENO*AERA
      IF(EUP(N) .LT. 0)EUP(N) = 0.
      IF(EDN(N) .LT. 0)EDN(N) = 0.
      REF(N)=AERU*AERV*(1.0-EX2)/DENO
      TDF(N)=(AERV-AERU)/DENO*EX1
      GOTO 114
115    TDF(N)=1./(1.+SQRT(3.)*(1.-COSBAR(N))/2.*X)
      REF(N)=1.-TDF(N)
      EUP(N)=0.0
      EDN(N)=0.0
114    CONTINUE
      IF(IEMSCT .EQ. 2)THEN
C
C     CALCULATE PARAMETERS FOR SOLAR HYBRID MODIFIED
C     DELTA EDDINGTON 2-STREAM APPROXIMATION
C
      SMU=CSZEN(N)
      B0=BETS(N)
      OME0=OMEGAK(N)
      IF(OME0 .GE. .999999) OME0 = .999999
C
C      OME0 TEST MAY BE MACHINE DEPENDENT
C
C
C      RECODED AS BS  FC AND AS*EXP(SK*X)  FOR IMPROVED
C      ACCURACY IN SOLAR FLUX CALCULATIONS FOR LARGE X
C      ( NON MACHINE DEPENDANT )
C
      G=COSBAR(N)
      Q=4.0*(1.0-G**2.*(1.0-SMU))
      GM1=(7.0-3.0*G**2.-OME0*(4.0+3.0*G)+OME0*G**2.*(4.0*B0+3.0*G))/Q
      GM2=-(1.0-G**2.-OME0*(4.0-3.0*G)-OME0*G**2.*(4.0*B0+3.0*G-4.0))/Q
      IF(GM2  .EQ. 0.0) THEN
          GM2=1.0E-10
      ENDIF
      SK=SQRT(GM1*GM1-GM2*GM2)
      CS=           OME0*(BETS(N)/SMU-GM1*BETS(N)-GM2*
     2 (1.-BETS(N)))*(SMU*SMU/(1.-SK*SK*SMU*SMU))
      YS=CS*(GM1+1./SMU)-           OME0*BETS(N)
CC    E1=YS/(GM1-SK)
CC    E2=-CS
CC    E3=(GM1+SK)/(SK-GM1)
CC    E4=1.
CCC   BS=(E1*EXP(SK*X)+E2*EXP(-X/SMU))/(E3*EXP(SK*X)+E4*EXP(-SK*X))
CCC   AS=(BS*(GM1+SK)+YS)/(SK-GM1)
C
C    CALCULATE UPWARD & DOWNWARD FLUX, EACH LAYER ALONE
C
CCC   EUPS(N)=AS+BS+CS
CCC   EDNS(N)=(AS*(GM1-SK)*EXP(SK*X)+BS*(GM1+SK)*EXP(-SK*X)+
CCC  2 YS*EXP(-X/SMU))/GM2
C
C     NEW SECTION
C
      EKTL = SK * X
      IF(EKTL .LT.BIGEXP) THEN
           EKT = EXP(-EKTL)
      ELSE
           EKT = 1./BIGNUM
      ENDIF
      EKT2 = EKT * EKT
      ETMUL = X / SMU
      IF(ETMUL .LT. BIGEXP) THEN
           ETMU = EXP(-ETMUL)
      ELSE
           ETMU = 1./BIGNUM
      ENDIF
CC    ASXP =-1.* ((GM1+SK)*E2*ETMU+YS*E4*EKT)/(E3+E4*EKT2)
      GMPSK = GM1+SK
      GMMSK = GM1-SK
      DENOM = (EKT2*GMMSK)-GMPSK
      ASXP =-GMMSK*(YS*EKT-GMPSK*CS*ETMU)/DENOM
CC    ASNEW=-1.* ((GM1+SK)*E2*ETMU*EKT+YS*E4*EKT2)/(E3+E4*EKT2)
      ASNEW=-1.* (-GMPSK*CS*ETMU*EKT+YS*EKT2)/DENOM
CC    BSNEW = (E1 + E2 * ETMU * EKT)/(E3 + E4*EKT2)
      BSNEW = (YS -(CS * ETMU * EKT*GMMSK))/DENOM
      EUPS(N)=ASNEW+BSNEW+CS
CC    EDNS(N)=(ASXP+BSNEW*(GM1+SK)*EXP(-SK*X)+
CC   2 YS*EXP(-X/SMU))/GM2
      EDNS(N)=(ASXP+BSNEW*(GMPSK)*EKT+YS*ETMU)/GM2
      FC=1./(CSZEN(N))
C
C   REFS & TDFS ARE REFLECT & TRANSMITT FOR INDIVIDUAL LAYERS,SOLAR
C
           REFS(N)=EUPS(N)*FC
           XCSZEN = X/CSZEN(N)
           IF(XCSZEN.LT.BIGEXP) THEN
                TDFS(N)=EDNS(N)*FC+EXP(-XCSZEN)
      ELSE
                TDFS(N)=EDNS(N)*FC
      ENDIF
           EUPS(N) = EUPS(N) * S0 * STRN(M)
           EDNS(N) = EDNS(N) * S0 * STRN(M)
      ENDIF
      DENO=1.0-RUPCN*REF(N)
      DENOS=1.0-RUPCNS*REFS(N)
C
C    CALCULATE COMPOSITE FLUXES AND REFLECTANCES
C
125   EUPCN=EUP(N)+(EUPCN+EDN(N)*RUPCN)*TDF(N)/DENO
      EUPCNS=EUPS(N)+(EUPCNS+EDNS(N)*RUPCNS)*TDFS(N)/DENOS
      RUPCNS=REFS(N)+TDFS(N)*RUPCNS*TDFS(N)/DENOS
140   RUPCN=REF(N)+TDF(N)*RUPCN*TDF(N)/DENO
      EUPC(N)=EUPCN
      EUPCS(N)=EUPCNS
      RUPC(N)=RUPCN
      RUPCS(N)=RUPCNS
101   CONTINUE
C***********************************************************************
C*    NOW ADD DOWNWARD FROM TOP LAYER (N=1)                            *
C***********************************************************************
      EDNCN=0.0
      EDNCNS=0.0
      DNF(K,1)=EDNCN
      UPF(K,1)=EUPC(1)
      IF(IEMSCT .EQ. 2) THEN
      DNFS(K,1)=EDNCNS
      UPFS(K,1)=EUPCS(1)
      ENDIF
      RDNCN=0.
      RDNCNS=0.
      DO 130 N=2,NG
      M=N-1
      DENO=1.0-RDNCN*REF(M)
      DENOS=1.0-RDNCNS*REFS(M)
121   CONTINUE
      EDNCN=EDN(M)+(EDNCN+EUP(M)*RDNCN)*TDF(M)/DENO
      RDNCN=REF(M)+TDF(M)*TDF(M)*RDNCN/DENO
132   CONTINUE
      PEFUP =(EUPC(N)+EDNCN*RUPC(N))/DENO
      PEFDN =(EDNCN+EUPC(N)*RDNCN)/DENO
      IF(IEMSCT .EQ. 2) THEN
      EDNCNS=EDNS(M)+(EDNCNS+EUPS(M)*RDNCNS)*TDFS(M)/DENOS
      RDNCNS=REFS(M)+TDFS(M)*TDFS(M)*RDNCNS/DENOS
      PEFUPS=(EUPCS(N)+EDNCNS*RUPCS(N))/DENOS
      PEFDNS=(EDNCNS+EUPCS(N)*RDNCNS)/DENOS
      UPFS(K,N)=PEFUPS
      DNFS(K,N)=PEFDNS
      ENDIF
 120  UPF(K,N)=PEFUP
      DNF(K,N)=PEFDN
 130  CONTINUE
      DPJ(K,NG) = DPJ(K,NG-1)
      DO 117 N=2,NG
      M=N-1
      IF(K.EQ.1) THEN
           UMF(M)=.5*(UPF(K,M)+UPF(K,N))*DPJ(K,M)
           UMFS(M)=.5*(UPFS(K,M)+UPFS(K,N))*DPJ(K,M)
           DMF(M)=.5*(DNF(K,M)+DNF(K,N))*DPJ(K,M)
           DMFS(M)=.5*(DNFS(K,M)+DNFS(K,N))*DPJ(K,M)
           UMB(N)=    UPF(K,N)*DPJ(K,N)
           UMBS(N)=   UPFS(K,N)*DPJ(K,N)
           DMB(M)=    DNF(K,M)*DPJ(K,M)
           DMBS(M)=   DNFS(K,M)*DPJ(K,M)
      ELSE
           UMF(M)=UMF(M)+.5*(UPF(K,M)+UPF(K,N))*DPJ(K,M)
           UMFS(M)=UMFS(M)+.5*(UPFS(K,M)+UPFS(K,N))*DPJ(K,M)
           DMF(M)=DMF(M)+.5*(DNF(K,M)+DNF(K,N))*DPJ(K,M)
           DMFS(M)=DMFS(M)+.5*(DNFS(K,M)+DNFS(K,N))*DPJ(K,M)
           UMB(N)= UMB(N)   +  UPF(K,N)*DPJ(K,N)
           UMBS(N)=UMBS(N)  +  UPFS(K,N)*DPJ(K,N)
           DMB(M)= DMB(M)   +  DNF(K,M)*DPJ(K,M)
           DMBS(M)=DMBS(M)  +  DNFS(K,M)*DPJ(K,M)
      ENDIF
C
C   TRNSD & TRNSU ARE CUMULATIVE DOWNWARD & UPWARD TRANSMISSION
C
 117    CONTINUE
C
C   FDNSRF IS THE DOWNWARD SOLAR FLUX AT THE SURFACE
C   FDNTRF IS THE DOWNWARD THERMAL FLUX AT THE SURFACE
C
      IF(K.EQ.1) THEN
           FDNSRF   =DNFS(K,NG)*DPJ(K,NLAYRS)
           FDNTRF   =DNF(K,NG) *DPJ(K,NLAYRS)
           FUPSRF   =UPFS(K, 1)*DPJ(K, 1)
           FUPTRF   =UPF(K, 1) *DPJ(K, 1)
      ELSE
           FDNSRF   =FDNSRF + DNFS(K,NG)*DPJ(K,NLAYRS)
           FDNTRF   =FDNTRF + DNF(K,NG) *DPJ(K,NLAYRS)
           FUPSRF   =FUPSRF + UPFS(K, 1)*DPJ(K, 1)
           FUPTRF   =FUPTRF + UPF(K, 1) *DPJ(K, 1)
      ENDIF
CC    IF(K.EQ.3)PRINT 1910,V,FDNSRF,FDNTRF,FUPSRF,FUPTRF
1910  FORMAT(F10.0,1P4E10.3)
CCC   IF(K.EQ.3)WRITE(6,1920)FDNSRF,FDNTRF,FUPSRF,FUPTRF
1920  FORMAT(30X,' FLXDNS=',1PE10.3,' FLXDN =',E10.3,' FLXUPS =',E10.3,
     X ' FLXUP ',E10.3)
100   CONTINUE
      UMB(1) = FUPTRF
      UMBS(1)= FUPSRF
      DMB(NG)= FDNTRF
      DMBS(NG)=FDNSRF
      SUN = S0
      RETURN
      END SUBROUTINE FLXADD

      SUBROUTINE MAPMS(ML,IKMAX,ZM,AHT,IMAP)
C
C     ZM MODEL ALTITUDES
C     AHT LINE OF SIGHT ALTITUDES
C
C     MULTISCATERING SET UP LOOKING UP
C     GROUND TO SPACE AT 0 DEG
C
      DIMENSION ZM(*),AHT(*),IMAP(*)
      DO 20 J=1,IKMAX
      DO 10 I=1,ML
      IF(ZM(I).GT.AHT(J)) GO TO 20
      IMAP(J)=I
10    CONTINUE
20    CONTINUE
      RETURN
      END Subroutine MAPMS

      FUNCTION   BETABS(U,G)
C
C   FUNCTION BETABS SUPPLIES THE BACK SCATTER FRACTION FOR A GIVEN
C   ASYMMETRY FACTOR AND COSINE OF ANGLE
C                                             A.E.R. 1986
C
      DIMENSION A9(10,5),U8(9)
      DATA U8/0.0,.1,.2,.3,.4,.5,.6,.8,1.0/
      DATA A9/.5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .0, .13979292889,
     1   -.12019000482,   -.46017123188,  -.406828796532, -.3001541656,
     2   -.553474414782,  -.626794663911, -.84678101,   -.406823676662,
     3  .0, -1.5989873995, -.2724219928,  1.18747390274, .49409050834,
     4   -.35928947292,    .37397957743,   .18057740986, .50718036245,
     5    .01406832224, .0, 3.5184116963,  .6385960123, -2.081230849,
     6  -1.0144699491,     .1589475781,   -.74761782865, -.37416958202,
     7   -.374040109,   .1055607702, .0, -2.5592172257,  -.7459840146,
     8    .85392041407,    .4272082373,    .00049606046,  .42711266606,
     9    .32038683614,    .2136746594,   -.2128054157 /
C
C     BACKSCATTERING INTERPOLATION
C
      IQ=0
      IF(U .LT. .1) IQ=1
      IF(U .LT. .2 .AND. U .GE. .1) IQ=2
      IF(U .LT. .3 .AND. U .GE. .2) IQ=3
      IF(U .LT. .4 .AND. U .GE. .3) IQ=4
      IF(U .LT. .5 .AND. U .GE. .4) IQ=5
      IF(U .LT. .6 .AND. U .GE. .5) IQ=6
      IF(U .LT. .8 .AND. U .GE. .6) IQ=7
      IF(U .LE.1.0 .AND. U .GE. .8) IQ=8
      IF (IQ .EQ. 0) THEN
      WRITE(16,105) U
  105 FORMAT(//,' THE VALUE FOR MU OF ',F12.6,' IS > 1.0 ]]')
      STOP ' ERROR ***'
      END IF
C
      Y5=0.0
      Y6=0.0
      Y7=0.0
      IQP1=IQ+1
C
      DO 30 J=1,5
      JM1=J-1
      Y9=A9(IQ,J)*G**JM1
      Y8=A9(IQP1,J)*G**JM1
      Y3=A9(10,J)*G**JM1
      Y7=Y7+Y9
      Y6=Y6+Y8
      Y5=Y5+Y3
  30  CONTINUE
      BETABS=Y7+(Y6-Y7)*(U-U8(IQ))/(U8(IQP1)-U8(IQ))
C
      RETURN
      END Function BETABS

      SUBROUTINE C4DTA (C4L,V)
C **  N2 CONTINUUM
      COMMON /C4C8/ C4(133),C8(102)
      C4L=0.
      IF(V.LT.2080.) RETURN
      IF(V.GT.2740.) RETURN
      IV=V
      L=(IV-2080)/5+1
      C4L=C4(L)
      RETURN
      END Subroutine C4DTA

      SUBROUTINE C6DTA(C6L,V)
C     CALCULATES MOLECULAR RAYLEIGH SCATTERING COEFFICIENT
C     USES APPROXIMATION OF SHETTLE ET AL., 1980 (APPL OPT,2873-4)
C     WITH THE DEPOLARIZATION = 0.0279 INSTED OF 0.035
C     INPUT: V = FREQUENCY IN WAVENUMBERS (CM-1)
C     OUTPUT: C6L = MOLECULAR SCATTERING COEFFICIENT (KM-1)
C                   FOR TEMPERATURE 273K & PRESSURE = 1 ATM.
C
      C6L=V**4/(9.38076E+18-1.08426E+09*V**2)
      RETURN
      END Subroutine C6DTA

      SUBROUTINE C8DTA (C8L,V)
C **  OZONE U.V + VISIBLE
      COMMON /C4C8/ C4(133),C8(102)
      C8L=0.
      IF(V.LT.13000.) RETURN
      IF(V.GT.50000.) RETURN
      IV=V
      IF(IV.GT.24200.AND.IV.LT.27500) RETURN
      XI=(V-13000.0)/200.0+1.
      IF(IV.GE.27500) XI=(V-27500.0)/500.+57.
      N=XI+1.001
      XD=XI-FLOAT(N)
      C8L=C8(N)+XD*(C8(N)-C8(N-1))
      RETURN
      END Subroutine C8DTA

      SUBROUTINE HERTDA(HERZ,V)
C
C     HERZBERG O2 ABSORPTION
C     HALL,1987 PRIVATE COMMUNICATION, BASED ON:
C
C     REF. JOHNSTON ET.AL, JGR,89,11661-11665,1984
C         NICOLET, 1987 (RECENT STUDIES IN ATOMIC & MOLECULAR PROCESSES,
C                        PLEMUN PUBLISHING CORP, NY 1987)
C     AND YOSHINO, ET.AL., 1988 (PREPRINT OF "IMPROVED ABSORPTION
C         CROSS SECTIONS OF OXYGEN IN THE WAVELENGTH REGION 205-240NM
C         OF THE HERZBERG CONTINUUM")
C
      COMMON /CNSTNS/ PI,CA,DEG,GCAIR,BIGNUM,BIGEXP
C
      HERZ=0.0
      IF(V.LE.36000.00) RETURN
C
C     EXTRAPOLATE SMOOTHLY THROUGH THE HERZBERG BAND REGION
C     NOTE: HERZBERG BANDS ARE NOT CORRECTLY INCLUDED
C
      CORR=0.
      IF(V.LE.40000.)CORR=((40000.-V)/4000.)*7.917E-27
C
C     CONVERSION TO ATM-CM /KM
C
      RLOSCH = 2.6868 E24 * 1.0E-5
C
C     HALL'S NEW HERZBERG  (LEAST SQRS FIT, LN(P))
C
C     YRATIO=2048.7/WL(I)  ****IN ANGSTOMS****
C           =.20487/WN(I)     IN MICRONS
C           =WCM(I)/48811.0   IN CM-1
C
      YRATIO= V    /48811.0
      HERZ=6.884E-24*(YRATIO)*EXP(-69.738*(LOG(YRATIO))**2)-CORR
      HERZ = HERZ * RLOSCH
      RETURN
      END Subroutine HERTDA

      SUBROUTINE SLF296(V1C,SH2OT0)
C     LOADS SELF CONTINUUM  296K
      COMMON /SH2O/ V1,V2,DV,NPT,S296(2003)
      CALL SINT(V1,V1C,DV,NPT,S296,SH2OT0)
      RETURN
      END Subroutine SLF296

      SUBROUTINE SLF260(V1C,SH2OT1)
C     LOADS SELF CONTINUUM  260K
      COMMON /S260/ V1,V2,DV,NPT,S260(2003)
      CALL SINT(V1,V1C,DV,NPT,S260,SH2OT1)
      RETURN
      END Subroutine SLF260

      SUBROUTINE FRN296(V1C,FH2O)
C     LOADS FOREIGN CONTINUUM  296K
      COMMON /FH2O/ V1,V2,DV,NPT,F296(2003)
      CALL SINT(V1,V1C,DV,NPT,F296,FH2O)
      RETURN
      END

      SUBROUTINE SINT(V1,V1C,DV,NPT,CONTI,CONTO)
C
C     INTERPOLATION  FOR CONTINUUM WITH LOWTRAN
C
      DIMENSION CONTI(2003)
      CONTO=0.
      I=(V1C-V1)/DV+1.00001
      IF(I.GE.NPT)GO TO 10
      CONTO=CONTI(I)
      IMOD=AMOD(V1C,10.)
      IF(IMOD.GT.0) CONTO=(CONTI(I)+CONTI(I+1))/2.
10    CONTINUE
      RETURN
      END Subroutine SINT

      SUBROUTINE O3INT(V1C,V1,DV,NPT,CONTI,CONTO)
C
C     INTERPOLATION  FOR  O3 CONTINUUM WITH LOWTRAN
C
      DIMENSION CONTI(2687)
      CONTO=0.
      I=(V1C-V1)/DV+1.00001
      IF(I.LT.1  )GO TO 10
      IF(I.GT.NPT)GO TO 10
      CONTO=CONTI(I)
10    CONTINUE
      RETURN
      END SUBROUTINE O3INT

      SUBROUTINE O3HHT0(V,C)
      COMMON /O3HH0/ V1S,V2S,DVS,NPTS,S(2687)
C
      CALL O3INT(V ,V1S,DVS,NPTS,S,C)
      RETURN
      END SUBROUTINE O3HHT0

      INCLUDE "lwtndata.f"
